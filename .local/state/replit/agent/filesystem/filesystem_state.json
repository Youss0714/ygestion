{"file_contents":{"README.md":{"content":"# YGestion\n\n**SaaS de gestion commerciale et comptable multilingue pour l’Afrique de l’Ouest.**  \nBuilt with Supabase, Drizzle ORM, and TypeScript.\n\n---\n\n## 📦 Fonctionnalités clés / Key Features\n\n- 🧾 Facturation multilingue (Français, Anglais)\n- 📊 Suivi des ventes, achats et stocks\n- 💼 Gestion comptable conforme OHADA\n- 🌍 Multi-devise et multi-entreprise\n- 🔐 Architecture multi-tenant sécurisée\n- 🧠 Génération automatique du schéma SQL avec Drizzle ORM\n- 🚀 Déploiement cloud optimisé pour l’Afrique de l’Ouest (Paris region)\n\n---\n\n## ⚙️ Stack technique / Tech Stack\n\n| Technologie     | Usage                                      |\n|----------------|---------------------------------------------|\n| Supabase        | Base de données PostgreSQL + Auth + Edge Functions |\n| Drizzle ORM     | Génération et migration du schéma SQL      |\n| TypeScript      | Typage strict et logique métier            |\n| React + Vite    | Interface utilisateur rapide et moderne    |\n| Tailwind CSS    | Design responsive et professionnel         |\n\n---\n\n## 🚀 Installation locale / Local Setup\n\n```bash\n# Cloner le dépôt\ngit clone https://github.com/Youss0714/fils\ncd fils\n\n# Installer les dépendances\nnpm install\n\n# Lier le projet Supabase\nsupabase link --project-ref pciuxfjqtxbrpjyhbcxe\n\n# Pousser le schéma vers Supabase\nsupabase db push\n\n# Lancer l'application\nnpm run dev\n🧩 Structure du projet / Project Structure\n\n\nfils/\n├── client/              # Interface utilisateur\n├── server/              # API et logique métier\n├── shared/              # Types et schéma Drizzle\n├── supabase_schema.sql  # Schéma SQL complet\n├── drizzle.config.ts\n├── tailwind.config.ts\n├── tsconfig.json\n├── vite.config.ts\n├── .gitignore\n├── package.json\n└── README.md\n\nLicence\n\nCe projet est sous licence MIT. This project is licensed under the MIT License.\n\n✨ Auteur / Author\nDéveloppé par Youssouphafils – Fondateur de YGestion GitHub: Youss0714\n\n","size_bytes":2051},"clean.sh":{"content":"#!/bin/bash\n\necho \"🧹 Nettoyage du dépôt...\"\n\nrm -f cookies.txt\nrm -f replit.md\nrm -f components.json\nrm -rf attached_assets\n\necho \"✅ Fichiers supprimés.\"\n\necho -e \"\\n# Nettoyage Replit\\ncookies.txt\\nreplit.md\\ncomponents.json\\nattached_assets/\" >> .gitignore\n\necho \"✅ .gitignore mis à jour.\"\n","size_bytes":303},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"// server/db.ts\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from '@shared/schema';\nimport dotenv from 'dotenv';\n\n// Charge le bon fichier .env selon l'environnement\ndotenv.config({\n  path: process.env.NODE_ENV === 'production' ? './.env.production' : './.env',\n});\n\n// Vérification stricte\nconst { DATABASE_URL } = process.env;\nif (!DATABASE_URL) {\n  throw new Error('❌ DATABASE_URL must be set. Did you forget to configure .env?');\n}\n\n// Connexion PostgreSQL\nconst client = postgres(DATABASE_URL, { ssl: 'require' }); // utile pour Supabase\nexport const db = drizzle(client, { schema });\n","size_bytes":651},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport dotenv from \"dotenv\";\n\n// Charge les variables d'environnement\n// En mode Electron packagé, chercher le .env dans le dossier resources\nconst isElectron = process.env.npm_config_user_config?.includes('electron') || \n                 process.argv.some(arg => arg.includes('electron')) ||\n                 process.env.ELECTRON_RUN === 'true';\n\nconst envPath = isElectron && process.env.NODE_ENV === \"production\"\n  ? (process as any).resourcesPath ? `${(process as any).resourcesPath}/.env` : \"./.env\"\n  : process.env.NODE_ENV === \"production\" ? \"./.env.production\" : \"./.env\";\n\nconsole.log('🔧 Loading environment from:', envPath);\ndotenv.config({ path: envPath });\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Middleware de journalisation API\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Middleware de gestion des erreurs\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Setup Vite uniquement en développement (mais pas depuis Electron)\n  if (app.get(\"env\") === \"development\" && !isElectron) {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Démarrage du serveur\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`✅ Server running on port ${port}`);\n  });\n})();\n","size_bytes":2490},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./simpleAuth\";\nimport { \n  insertClientSchema, \n  insertProductSchema, \n  insertCategorySchema, \n  insertInvoiceSchema,\n  insertInvoiceItemSchema,\n  insertLicenseSchema,\n  insertExpenseCategorySchema,\n  insertExpenseSchema,\n  insertImprestFundSchema,\n  insertImprestTransactionSchema,\n  insertAccountingReportSchema,\n  insertCashBookEntrySchema,\n  insertPettyCashEntrySchema,\n  insertTransactionJournalSchema,\n  insertRevenueCategorySchema,\n  insertRevenueSchema,\n  insertBusinessAlertSchema,\n  insertStockReplenishmentSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  setupAuth(app);\n\n  // Complete user profile\n  app.post('/api/auth/complete-profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const profileData = {\n        firstName: req.body.firstName,\n        lastName: req.body.lastName,\n        phone: req.body.phone,\n        company: req.body.company,\n        position: req.body.position,\n        address: req.body.address,\n        businessType: req.body.businessType,\n      };\n\n      // Mise à jour du profil utilisateur\n      const updatedUser = await storage.updateUserProfile(userId, profileData);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      res.status(500).json({ message: \"Failed to update user profile\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      // Automatically generate overdue invoice alerts when loading dashboard\n      // But only do it periodically to avoid constant regeneration\n      const now = new Date();\n      const lastCheck = (req.session as any)?.lastAlertCheck;\n      \n      // Only check alerts every 5 minutes to avoid constant regeneration\n      if (!lastCheck || (now.getTime() - lastCheck) > 5 * 60 * 1000) {\n        await storage.generateOverdueInvoiceAlerts(userId);\n        (req.session as any).lastAlertCheck = now.getTime();\n      }\n      \n      const stats = await storage.getDashboardStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Client routes\n  app.get(\"/api/clients\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const query = req.query.search as string;\n      \n      if (query) {\n        // Search clients by name, email, or company\n        const clients = await storage.searchClients(userId, query);\n        res.json(clients);\n      } else {\n        const clients = await storage.getClients(userId);\n        res.json(clients);\n      }\n    } catch (error) {\n      console.error(\"Error fetching clients:\", error);\n      res.status(500).json({ message: \"Failed to fetch clients\" });\n    }\n  });\n\n  app.get(\"/api/clients/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const client = await storage.getClient(id, userId);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error fetching client:\", error);\n      res.status(500).json({ message: \"Failed to fetch client\" });\n    }\n  });\n\n  app.post(\"/api/clients\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const clientData = insertClientSchema.parse({ ...req.body, userId });\n      const client = await storage.createClient(clientData);\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error creating client:\", error);\n      res.status(400).json({ message: \"Failed to create client\" });\n    }\n  });\n\n  app.put(\"/api/clients/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const clientData = insertClientSchema.partial().parse(req.body);\n      const client = await storage.updateClient(id, clientData, userId);\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error updating client:\", error);\n      res.status(400).json({ message: \"Failed to update client\" });\n    }\n  });\n\n  app.delete(\"/api/clients/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteClient(id, userId);\n      res.json({ message: \"Client deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting client:\", error);\n      res.status(500).json({ message: \"Failed to delete client\" });\n    }\n  });\n\n  // Product routes\n  app.get(\"/api/products\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const query = req.query.search as string;\n      \n      if (query) {\n        // Search products by name or description\n        const products = await storage.searchProducts(userId, query);\n        res.json(products);\n      } else {\n        const products = await storage.getProducts(userId);\n        res.json(products);\n      }\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const product = await storage.getProduct(id, userId);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const productData = insertProductSchema.parse({ ...req.body, userId });\n      const product = await storage.createProduct(productData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(400).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const productData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(id, productData, userId);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(400).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteProduct(id, userId);\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Stock replenishment routes\n  app.get(\"/api/stock-replenishments\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const replenishments = await storage.getStockReplenishments(userId);\n      res.json(replenishments);\n    } catch (error) {\n      console.error(\"Error fetching stock replenishments:\", error);\n      res.status(500).json({ message: \"Failed to fetch stock replenishments\" });\n    }\n  });\n\n  app.get(\"/api/products/:productId/replenishments\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const productId = parseInt(req.params.productId);\n      const replenishments = await storage.getStockReplenishmentsByProduct(productId, userId);\n      res.json(replenishments);\n    } catch (error) {\n      console.error(\"Error fetching product replenishments:\", error);\n      res.status(500).json({ message: \"Failed to fetch product replenishments\" });\n    }\n  });\n\n  app.post(\"/api/stock-replenishments\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const replenishmentData = insertStockReplenishmentSchema.parse({ ...req.body, userId });\n      const replenishment = await storage.createStockReplenishment(replenishmentData);\n      res.json(replenishment);\n    } catch (error) {\n      console.error(\"Error creating stock replenishment:\", error);\n      res.status(400).json({ message: \"Failed to create stock replenishment\" });\n    }\n  });\n\n  app.delete(\"/api/stock-replenishments/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteStockReplenishment(id);\n      res.json({ message: \"Stock replenishment deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting stock replenishment:\", error);\n      res.status(500).json({ message: \"Failed to delete stock replenishment\" });\n    }\n  });\n\n  // Category routes\n  app.get(\"/api/categories\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const categories = await storage.getCategories(userId);\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const categoryData = insertCategorySchema.parse({ ...req.body, userId });\n      const category = await storage.createCategory(categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(400).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  app.put(\"/api/categories/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const categoryData = insertCategorySchema.partial().parse(req.body);\n      const category = await storage.updateCategory(id, categoryData, userId);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error updating category:\", error);\n      res.status(400).json({ message: \"Failed to update category\" });\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteCategory(id, userId);\n      res.json({ message: \"Category deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting category:\", error);\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // Invoice routes\n  app.get(\"/api/invoices\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const invoices = await storage.getInvoices(userId);\n      res.json(invoices);\n    } catch (error) {\n      console.error(\"Error fetching invoices:\", error);\n      res.status(500).json({ message: \"Failed to fetch invoices\" });\n    }\n  });\n\n  app.get(\"/api/invoices/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const invoice = await storage.getInvoiceWithItems(id, userId);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.json(invoice);\n    } catch (error) {\n      console.error(\"Error fetching invoice:\", error);\n      res.status(500).json({ message: \"Failed to fetch invoice\" });\n    }\n  });\n\n  app.get(\"/api/invoices/:id/details\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const invoice = await storage.getInvoiceWithItems(id, userId);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.json(invoice);\n    } catch (error) {\n      console.error(\"Error fetching invoice details:\", error);\n      res.status(500).json({ message: \"Failed to fetch invoice details\" });\n    }\n  });\n\n  // Custom schema to properly handle dueDate nullability and validation\n  const createInvoiceSchema = z.object({\n    invoice: z.object({\n      number: z.string(),\n      clientId: z.number(),\n      status: z.string(),\n      totalHT: z.union([z.string(), z.number()]).transform(val => String(val)),\n      tvaRate: z.union([z.string(), z.number()]).transform(val => String(val)),\n      totalTVA: z.union([z.string(), z.number()]).transform(val => String(val)),\n      totalTTC: z.union([z.string(), z.number()]).transform(val => String(val)),\n      paymentMethod: z.string(),\n      dueDate: z.union([z.string(), z.null(), z.undefined()]).optional().nullable().transform(val => {\n        if (!val || val === null || val === undefined) return null;\n        return new Date(val);\n      }),\n      notes: z.string().optional(),\n    }),\n    items: z.array(insertInvoiceItemSchema.omit({ invoiceId: true })),\n  });\n\n  app.post(\"/api/invoices\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      console.log(\"Request body:\", JSON.stringify(req.body, null, 2));\n      \n      // Manual validation before Zod parsing\n      const invoiceData = req.body.invoice;\n      if ((invoiceData.status === \"en_attente\" || invoiceData.status === \"partiellement_reglee\") && \n          (!invoiceData.dueDate || invoiceData.dueDate === null || invoiceData.dueDate === \"\")) {\n        return res.status(400).json({ \n          message: \"La date d'échéance est obligatoire pour les factures en attente ou partiellement réglées\" \n        });\n      }\n      \n      const { invoice, items } = createInvoiceSchema.parse(req.body);\n      const finalInvoiceData = { ...invoice, userId };\n      const newInvoice = await storage.createInvoice(finalInvoiceData, items);\n      res.json(newInvoice);\n    } catch (error: any) {\n      console.error(\"Error creating invoice:\", error);\n      if (error.issues && error.issues.length > 0) {\n        const dueDateError = error.issues.find((issue: any) => issue.path.includes('dueDate'));\n        if (dueDateError) {\n          return res.status(400).json({ message: dueDateError.message });\n        }\n      }\n      res.status(400).json({ message: \"Failed to create invoice\" });\n    }\n  });\n\n  app.put(\"/api/invoices/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const invoiceData = insertInvoiceSchema.partial().parse(req.body);\n      const invoice = await storage.updateInvoice(id, invoiceData, userId);\n      res.json(invoice);\n    } catch (error) {\n      console.error(\"Error updating invoice:\", error);\n      res.status(400).json({ message: \"Failed to update invoice\" });\n    }\n  });\n\n  app.delete(\"/api/invoices/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteInvoice(id, userId);\n      res.json({ message: \"Invoice deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting invoice:\", error);\n      res.status(500).json({ message: \"Failed to delete invoice\" });\n    }\n  });\n\n  // Sales routes\n  app.get(\"/api/sales\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const sales = await storage.getSales(userId);\n      res.json(sales);\n    } catch (error) {\n      console.error(\"Error fetching sales:\", error);\n      res.status(500).json({ message: \"Failed to fetch sales\" });\n    }\n  });\n\n  // Data export routes\n  app.get(\"/api/export/clients\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const clients = await storage.getClients(userId);\n      \n      const csv = [\n        \"ID,Nom,Email,Téléphone,Entreprise,Adresse,Date de création\",\n        ...clients.map(client => \n          `${client.id},\"${client.name}\",\"${client.email || ''}\",\"${client.phone || ''}\",\"${client.company || ''}\",\"${client.address || ''}\",\"${client.createdAt?.toISOString() || ''}\"`\n        )\n      ].join('\\n');\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"clients.csv\"');\n      res.send(csv);\n    } catch (error) {\n      console.error(\"Error exporting clients:\", error);\n      res.status(500).json({ message: \"Failed to export clients\" });\n    }\n  });\n\n  app.get(\"/api/export/products\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const products = await storage.getProducts(userId);\n      \n      const csv = [\n        \"ID,Nom,Description,Prix HT,Stock,Date de création\",\n        ...products.map(product => \n          `${product.id},\"${product.name}\",\"${product.description || ''}\",\"${product.priceHT}\",\"${product.stock}\",\"${product.createdAt?.toISOString() || ''}\"`\n        )\n      ].join('\\n');\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"products.csv\"');\n      res.send(csv);\n    } catch (error) {\n      console.error(\"Error exporting products:\", error);\n      res.status(500).json({ message: \"Failed to export products\" });\n    }\n  });\n\n  app.get(\"/api/export/invoices\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const invoices = await storage.getInvoices(userId);\n      \n      const csv = [\n        \"ID,Numéro,Client ID,Statut,Total HT,Taux TVA,Total TVA,Total TTC,Échéance,Date de création\",\n        ...invoices.map(invoice => \n          `${invoice.id},\"${invoice.number}\",\"${invoice.clientId}\",\"${invoice.status}\",\"${invoice.totalHT}\",\"${invoice.tvaRate}\",\"${invoice.totalTVA}\",\"${invoice.totalTTC}\",\"${invoice.dueDate?.toISOString() || ''}\",\"${invoice.createdAt?.toISOString() || ''}\"`\n        )\n      ].join('\\n');\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"invoices.csv\"');\n      res.send(csv);\n    } catch (error) {\n      console.error(\"Error exporting invoices:\", error);\n      res.status(500).json({ message: \"Failed to export invoices\" });\n    }\n  });\n\n  // User settings routes\n  app.get(\"/api/user/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      res.json({\n        currency: user?.currency || \"XOF\",\n        language: user?.language || \"fr\",\n      });\n    } catch (error) {\n      console.error(\"Error fetching user settings:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des paramètres\" });\n    }\n  });\n\n  app.patch(\"/api/user/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { currency, language } = req.body;\n      const updatedUser = await storage.updateUserSettings(req.user.id, { currency, language });\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user settings:\", error);\n      res.status(500).json({ message: \"Erreur lors de la mise à jour des paramètres\" });\n    }\n  });\n\n  // License activation route (public but session-aware)\n  app.post(\"/api/activate\", async (req: any, res) => {\n    try {\n      const { key, clientName, deviceId } = req.body;\n\n      if (!key) {\n        return res.status(400).json({ message: \"Clé d'activation requise\" });\n      }\n\n      // Check if license exists\n      const license = await storage.getLicenseByKey(key);\n      if (!license) {\n        return res.status(404).json({ message: \"Clé d'activation invalide\" });\n      }\n\n      // Check if already activated\n      if (license.activated) {\n        return res.status(409).json({ message: \"Cette clé a déjà été activée\" });\n      }\n\n      // Check if revoked\n      if (license.revokedAt) {\n        return res.status(403).json({ message: \"Cette clé a été révoquée\" });\n      }\n\n      // Activate the license\n      const activatedLicense = await storage.activateLicense(key, clientName, deviceId);\n      \n      // If user is authenticated, mark their account as license activated immediately\n      if (req.user && req.user.id) {\n        await storage.setUserLicenseActivated(req.user.id, true);\n      } else {\n        // Store license activation in session for later association\n        if (req.session) {\n          req.session.activatedLicenseKey = key;\n        }\n      }\n      \n      res.json({\n        message: \"Licence activée avec succès\",\n        license: {\n          key: activatedLicense.key,\n          clientName: activatedLicense.clientName,\n          activatedAt: activatedLicense.activatedAt,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error activating license:\", error);\n      res.status(500).json({ message: \"Erreur lors de l'activation de la licence\" });\n    }\n  });\n\n  // Admin middleware to check for ADMIN_TOKEN\n  const isAdmin = (req: any, res: any, next: any) => {\n    const adminToken = req.headers[\"x-admin-token\"];\n    const expectedToken = process.env.ADMIN_TOKEN;\n\n    if (!expectedToken) {\n      console.error(\"ADMIN_TOKEN environment variable is not set\");\n      return res.status(500).json({ message: \"Configuration serveur manquante\" });\n    }\n\n    if (!adminToken || adminToken !== expectedToken) {\n      return res.status(403).json({ message: \"Accès admin refusé\" });\n    }\n\n    next();\n  };\n\n  // Admin routes for Fatimata\n  app.get(\"/api/admin/licenses\", isAdmin, async (req, res) => {\n    try {\n      const licenses = await storage.getAllLicenses();\n      res.json(licenses);\n    } catch (error) {\n      console.error(\"Error fetching licenses:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des licences\" });\n    }\n  });\n\n  app.post(\"/api/admin/licenses\", isAdmin, async (req, res) => {\n    try {\n      const licenseData = insertLicenseSchema.parse(req.body);\n      \n      // Check if key already exists\n      const existingLicense = await storage.getLicenseByKey(licenseData.key);\n      if (existingLicense) {\n        return res.status(409).json({ message: \"Cette clé existe déjà\" });\n      }\n\n      const newLicense = await storage.createLicense(licenseData);\n      res.status(201).json(newLicense);\n    } catch (error) {\n      console.error(\"Error creating license:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Données invalides\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Erreur lors de la création de la licence\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/admin/licenses/:key/revoke\", isAdmin, async (req, res) => {\n    try {\n      const { key } = req.params;\n      \n      const license = await storage.getLicenseByKey(key);\n      if (!license) {\n        return res.status(404).json({ message: \"Licence introuvable\" });\n      }\n\n      const revokedLicense = await storage.revokeLicense(key);\n      res.json(revokedLicense);\n    } catch (error) {\n      console.error(\"Error revoking license:\", error);\n      res.status(500).json({ message: \"Erreur lors de la révocation de la licence\" });\n    }\n  });\n\n  // ==========================================\n  // ACCOUNTING MODULE ROUTES\n  // ==========================================\n\n  // Expense Categories routes\n  app.get(\"/api/accounting/expense-categories\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const categories = await storage.getExpenseCategories(userId);\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching expense categories:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des catégories de dépenses\" });\n    }\n  });\n\n  app.post(\"/api/accounting/expense-categories\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const categoryData = insertExpenseCategorySchema.parse({ ...req.body, userId });\n      const category = await storage.createExpenseCategory(categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating expense category:\", error);\n      res.status(400).json({ message: \"Erreur lors de la création de la catégorie de dépense\" });\n    }\n  });\n\n  app.put(\"/api/accounting/expense-categories/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const categoryData = insertExpenseCategorySchema.partial().parse(req.body);\n      const category = await storage.updateExpenseCategory(id, categoryData, userId);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error updating expense category:\", error);\n      res.status(400).json({ message: \"Erreur lors de la mise à jour de la catégorie de dépense\" });\n    }\n  });\n\n  app.delete(\"/api/accounting/expense-categories/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteExpenseCategory(id, userId);\n      res.json({ message: \"Catégorie de dépense supprimée avec succès\" });\n    } catch (error) {\n      console.error(\"Error deleting expense category:\", error);\n      res.status(500).json({ message: \"Erreur lors de la suppression de la catégorie de dépense\" });\n    }\n  });\n\n  // Expenses routes\n  app.get(\"/api/accounting/expenses\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { startDate, endDate } = req.query;\n      \n      let expenses;\n      if (startDate && endDate) {\n        expenses = await storage.getExpensesByPeriod(userId, new Date(startDate as string), new Date(endDate as string));\n      } else {\n        expenses = await storage.getExpenses(userId);\n      }\n      \n      res.json(expenses);\n    } catch (error) {\n      console.error(\"Error fetching expenses:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des dépenses\" });\n    }\n  });\n\n  app.get(\"/api/accounting/expenses/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const expense = await storage.getExpense(id, userId);\n      if (!expense) {\n        return res.status(404).json({ message: \"Dépense introuvable\" });\n      }\n      res.json(expense);\n    } catch (error) {\n      console.error(\"Error fetching expense:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération de la dépense\" });\n    }\n  });\n\n  app.post(\"/api/accounting/expenses\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      // Générer une référence unique\n      const reference = `EXP-${Date.now()}-${Math.random().toString(36).substr(2, 5).toUpperCase()}`;\n      \n      // Convertir la date string en objet Date\n      const expenseData = insertExpenseSchema.parse({ \n        ...req.body, \n        userId,\n        reference,\n        expenseDate: req.body.expenseDate ? new Date(req.body.expenseDate) : new Date()\n      });\n      \n      const expense = await storage.createExpense(expenseData);\n      res.json(expense);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n      res.status(400).json({ message: \"Erreur lors de la création de la dépense\" });\n    }\n  });\n\n  app.put(\"/api/accounting/expenses/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const expenseData = insertExpenseSchema.partial().parse(req.body);\n      const expense = await storage.updateExpense(id, expenseData, userId);\n      res.json(expense);\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n      res.status(400).json({ message: \"Erreur lors de la mise à jour de la dépense\" });\n    }\n  });\n\n  app.patch(\"/api/accounting/expenses/:id/approve\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const approvedBy = req.user.id;\n      const id = parseInt(req.params.id);\n      const expense = await storage.approveExpense(id, approvedBy, userId);\n      res.json(expense);\n    } catch (error) {\n      console.error(\"Error approving expense:\", error);\n      res.status(400).json({ message: \"Erreur lors de l'approbation de la dépense\" });\n    }\n  });\n\n  app.patch(\"/api/accounting/expenses/:id/reject\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const expense = await storage.rejectExpense(id, userId);\n      res.json(expense);\n    } catch (error) {\n      console.error(\"Error rejecting expense:\", error);\n      res.status(400).json({ message: \"Erreur lors du rejet de la dépense\" });\n    }\n  });\n\n  app.delete(\"/api/accounting/expenses/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteExpense(id, userId);\n      res.json({ message: \"Dépense supprimée avec succès\" });\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n      res.status(500).json({ message: \"Erreur lors de la suppression de la dépense\" });\n    }\n  });\n\n  // Imprest Funds routes\n  app.get(\"/api/accounting/imprest-funds\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const funds = await storage.getImprestFunds(userId);\n      res.json(funds);\n    } catch (error) {\n      console.error(\"Error fetching imprest funds:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des fonds d'avance\" });\n    }\n  });\n\n  app.get(\"/api/accounting/imprest-funds/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const fund = await storage.getImprestFund(id, userId);\n      if (!fund) {\n        return res.status(404).json({ message: \"Fonds d'avance introuvable\" });\n      }\n      res.json(fund);\n    } catch (error) {\n      console.error(\"Error fetching imprest fund:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération du fonds d'avance\" });\n    }\n  });\n\n  app.post(\"/api/accounting/imprest-funds\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      // Générer une référence unique\n      const reference = `FA-${Date.now()}-${Math.random().toString(36).substr(2, 5).toUpperCase()}`;\n      \n      // Préparer les données avec les champs requis\n      const fundData = insertImprestFundSchema.parse({ \n        ...req.body, \n        userId,\n        reference,\n        currentBalance: req.body.initialAmount || '0' // currentBalance = initialAmount au début\n      });\n      \n      const fund = await storage.createImprestFund(fundData);\n      res.json(fund);\n    } catch (error) {\n      console.error(\"Error creating imprest fund:\", error);\n      res.status(400).json({ message: \"Erreur lors de la création du fonds d'avance\" });\n    }\n  });\n\n  app.put(\"/api/accounting/imprest-funds/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const fundData = insertImprestFundSchema.partial().parse(req.body);\n      const fund = await storage.updateImprestFund(id, fundData, userId);\n      res.json(fund);\n    } catch (error) {\n      console.error(\"Error updating imprest fund:\", error);\n      res.status(400).json({ message: \"Erreur lors de la mise à jour du fonds d'avance\" });\n    }\n  });\n\n  app.delete(\"/api/accounting/imprest-funds/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteImprestFund(id, userId);\n      res.json({ message: \"Fonds d'avance supprimé avec succès\" });\n    } catch (error) {\n      console.error(\"Error deleting imprest fund:\", error);\n      res.status(500).json({ message: \"Erreur lors de la suppression du fonds d'avance\" });\n    }\n  });\n\n  // Imprest Transactions routes\n  app.get(\"/api/accounting/imprest-funds/:imprestId/transactions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const imprestId = parseInt(req.params.imprestId);\n      const transactions = await storage.getImprestTransactions(imprestId, userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching imprest transactions:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des transactions d'avance\" });\n    }\n  });\n\n  app.post(\"/api/accounting/imprest-transactions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const transactionData = insertImprestTransactionSchema.parse({ ...req.body, userId });\n      const transaction = await storage.createImprestTransaction(transactionData);\n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error creating imprest transaction:\", error);\n      res.status(400).json({ message: (error as Error).message || \"Erreur lors de la création de la transaction d'avance\" });\n    }\n  });\n\n  // Accounting Reports routes\n  app.get(\"/api/accounting/reports\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const reports = await storage.getAccountingReports(userId);\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Error fetching accounting reports:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des rapports comptables\" });\n    }\n  });\n\n  app.post(\"/api/accounting/reports\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      // Convertir les dates string en objets Date\n      const reportData = insertAccountingReportSchema.parse({ \n        ...req.body, \n        userId,\n        generatedBy: userId,\n        periodStart: req.body.periodStart ? new Date(req.body.periodStart) : new Date(),\n        periodEnd: req.body.periodEnd ? new Date(req.body.periodEnd) : new Date()\n      });\n      \n      const report = await storage.createAccountingReport(reportData);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error creating accounting report:\", error);\n      res.status(400).json({ message: \"Erreur lors de la création du rapport comptable\" });\n    }\n  });\n\n  app.delete(\"/api/accounting/reports/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteAccountingReport(id, userId);\n      res.json({ message: \"Rapport comptable supprimé avec succès\" });\n    } catch (error) {\n      console.error(\"Error deleting accounting report:\", error);\n      res.status(500).json({ message: \"Erreur lors de la suppression du rapport comptable\" });\n    }\n  });\n\n  // Accounting Statistics route\n  app.get(\"/api/accounting/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { startDate, endDate } = req.query;\n      \n      let stats;\n      if (startDate && endDate) {\n        stats = await storage.getAccountingStatsByPeriod(userId, new Date(startDate as string), new Date(endDate as string));\n      } else {\n        stats = await storage.getAccountingStats(userId);\n      }\n      \n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching accounting stats:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des statistiques comptables\" });\n    }\n  });\n\n  // ==========================================\n  // CASH BOOK ROUTES\n  // ==========================================\n  \n  app.get(\"/api/accounting/cash-book\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const entries = await storage.getCashBookEntries(userId);\n      res.json(entries);\n    } catch (error) {\n      console.error(\"Error fetching cash book entries:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des entrées du livre de caisse\" });\n    }\n  });\n\n  app.get(\"/api/accounting/cash-book/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const entry = await storage.getCashBookEntry(id, userId);\n      if (!entry) {\n        return res.status(404).json({ message: \"Entrée de caisse introuvable\" });\n      }\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error fetching cash book entry:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération de l'entrée de caisse\" });\n    }\n  });\n\n  app.post(\"/api/accounting/cash-book\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const entryData = insertCashBookEntrySchema.parse({ ...req.body, userId });\n      const entry = await storage.createCashBookEntry(entryData);\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error creating cash book entry:\", error);\n      res.status(400).json({ message: \"Erreur lors de la création de l'entrée de caisse\" });\n    }\n  });\n\n  app.put(\"/api/accounting/cash-book/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const entryData = insertCashBookEntrySchema.partial().parse(req.body);\n      const entry = await storage.updateCashBookEntry(id, entryData, userId);\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error updating cash book entry:\", error);\n      res.status(400).json({ message: \"Erreur lors de la mise à jour de l'entrée de caisse\" });\n    }\n  });\n\n  app.patch(\"/api/accounting/cash-book/:id/reconcile\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const entry = await storage.reconcileCashBookEntry(id, userId);\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error reconciling cash book entry:\", error);\n      res.status(400).json({ message: \"Erreur lors de la réconciliation de l'entrée de caisse\" });\n    }\n  });\n\n  app.delete(\"/api/accounting/cash-book/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteCashBookEntry(id, userId);\n      res.json({ message: \"Entrée de caisse supprimée avec succès\" });\n    } catch (error) {\n      console.error(\"Error deleting cash book entry:\", error);\n      res.status(500).json({ message: \"Erreur lors de la suppression de l'entrée de caisse\" });\n    }\n  });\n\n  // ==========================================\n  // PETTY CASH ROUTES\n  // ==========================================\n  \n  app.get(\"/api/accounting/petty-cash\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const entries = await storage.getPettyCashEntries(userId);\n      res.json(entries);\n    } catch (error) {\n      console.error(\"Error fetching petty cash entries:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des entrées de petite caisse\" });\n    }\n  });\n\n  app.get(\"/api/accounting/petty-cash/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const entry = await storage.getPettyCashEntry(id, userId);\n      if (!entry) {\n        return res.status(404).json({ message: \"Entrée de petite caisse introuvable\" });\n      }\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error fetching petty cash entry:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération de l'entrée de petite caisse\" });\n    }\n  });\n\n  app.post(\"/api/accounting/petty-cash\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const entryData = insertPettyCashEntrySchema.parse({ ...req.body, userId });\n      const entry = await storage.createPettyCashEntry(entryData);\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error creating petty cash entry:\", error);\n      res.status(400).json({ message: \"Erreur lors de la création de l'entrée de petite caisse\" });\n    }\n  });\n\n  app.put(\"/api/accounting/petty-cash/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const entryData = insertPettyCashEntrySchema.partial().parse(req.body);\n      const entry = await storage.updatePettyCashEntry(id, entryData, userId);\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error updating petty cash entry:\", error);\n      res.status(400).json({ message: \"Erreur lors de la mise à jour de l'entrée de petite caisse\" });\n    }\n  });\n\n  app.patch(\"/api/accounting/petty-cash/:id/approve\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const approvedBy = req.user.id;\n      const id = parseInt(req.params.id);\n      const entry = await storage.approvePettyCashEntry(id, approvedBy, userId);\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error approving petty cash entry:\", error);\n      res.status(400).json({ message: \"Erreur lors de l'approbation de l'entrée de petite caisse\" });\n    }\n  });\n\n  app.patch(\"/api/accounting/petty-cash/:id/reject\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const entry = await storage.rejectPettyCashEntry(id, userId);\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error rejecting petty cash entry:\", error);\n      res.status(400).json({ message: \"Erreur lors du rejet de l'entrée de petite caisse\" });\n    }\n  });\n\n  app.delete(\"/api/accounting/petty-cash/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deletePettyCashEntry(id, userId);\n      res.json({ message: \"Entrée de petite caisse supprimée avec succès\" });\n    } catch (error) {\n      console.error(\"Error deleting petty cash entry:\", error);\n      res.status(500).json({ message: \"Erreur lors de la suppression de l'entrée de petite caisse\" });\n    }\n  });\n\n  // ==========================================\n  // TRANSACTION JOURNAL ROUTES\n  // ==========================================\n  \n  app.get(\"/api/accounting/transaction-journal\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const filters = {\n        startDate: req.query.startDate as string,\n        endDate: req.query.endDate as string,\n        sourceModule: req.query.sourceModule as string,\n      };\n      const entries = await storage.getTransactionJournal(userId, filters);\n      res.json(entries);\n    } catch (error) {\n      console.error(\"Error fetching transaction journal:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération du journal des transactions\" });\n    }\n  });\n\n  app.get(\"/api/accounting/transaction-journal/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const entry = await storage.getTransactionJournalEntry(id, userId);\n      if (!entry) {\n        return res.status(404).json({ message: \"Entrée de journal introuvable\" });\n      }\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error fetching transaction journal entry:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération de l'entrée de journal\" });\n    }\n  });\n\n  app.post(\"/api/accounting/transaction-journal\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const entryData = insertTransactionJournalSchema.parse({ \n        ...req.body, \n        userId,\n        createdBy: userId \n      });\n      const entry = await storage.addToTransactionJournal(entryData);\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error creating transaction journal entry:\", error);\n      res.status(400).json({ message: \"Erreur lors de la création de l'entrée de journal\" });\n    }\n  });\n\n  // ==========================================\n  // FINANCIAL DASHBOARD ROUTES\n  // ==========================================\n  \n  app.get(\"/api/accounting/financial-dashboard\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const data = await storage.getFinancialDashboardData(userId);\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error fetching financial dashboard data:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des données du tableau de bord financier\" });\n    }\n  });\n\n  // ==========================================\n  // REVENUE ROUTES\n  // ==========================================\n  \n  // Revenue Categories routes\n  app.get(\"/api/accounting/revenue-categories\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const categories = await storage.getRevenueCategories(userId);\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching revenue categories:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des catégories de revenus\" });\n    }\n  });\n\n  app.post(\"/api/accounting/revenue-categories\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const categoryData = insertRevenueCategorySchema.parse({ ...req.body, userId });\n      const category = await storage.createRevenueCategory(categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating revenue category:\", error);\n      res.status(400).json({ message: \"Erreur lors de la création de la catégorie de revenus\" });\n    }\n  });\n\n  app.put(\"/api/accounting/revenue-categories/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const categoryData = insertRevenueCategorySchema.partial().parse(req.body);\n      const category = await storage.updateRevenueCategory(id, categoryData, userId);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error updating revenue category:\", error);\n      res.status(400).json({ message: \"Erreur lors de la mise à jour de la catégorie de revenus\" });\n    }\n  });\n\n  app.delete(\"/api/accounting/revenue-categories/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteRevenueCategory(id, userId);\n      res.json({ message: \"Catégorie de revenus supprimée avec succès\" });\n    } catch (error) {\n      console.error(\"Error deleting revenue category:\", error);\n      res.status(500).json({ message: \"Erreur lors de la suppression de la catégorie de revenus\" });\n    }\n  });\n\n  // Revenues routes\n  app.get(\"/api/accounting/revenues\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { startDate, endDate } = req.query;\n      \n      let revenues;\n      if (startDate && endDate) {\n        revenues = await storage.getRevenuesByPeriod(userId, new Date(startDate as string), new Date(endDate as string));\n      } else {\n        revenues = await storage.getRevenues(userId);\n      }\n      \n      res.json(revenues);\n    } catch (error) {\n      console.error(\"Error fetching revenues:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des revenus\" });\n    }\n  });\n\n  app.post(\"/api/accounting/revenues\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      // Générer une référence unique\n      const reference = `REV-${Date.now()}-${Math.random().toString(36).substr(2, 5).toUpperCase()}`;\n      \n      // Convertir la date string en objet Date\n      const revenueData = insertRevenueSchema.parse({ \n        ...req.body, \n        userId,\n        reference,\n        revenueDate: req.body.revenueDate ? new Date(req.body.revenueDate) : new Date()\n      });\n      \n      const revenue = await storage.createRevenue(revenueData);\n      res.json(revenue);\n    } catch (error) {\n      console.error(\"Error creating revenue:\", error);\n      res.status(400).json({ message: \"Erreur lors de la création du revenu\" });\n    }\n  });\n\n  app.put(\"/api/accounting/revenues/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const revenueData = insertRevenueSchema.partial().parse(req.body);\n      const revenue = await storage.updateRevenue(id, revenueData, userId);\n      res.json(revenue);\n    } catch (error) {\n      console.error(\"Error updating revenue:\", error);\n      res.status(400).json({ message: \"Erreur lors de la mise à jour du revenu\" });\n    }\n  });\n\n  app.delete(\"/api/accounting/revenues/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteRevenue(id, userId);\n      res.json({ message: \"Revenu supprimé avec succès\" });\n    } catch (error) {\n      console.error(\"Error deleting revenue:\", error);\n      res.status(500).json({ message: \"Erreur lors de la suppression du revenu\" });\n    }\n  });\n\n  // ==========================================\n  // BUSINESS ALERTS ROUTES\n  // ==========================================\n  \n  app.get(\"/api/alerts\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const unreadOnly = req.query.unreadOnly === 'true';\n      \n      const alerts = await storage.getBusinessAlerts(userId, unreadOnly);\n      res.json(alerts);\n    } catch (error) {\n      console.error(\"Error fetching alerts:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des alertes\" });\n    }\n  });\n\n  app.post(\"/api/alerts\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const alertData = insertBusinessAlertSchema.parse({ ...req.body, userId });\n      const alert = await storage.createBusinessAlert(alertData);\n      res.json(alert);\n    } catch (error) {\n      console.error(\"Error creating alert:\", error);\n      res.status(400).json({ message: \"Erreur lors de la création de l'alerte\" });\n    }\n  });\n\n  app.patch(\"/api/alerts/:id/read\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.markAlertAsRead(id, userId);\n      res.json({ message: \"Alerte marquée comme lue\" });\n    } catch (error) {\n      console.error(\"Error marking alert as read:\", error);\n      res.status(400).json({ message: \"Erreur lors de la modification de l'alerte\" });\n    }\n  });\n\n  app.patch(\"/api/alerts/mark-all-read\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const count = await storage.markAllAlertsAsRead(userId);\n      res.json({ \n        message: `${count} alerte(s) marquée(s) comme lues`,\n        count \n      });\n    } catch (error) {\n      console.error(\"Error marking all alerts as read:\", error);\n      res.status(500).json({ message: \"Erreur lors de la modification des alertes\" });\n    }\n  });\n\n  app.patch(\"/api/alerts/:id/resolve\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.markAlertAsResolved(id, userId);\n      res.json({ message: \"Alerte résolue\" });\n    } catch (error) {\n      console.error(\"Error resolving alert:\", error);\n      res.status(400).json({ message: \"Erreur lors de la résolution de l'alerte\" });\n    }\n  });\n\n  app.delete(\"/api/alerts/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteBusinessAlert(id, userId);\n      res.json({ message: \"Alerte supprimée\" });\n    } catch (error) {\n      console.error(\"Error deleting alert:\", error);\n      res.status(500).json({ message: \"Erreur lors de la suppression de l'alerte\" });\n    }\n  });\n\n  app.post(\"/api/alerts/generate/stock\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const alerts = await storage.generateStockAlerts(userId);\n      res.json({ \n        message: `${alerts.length} alerte(s) de stock générée(s)`,\n        alerts \n      });\n    } catch (error) {\n      console.error(\"Error generating stock alerts:\", error);\n      res.status(500).json({ message: \"Erreur lors de la génération des alertes de stock\" });\n    }\n  });\n\n  app.post(\"/api/alerts/generate/overdue\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const alerts = await storage.generateOverdueInvoiceAlerts(userId);\n      res.json({ \n        message: `${alerts.length} alerte(s) de factures échues générée(s)`,\n        alerts \n      });\n    } catch (error) {\n      console.error(\"Error generating overdue alerts:\", error);\n      res.status(500).json({ message: \"Erreur lors de la génération des alertes de factures échues\" });\n    }\n  });\n\n  app.delete(\"/api/alerts/cleanup\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const olderThanDays = parseInt(req.query.days as string) || 30;\n      await storage.cleanupResolvedAlerts(userId, olderThanDays);\n      res.json({ message: \"Alertes nettoyées avec succès\" });\n    } catch (error) {\n      console.error(\"Error cleaning up alerts:\", error);\n      res.status(500).json({ message: \"Erreur lors du nettoyage des alertes\" });\n    }\n  });\n\n\n\n\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":54870},"server/simpleAuth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport rateLimit from \"express-rate-limit\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport type { User as UserType } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends UserType {}\n    interface Request {\n      session: session.Session & Partial<session.SessionData>;\n    }\n  }\n}\n\ndeclare module 'express-session' {\n  interface SessionData {\n    activatedLicenseKey?: string;\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\n// Hash factice pour éviter les timing attacks lors de l'énumération d'utilisateurs\n// Généré avec scrypt(keylen=64) pour avoir la bonne longueur (128 hex chars)\nconst DUMMY_HASH = \"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef.0123456789abcdef0123456789abcdef0123456789abcdef\";\n\nexport function setupAuth(app: Express) {\n  // Configuration de la limitation de taux pour les tentatives de connexion\n  const loginLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 5, // 5 tentatives par IP par fenêtre de 15 minutes\n    message: {\n      message: \"Trop de tentatives de connexion depuis cette adresse IP. Réessayez dans 15 minutes.\"\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n    handler: (req, res) => {\n      res.status(429).json({\n        message: \"Trop de tentatives de connexion depuis cette adresse IP. Réessayez dans 15 minutes.\"\n      });\n    }\n  });\n\n  // Simple session configuration using memory store\n  if (!process.env.SESSION_SECRET) {\n    throw new Error(\"SESSION_SECRET environment variable is required\");\n  }\n  \n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production', // Sécurisé en production seulement\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 1 week\n    },\n  };\n\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Local strategy\n  passport.use(\n    new LocalStrategy(\n      {\n        usernameField: \"email\",\n        passwordField: \"password\",\n      },\n      async (email, password, done) => {\n        try {\n          // Vérifier l'utilisateur et l'état de verrouillage en une seule requête\n          const { user, isLocked } = await storage.checkUserForLogin(email);\n          \n          if (isLocked) {\n            // Effectuer une comparaison factice pour éviter les timing attacks\n            await comparePasswords(password, DUMMY_HASH);\n            return done(null, false, { \n              message: \"Email ou mot de passe incorrect\" // Message générique pour éviter l'énumération\n            });\n          }\n\n          // Incrémenter les tentatives pour TOUS les emails, existants ou non (évite l'énumération)\n          let shouldLock = false;\n          let attemptsCount = 0;\n\n          if (!user || !user.password) {\n            // Incrémenter les tentatives pour TOUS les emails (évite l'énumération)\n            await storage.incrementLoginAttempts(email);\n            // Effectuer une comparaison factice pour éviter les timing attacks\n            await comparePasswords(password, DUMMY_HASH);\n            return done(null, false, { message: \"Email ou mot de passe incorrect\" });\n          }\n          \n          const isValid = await comparePasswords(password, user.password);\n          if (!isValid) {\n            // Incrémenter les tentatives d'échec\n            await storage.incrementLoginAttempts(email);\n            \n            // Vérifier si on doit verrouiller le compte (3 tentatives)\n            attemptsCount = (user.loginAttempts || 0) + 1;\n            if (attemptsCount >= 3) {\n              await storage.lockAccount(email, 30); // Verrouiller pendant 30 minutes\n              shouldLock = true;\n            }\n            \n            // Message générique pour éviter la fuite d'informations\n            return done(null, false, { \n              message: \"Email ou mot de passe incorrect\" \n            });\n          }\n          \n          // Connexion réussie : réinitialiser les tentatives\n          await storage.resetLoginAttempts(email);\n          return done(null, user);\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user: any, done) => done(null, user.id));\n  \n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Registration route\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { email, password, firstName, lastName } = req.body;\n      \n      if (!email || !password || !firstName || !lastName) {\n        return res.status(400).json({ \n          message: \"Email, mot de passe, prénom et nom sont requis\" \n        });\n      }\n\n      if (password.length < 6) {\n        return res.status(400).json({ \n          message: \"Le mot de passe doit contenir au moins 6 caractères\" \n        });\n      }\n\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ \n          message: \"Un compte avec cet email existe déjà\" \n        });\n      }\n\n      const hashedPassword = await hashPassword(password);\n      const userId = randomBytes(16).toString(\"hex\");\n\n      const newUser = await storage.createLocalUser({\n        id: userId,\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n      });\n\n      req.login(newUser, async (err) => {\n        if (err) return next(err);\n        \n        try {\n          // Check if there's a pending license activation in session\n          if (req.session && req.session.activatedLicenseKey) {\n            await storage.setUserLicenseActivated(newUser.id, true);\n            // Clear the license from session\n            delete req.session.activatedLicenseKey;\n          }\n        } catch (error) {\n          console.error(\"Error associating license with new user:\", error);\n          // Continue registration even if license association fails\n        }\n        \n        res.status(201).json({\n          id: newUser.id,\n          email: newUser.email,\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n        });\n      });\n    } catch (error) {\n      console.error(\"Erreur lors de l'inscription:\", error);\n      res.status(500).json({ message: \"Erreur serveur lors de l'inscription\" });\n    }\n  });\n\n  // Login route avec limitation de taux\n  app.post(\"/api/login\", loginLimiter, (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Erreur serveur\" });\n      }\n      if (!user) {\n        return res.status(401).json({ \n          message: info?.message || \"Email ou mot de passe incorrect\" \n        });\n      }\n      \n      req.login(user, async (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Erreur de connexion\" });\n        }\n        \n        try {\n          // Check if there's a pending license activation in session\n          if (req.session && req.session.activatedLicenseKey && !user.licenseActivated) {\n            await storage.setUserLicenseActivated(user.id, true);\n            // Clear the license from session\n            delete req.session.activatedLicenseKey;\n          }\n        } catch (error) {\n          console.error(\"Error associating license with user:\", error);\n          // Continue login even if license association fails\n        }\n        \n        res.json({\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n        });\n      });\n    })(req, res, next);\n  });\n\n  // Logout route\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.json({ message: \"Déconnexion réussie\" });\n    });\n  });\n\n  // Get current user route\n  app.get(\"/api/user\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user) {\n      return res.status(401).json({ message: \"Non authentifié\" });\n    }\n    \n    try {\n      // Always fetch fresh user data from database to get current license status\n      const user = await storage.getUser(req.user.id);\n      if (!user) {\n        return res.status(401).json({ message: \"Utilisateur non trouvé\" });\n      }\n      \n      res.json({\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        phone: user.phone,\n        company: user.company,\n        position: user.position,\n        address: user.address,\n        businessType: user.businessType,\n        profileImageUrl: user.profileImageUrl,\n        licenseActivated: user.licenseActivated, // Include license status\n        currency: user.currency,\n        language: user.language,\n      });\n    } catch (error) {\n      console.error(\"Error fetching user data:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des données utilisateur\" });\n    }\n  });\n\n}\n\nexport function isAuthenticated(req: any, res: any, next: any) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Authentification requise\" });\n}","size_bytes":10254},"server/storage.ts":{"content":"import {\n  users,\n  clients,\n  products,\n  categories,\n  invoices,\n  invoiceItems,\n  sales,\n  stockReplenishments,\n  licenses,\n  expenseCategories,\n  expenses,\n  imprestFunds,\n  imprestTransactions,\n  accountingReports,\n  cashBookEntries,\n  pettyCashEntries,\n  transactionJournal,\n  revenueCategories,\n  revenues,\n\n  type User,\n  type NewUser,\n  type Client,\n  type Product,\n  type Category,\n  type Invoice,\n  type InvoiceItem,\n  type Sale,\n  type StockReplenishment,\n  type License,\n  type ExpenseCategory,\n  type Expense,\n  type ImprestFund,\n  type ImprestTransaction,\n  type AccountingReport,\n  type CashBookEntry,\n  type PettyCashEntry,\n  type TransactionJournal,\n  type RevenueCategory,\n  type Revenue,\n\n  type NewClient,\n  type NewProduct,\n  type NewCategory,\n  type NewInvoice,\n  type NewInvoiceItem,\n  type NewSale,\n  type NewStockReplenishment,\n  type NewLicense,\n  type NewExpenseCategory,\n  type NewExpense,\n  type NewImprestFund,\n  type NewImprestTransaction,\n  type NewAccountingReport,\n  type NewCashBookEntry,\n  type NewPettyCashEntry,\n  type NewTransactionJournal,\n  type NewRevenueCategory,\n  type NewRevenue,\n\n  chartOfAccounts,\n  businessAlerts,\n  type ChartOfAccount,\n  type NewBusinessAlert,\n  type BusinessAlert,\n\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sum, count, sql, like, or, gte, lte, isNotNull, ne } from \"drizzle-orm\";\nimport { randomBytes, scrypt, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createLocalUser(user: NewUser): Promise<User>;\n  upsertUser(user: NewUser): Promise<User>;\n  updateUserProfile(id: string, profileData: Partial<User>): Promise<User>;\n  updateUserSettings(id: string, settings: { currency?: string; language?: string }): Promise<User>;\n  setUserLicenseActivated(id: string, activated: boolean): Promise<User>;\n  \n  // Méthodes pour la gestion des tentatives de connexion et verrouillage\n  incrementLoginAttempts(email: string): Promise<void>;\n  resetLoginAttempts(email: string): Promise<void>;\n  lockAccount(email: string, lockDuration: number): Promise<void>;\n  isAccountLocked(email: string): Promise<boolean>;\n  checkUserForLogin(email: string): Promise<{ user: User | undefined; isLocked: boolean }>;\n\n  \n  // Client operations\n  getClients(userId: string): Promise<Client[]>;\n  getClient(id: number, userId: string): Promise<Client | undefined>;\n  createClient(client: NewClient): Promise<Client>;\n  updateClient(id: number, client: Partial<NewClient>, userId: string): Promise<Client>;\n  deleteClient(id: number, userId: string): Promise<void>;\n  searchClients(userId: string, query: string): Promise<Client[]>;\n  \n  // Product operations\n  getProducts(userId: string): Promise<Product[]>;\n  getProduct(id: number, userId: string): Promise<Product | undefined>;\n  createProduct(product: NewProduct): Promise<Product>;\n  updateProduct(id: number, product: Partial<NewProduct>, userId: string): Promise<Product>;\n  deleteProduct(id: number, userId: string): Promise<void>;\n  searchProducts(userId: string, query: string): Promise<Product[]>;\n  \n  // Stock replenishment operations\n  getStockReplenishments(userId: string): Promise<StockReplenishment[]>;\n  getStockReplenishmentsByProduct(productId: number, userId: string): Promise<StockReplenishment[]>;\n  createStockReplenishment(replenishment: NewStockReplenishment): Promise<StockReplenishment>;\n  deleteStockReplenishment(id: number): Promise<void>;\n  \n  // Category operations\n  getCategories(userId: string): Promise<Category[]>;\n  getCategory(id: number, userId: string): Promise<Category | undefined>;\n  createCategory(category: NewCategory): Promise<Category>;\n  updateCategory(id: number, category: Partial<NewCategory>, userId: string): Promise<Category>;\n  deleteCategory(id: number, userId: string): Promise<void>;\n  \n  // Invoice operations\n  getInvoices(userId: string): Promise<Invoice[]>;\n  getInvoice(id: number, userId: string): Promise<Invoice | undefined>;\n  getInvoiceWithItems(id: number, userId: string): Promise<(Invoice & { items: InvoiceItem[]; client: Client }) | undefined>;\n  createInvoice(invoice: NewInvoice, items: Omit<NewInvoiceItem, 'invoiceId'>[]): Promise<Invoice>;\n  updateInvoice(id: number, invoice: Partial<NewInvoice>, userId: string): Promise<Invoice>;\n  deleteInvoice(id: number, userId: string): Promise<void>;\n  \n  // Sales operations\n  getSales(userId: string): Promise<Sale[]>;\n  createSale(sale: NewSale): Promise<Sale>;\n  \n  // Dashboard statistics\n  getDashboardStats(userId: string): Promise<{\n    revenue: number;\n    invoiceCount: number;\n    clientCount: number;\n    productCount: number;\n    recentInvoices: (Invoice & { client: Client })[];\n    topProducts: (Product & { salesCount: number })[];\n    lowStockProducts: Product[];\n  }>;\n\n  // License operations\n  getLicenseByKey(key: string): Promise<License | undefined>;\n  getAllLicenses(): Promise<License[]>;\n  createLicense(license: NewLicense): Promise<License>;\n  activateLicense(key: string, clientName?: string, deviceId?: string): Promise<License>;\n  revokeLicense(key: string): Promise<License>;\n\n  // Accounting operations\n  \n  // Expense Categories\n  getExpenseCategories(userId: string): Promise<ExpenseCategory[]>;\n  getExpenseCategory(id: number, userId: string): Promise<ExpenseCategory | undefined>;\n  createExpenseCategory(category: NewExpenseCategory): Promise<ExpenseCategory>;\n  updateExpenseCategory(id: number, category: Partial<NewExpenseCategory>, userId: string): Promise<ExpenseCategory>;\n  deleteExpenseCategory(id: number, userId: string): Promise<void>;\n\n  // Expenses\n  getExpenses(userId: string): Promise<(Expense & { category: ExpenseCategory })[]>;\n  getExpensesByPeriod(userId: string, startDate: Date, endDate: Date): Promise<(Expense & { category: ExpenseCategory })[]>;\n  getExpense(id: number, userId: string): Promise<(Expense & { category: ExpenseCategory }) | undefined>;\n  createExpense(expense: NewExpense): Promise<Expense>;\n  updateExpense(id: number, expense: Partial<NewExpense>, userId: string): Promise<Expense>;\n  deleteExpense(id: number, userId: string): Promise<void>;\n  approveExpense(id: number, approvedBy: string, userId: string): Promise<Expense>;\n  rejectExpense(id: number, userId: string): Promise<Expense>;\n\n  // Imprest Funds\n  getImprestFunds(userId: string): Promise<ImprestFund[]>;\n  getImprestFund(id: number, userId: string): Promise<ImprestFund | undefined>;\n  createImprestFund(fund: NewImprestFund): Promise<ImprestFund>;\n  updateImprestFund(id: number, fund: Partial<NewImprestFund>, userId: string): Promise<ImprestFund>;\n  deleteImprestFund(id: number, userId: string): Promise<void>;\n\n  // Imprest Transactions\n  getImprestTransactions(imprestId: number, userId: string): Promise<ImprestTransaction[]>;\n  createImprestTransaction(transaction: NewImprestTransaction): Promise<ImprestTransaction>;\n  \n  // Accounting Reports\n  getAccountingReports(userId: string): Promise<AccountingReport[]>;\n  createAccountingReport(report: NewAccountingReport): Promise<AccountingReport>;\n  deleteAccountingReport(id: number, userId: string): Promise<void>;\n\n  // Accounting Statistics\n  getAccountingStats(userId: string): Promise<{\n    totalExpenses: number;\n    pendingExpenses: number;\n    approvedExpenses: number;\n    totalImprestFunds: number;\n    activeImprestFunds: number;\n    totalRevenues: number;\n    monthlyRevenues: number;\n    recentRevenues: number;\n    netResult: number;\n    monthlyExpensesByCategory: { category: string; amount: number; allocatedAmount: number }[];\n    recentExpenses: (Expense & { category: ExpenseCategory })[];\n  }>;\n  getAccountingStatsByPeriod(userId: string, startDate: Date, endDate: Date): Promise<{\n    totalExpenses: number;\n    pendingExpenses: number;\n    approvedExpenses: number;\n    totalImprestFunds: number;\n    activeImprestFunds: number;\n    totalRevenues: number;\n    monthlyRevenues: number;\n    recentRevenues: number;\n    netResult: number;\n    monthlyExpensesByCategory: { category: string; amount: number; allocatedAmount: number }[];\n    recentExpenses: (Expense & { category: ExpenseCategory })[];\n  }>;\n\n  // Cash Book operations\n  getCashBookEntries(userId: string): Promise<CashBookEntry[]>;\n  getCashBookEntry(id: number, userId: string): Promise<CashBookEntry | undefined>;\n  createCashBookEntry(data: NewCashBookEntry): Promise<CashBookEntry>;\n  updateCashBookEntry(id: number, data: Partial<NewCashBookEntry>, userId: string): Promise<CashBookEntry>;\n  deleteCashBookEntry(id: number, userId: string): Promise<void>;\n  reconcileCashBookEntry(id: number, userId: string): Promise<CashBookEntry>;\n\n  // Petty Cash operations\n  getPettyCashEntries(userId: string): Promise<PettyCashEntry[]>;\n  getPettyCashEntry(id: number, userId: string): Promise<PettyCashEntry | undefined>;\n  createPettyCashEntry(data: NewPettyCashEntry): Promise<PettyCashEntry>;\n  updatePettyCashEntry(id: number, data: Partial<NewPettyCashEntry>, userId: string): Promise<PettyCashEntry>;\n  approvePettyCashEntry(id: number, approvedBy: string, userId: string): Promise<PettyCashEntry>;\n  rejectPettyCashEntry(id: number, userId: string): Promise<PettyCashEntry>;\n  deletePettyCashEntry(id: number, userId: string): Promise<void>;\n\n  // Transaction Journal operations\n  getTransactionJournal(userId: string, filters?: any): Promise<TransactionJournal[]>;\n  addToTransactionJournal(data: NewTransactionJournal): Promise<TransactionJournal>;\n  getTransactionJournalEntry(id: number, userId: string): Promise<TransactionJournal | undefined>;\n\n  // Financial Dashboard\n  getFinancialDashboardData(userId: string): Promise<any>;\n\n  // Revenue operations\n  getRevenueCategories(userId: string): Promise<RevenueCategory[]>;\n  getRevenueCategory(id: number, userId: string): Promise<RevenueCategory | undefined>;\n  createRevenueCategory(category: NewRevenueCategory): Promise<RevenueCategory>;\n  updateRevenueCategory(id: number, category: Partial<NewRevenueCategory>, userId: string): Promise<RevenueCategory>;\n  deleteRevenueCategory(id: number, userId: string): Promise<void>;\n\n  getRevenues(userId: string): Promise<(Revenue & { category: RevenueCategory })[]>;\n  getRevenuesByPeriod(userId: string, startDate: Date, endDate: Date): Promise<(Revenue & { category: RevenueCategory })[]>;\n  getRevenue(id: number, userId: string): Promise<Revenue | undefined>;\n  createRevenue(revenue: NewRevenue): Promise<Revenue>;\n  updateRevenue(id: number, revenue: Partial<NewRevenue>, userId: string): Promise<Revenue>;\n  deleteRevenue(id: number, userId: string): Promise<void>;\n\n  // Business Alerts operations\n  getBusinessAlerts(userId: string, unreadOnly?: boolean): Promise<BusinessAlert[]>;\n  createBusinessAlert(alert: NewBusinessAlert): Promise<BusinessAlert>;\n  markAlertAsRead(id: number, userId: string): Promise<void>;\n  markAlertAsResolved(id: number, userId: string): Promise<void>;\n  deleteBusinessAlert(id: number, userId: string): Promise<void>;\n  generateStockAlerts(userId: string): Promise<BusinessAlert[]>;\n  generateOverdueInvoiceAlerts(userId: string): Promise<BusinessAlert[]>;\n  cleanupResolvedAlerts(userId: string, olderThanDays?: number): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: NewUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createLocalUser(userData: NewUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async updateUserProfile(id: string, profileData: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        ...profileData,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserSettings(id: string, settings: { currency?: string; language?: string }): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...settings, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async setUserLicenseActivated(id: string, activated: boolean): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ licenseActivated: activated, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  // Méthodes pour la gestion des tentatives de connexion et verrouillage\n  async incrementLoginAttempts(email: string): Promise<void> {\n    // Approche simplifiée : incrémenter seulement si l'utilisateur existe\n    // Pour éviter l'énumération, la logique d'authentification traitera tous les cas de la même manière\n    await db\n      .update(users)\n      .set({ \n        loginAttempts: sql`${users.loginAttempts} + 1`,\n        updatedAt: new Date() \n      })\n      .where(eq(users.email, email));\n  }\n\n  async resetLoginAttempts(email: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        loginAttempts: 0,\n        lockUntil: null,\n        updatedAt: new Date() \n      })\n      .where(eq(users.email, email));\n  }\n\n  async lockAccount(email: string, lockDurationMinutes: number): Promise<void> {\n    const lockUntil = new Date();\n    lockUntil.setMinutes(lockUntil.getMinutes() + lockDurationMinutes);\n    \n    await db\n      .update(users)\n      .set({ \n        lockUntil: lockUntil,\n        updatedAt: new Date() \n      })\n      .where(eq(users.email, email));\n  }\n\n  async isAccountLocked(email: string): Promise<boolean> {\n    const user = await this.getUserByEmail(email);\n    if (!user || !user.lockUntil) return false;\n    \n    const now = new Date();\n    const lockUntil = new Date(user.lockUntil);\n    \n    if (now < lockUntil) {\n      return true;\n    } else {\n      // Déverrouiller automatiquement si la période de verrouillage est expirée\n      await this.resetLoginAttempts(email);\n      return false;\n    }\n  }\n\n  async checkUserForLogin(email: string): Promise<{ user: User | undefined; isLocked: boolean }> {\n    const user = await this.getUserByEmail(email);\n    let isLocked = false;\n    \n    if (user && user.lockUntil) {\n      const now = new Date();\n      const lockUntil = new Date(user.lockUntil);\n      \n      if (now < lockUntil) {\n        isLocked = true;\n      } else {\n        // Déverrouiller automatiquement si la période de verrouillage est expirée\n        await this.resetLoginAttempts(email);\n      }\n    }\n    \n    return { user, isLocked };\n  }\n\n\n\n\n  // Client operations\n  async getClients(userId: string): Promise<Client[]> {\n    return db.select().from(clients).where(eq(clients.userId, userId)).orderBy(desc(clients.createdAt));\n  }\n\n  async getClient(id: number, userId: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(and(eq(clients.id, id), eq(clients.userId, userId)));\n    return client;\n  }\n\n  async createClient(client: NewClient): Promise<Client> {\n    const [newClient] = await db.insert(clients).values(client).returning();\n    return newClient;\n  }\n\n  async updateClient(id: number, client: Partial<NewClient>, userId: string): Promise<Client> {\n    const [updatedClient] = await db\n      .update(clients)\n      .set(client)\n      .where(and(eq(clients.id, id), eq(clients.userId, userId)))\n      .returning();\n    return updatedClient;\n  }\n\n  async deleteClient(id: number, userId: string): Promise<void> {\n    await db.delete(clients).where(and(eq(clients.id, id), eq(clients.userId, userId)));\n  }\n\n  async searchClients(userId: string, query: string): Promise<Client[]> {\n    const searchTerm = `%${query.toLowerCase()}%`;\n    return db.select().from(clients)\n      .where(and(\n        eq(clients.userId, userId),\n        or(\n          like(sql`LOWER(${clients.name})`, searchTerm),\n          like(sql`LOWER(${clients.email})`, searchTerm),\n          like(sql`LOWER(${clients.company})`, searchTerm)\n        )\n      ))\n      .orderBy(desc(clients.createdAt))\n      .limit(10);\n  }\n\n  // Product operations\n  async getProducts(userId: string): Promise<Product[]> {\n    return db.select().from(products).where(eq(products.userId, userId)).orderBy(desc(products.createdAt));\n  }\n\n  async getProduct(id: number, userId: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(and(eq(products.id, id), eq(products.userId, userId)));\n    return product;\n  }\n\n  async createProduct(product: NewProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    \n    // Automatically generate stock alerts after creating a product\n    await this.generateStockAlerts(product.userId);\n    \n    return newProduct;\n  }\n\n  async updateProduct(id: number, product: Partial<NewProduct>, userId: string): Promise<Product> {\n    const [updatedProduct] = await db\n      .update(products)\n      .set(product)\n      .where(and(eq(products.id, id), eq(products.userId, userId)))\n      .returning();\n    \n    // Automatically generate stock alerts after updating a product\n    await this.generateStockAlerts(userId);\n    \n    return updatedProduct;\n  }\n\n  async deleteProduct(id: number, userId: string): Promise<void> {\n    await db.delete(products).where(and(eq(products.id, id), eq(products.userId, userId)));\n  }\n\n  async searchProducts(userId: string, query: string): Promise<Product[]> {\n    const searchTerm = `%${query.toLowerCase()}%`;\n    return db.select().from(products)\n      .where(and(\n        eq(products.userId, userId),\n        or(\n          like(sql`LOWER(${products.name})`, searchTerm),\n          like(sql`LOWER(${products.description})`, searchTerm)\n        )\n      ))\n      .orderBy(desc(products.createdAt))\n      .limit(10);\n  }\n\n  // Stock replenishment operations\n  async getStockReplenishments(userId: string): Promise<StockReplenishment[]> {\n    const replenishments = await db\n      .select({\n        id: stockReplenishments.id,\n        productId: stockReplenishments.productId,\n        quantity: stockReplenishments.quantity,\n        costPerUnit: stockReplenishments.costPerUnit,\n        totalCost: stockReplenishments.totalCost,\n        supplier: stockReplenishments.supplier,\n        reference: stockReplenishments.reference,\n        notes: stockReplenishments.notes,\n        userId: stockReplenishments.userId,\n        createdAt: stockReplenishments.createdAt,\n        productName: products.name,\n      })\n      .from(stockReplenishments)\n      .leftJoin(products, eq(stockReplenishments.productId, products.id))\n      .where(eq(stockReplenishments.userId, userId))\n      .orderBy(desc(stockReplenishments.createdAt));\n    \n    return replenishments as any;\n  }\n\n  async getStockReplenishmentsByProduct(productId: number, userId: string): Promise<StockReplenishment[]> {\n    return db.select().from(stockReplenishments)\n      .where(and(eq(stockReplenishments.productId, productId), eq(stockReplenishments.userId, userId)))\n      .orderBy(desc(stockReplenishments.createdAt));\n  }\n\n  async createStockReplenishment(replenishment: NewStockReplenishment): Promise<StockReplenishment> {\n    const [newReplenishment] = await db.insert(stockReplenishments).values(replenishment).returning();\n    \n    // Update product stock\n    await db\n      .update(products)\n      .set({\n        stock: sql`${products.stock} + ${replenishment.quantity}`\n      })\n      .where(eq(products.id, replenishment.productId));\n    \n    // Automatically generate stock alerts after replenishment\n    await this.generateStockAlerts(replenishment.userId);\n    \n    return newReplenishment;\n  }\n\n  async deleteStockReplenishment(id: number): Promise<void> {\n    await db.delete(stockReplenishments).where(eq(stockReplenishments.id, id));\n  }\n\n  // Category operations\n  async getCategories(userId: string): Promise<Category[]> {\n    return db.select().from(categories).where(eq(categories.userId, userId)).orderBy(desc(categories.createdAt));\n  }\n\n  async getCategory(id: number, userId: string): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(and(eq(categories.id, id), eq(categories.userId, userId)));\n    return category;\n  }\n\n  async createCategory(category: NewCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  async updateCategory(id: number, category: Partial<NewCategory>, userId: string): Promise<Category> {\n    const [updatedCategory] = await db\n      .update(categories)\n      .set(category)\n      .where(and(eq(categories.id, id), eq(categories.userId, userId)))\n      .returning();\n    return updatedCategory;\n  }\n\n  async deleteCategory(id: number, userId: string): Promise<void> {\n    await db.delete(categories).where(and(eq(categories.id, id), eq(categories.userId, userId)));\n  }\n\n  // Invoice operations\n  async getInvoices(userId: string): Promise<Invoice[]> {\n    return db.select().from(invoices).where(eq(invoices.userId, userId)).orderBy(desc(invoices.createdAt));\n  }\n\n  async getInvoice(id: number, userId: string): Promise<Invoice | undefined> {\n    const [invoice] = await db.select().from(invoices).where(and(eq(invoices.id, id), eq(invoices.userId, userId)));\n    return invoice;\n  }\n\n  async getInvoiceWithItems(id: number, userId: string): Promise<(Invoice & { items: InvoiceItem[]; client: Client }) | undefined> {\n    const [invoice] = await db\n      .select()\n      .from(invoices)\n      .leftJoin(clients, eq(invoices.clientId, clients.id))\n      .where(and(eq(invoices.id, id), eq(invoices.userId, userId)));\n\n    if (!invoice) return undefined;\n\n    const items = await db.select().from(invoiceItems).where(eq(invoiceItems.invoiceId, id));\n\n    return {\n      ...invoice.invoices,\n      items,\n      client: invoice.clients!,\n    };\n  }\n\n  async createInvoice(invoice: NewInvoice, items: Omit<NewInvoiceItem, 'invoiceId'>[]): Promise<Invoice> {\n    const [newInvoice] = await db.insert(invoices).values(invoice).returning();\n    \n    if (items.length > 0) {\n      const itemsWithInvoiceId = items.map(item => ({\n        ...item,\n        invoiceId: newInvoice.id,\n      }));\n      await db.insert(invoiceItems).values(itemsWithInvoiceId);\n\n      // Always create sales records when an invoice is created (regardless of payment status)\n      // This ensures proper accounting - a sale is recorded when the invoice is generated\n      await this.createSalesFromInvoice(newInvoice.id, invoice.userId);\n      \n      // Always update stock when an invoice is created (regardless of payment status)\n      // This reflects the physical reality that goods are delivered/reserved upon invoicing\n      await this.updateStockAfterInvoiceCreation(itemsWithInvoiceId, invoice.userId);\n      \n      // Automatically generate overdue invoice alerts after creating invoices\n      await this.generateOverdueInvoiceAlerts(invoice.userId);\n    }\n\n    return newInvoice;\n  }\n\n  async updateInvoice(id: number, invoice: Partial<NewInvoice>, userId: string): Promise<Invoice> {\n    // Get the current invoice before updating\n    const currentInvoice = await this.getInvoice(id, userId);\n    \n    const [updatedInvoice] = await db\n      .update(invoices)\n      .set(invoice)\n      .where(and(eq(invoices.id, id), eq(invoices.userId, userId)))\n      .returning();\n\n    // Stock is already updated during invoice creation, no need to update again on status change\n    \n    // Automatically generate overdue invoice alerts after updating an invoice\n    await this.generateOverdueInvoiceAlerts(userId);\n\n    return updatedInvoice;\n  }\n\n  // Helper function to update stock after invoice creation\n  private async updateStockAfterInvoiceCreation(items: NewInvoiceItem[], userId: string): Promise<void> {\n    // Update stock for each product (prevent negative stock)\n    for (const item of items.filter(item => item.productId)) {\n      await db\n        .update(products)\n        .set({\n          stock: sql`GREATEST(0, ${products.stock} - ${item.quantity})`\n        })\n        .where(and(\n          eq(products.id, item.productId!),\n          eq(products.userId, userId)\n        ));\n    }\n    \n    // Automatically generate stock alerts after updating stock\n    await this.generateStockAlerts(userId);\n  }\n\n  // Helper function to create sales from invoice items\n  private async createSalesFromInvoice(invoiceId: number, userId: string): Promise<void> {\n    // Get invoice items\n    const items = await db.select().from(invoiceItems).where(eq(invoiceItems.invoiceId, invoiceId));\n    \n    // Check if sales already exist for this invoice to avoid duplicates\n    const existingSales = await db.select().from(sales).where(eq(sales.invoiceId, invoiceId));\n    if (existingSales.length > 0) {\n      return; // Sales already created for this invoice\n    }\n    \n    // Create sales records for each item\n    const salesData = items\n      .filter(item => item.productId) // Only create sales for items with productId\n      .map(item => ({\n        invoiceId: invoiceId,\n        productId: item.productId!,\n        quantity: item.quantity,\n        unitPrice: item.priceHT,\n        total: item.totalHT,\n        userId: userId,\n      }));\n\n    if (salesData.length > 0) {\n      // Insert sales records\n      await db.insert(sales).values(salesData);\n    }\n  }\n\n  async deleteInvoice(id: number, userId: string): Promise<void> {\n    // First delete sales records associated with this invoice\n    await db.delete(sales).where(eq(sales.invoiceId, id));\n    // Then delete invoice items\n    await db.delete(invoiceItems).where(eq(invoiceItems.invoiceId, id));\n    // Finally delete the invoice\n    await db.delete(invoices).where(and(eq(invoices.id, id), eq(invoices.userId, userId)));\n  }\n\n  // Sales operations\n  async getSales(userId: string): Promise<Sale[]> {\n    return db.select().from(sales).where(eq(sales.userId, userId)).orderBy(desc(sales.createdAt));\n  }\n\n  async createSale(sale: NewSale): Promise<Sale> {\n    const [newSale] = await db.insert(sales).values(sale).returning();\n    return newSale;\n  }\n\n  // Dashboard statistics\n  async getDashboardStats(userId: string): Promise<{\n    revenue: number;\n    invoiceCount: number;\n    clientCount: number;\n    productCount: number;\n    recentInvoices: (Invoice & { client: Client })[];\n    topProducts: (Product & { salesCount: number })[];\n    lowStockProducts: Product[];\n    revenueGrowth: number;\n    invoiceGrowth: number;\n    clientGrowth: number;\n    recentInvoiceCount: number;\n    recentClientCount: number;\n  }> {\n    const now = new Date();\n    const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n    const thisWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const lastWeek = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);\n    // Current revenue (sum of all invoices HT - representing total sales)\n    const revenueResult = await db\n      .select({ total: sum(invoices.totalHT) })\n      .from(invoices)\n      .where(eq(invoices.userId, userId));\n    \n    const revenue = parseFloat(revenueResult[0]?.total || \"0\");\n\n    // Previous month revenue for comparison\n    const lastMonthRevenueResult = await db\n      .select({ total: sum(invoices.totalHT) })\n      .from(invoices)\n      .where(and(\n        eq(invoices.userId, userId),\n        sql`${invoices.createdAt} >= ${lastMonth.toISOString()}`,\n        sql`${invoices.createdAt} < ${thisMonth.toISOString()}`\n      ));\n    \n    const lastMonthRevenue = parseFloat(lastMonthRevenueResult[0]?.total || \"0\");\n    const revenueGrowth = lastMonthRevenue > 0 ? ((revenue - lastMonthRevenue) / lastMonthRevenue) * 100 : 0;\n\n    // Total invoice count\n    const invoiceCountResult = await db\n      .select({ count: count() })\n      .from(invoices)\n      .where(eq(invoices.userId, userId));\n    \n    const invoiceCount = invoiceCountResult[0]?.count || 0;\n\n    // Recent invoices (this week)\n    const recentInvoiceCountResult = await db\n      .select({ count: count() })\n      .from(invoices)\n      .where(and(\n        eq(invoices.userId, userId),\n        sql`${invoices.createdAt} >= ${thisWeek.toISOString()}`\n      ));\n    \n    const recentInvoiceCount = recentInvoiceCountResult[0]?.count || 0;\n\n    // Previous week invoice count for comparison\n    const lastWeekInvoiceCountResult = await db\n      .select({ count: count() })\n      .from(invoices)\n      .where(and(\n        eq(invoices.userId, userId),\n        sql`${invoices.createdAt} >= ${lastWeek.toISOString()}`,\n        sql`${invoices.createdAt} < ${thisWeek.toISOString()}`\n      ));\n    \n    const lastWeekInvoiceCount = lastWeekInvoiceCountResult[0]?.count || 0;\n    const invoiceGrowth = lastWeekInvoiceCount > 0 ? ((recentInvoiceCount - lastWeekInvoiceCount) / lastWeekInvoiceCount) * 100 : 0;\n\n    // Total client count\n    const clientCountResult = await db\n      .select({ count: count() })\n      .from(clients)\n      .where(eq(clients.userId, userId));\n    \n    const clientCount = clientCountResult[0]?.count || 0;\n\n    // Recent clients (this month)\n    const recentClientCountResult = await db\n      .select({ count: count() })\n      .from(clients)\n      .where(and(\n        eq(clients.userId, userId),\n        sql`${clients.createdAt} >= ${thisMonth.toISOString()}`\n      ));\n    \n    const recentClientCount = recentClientCountResult[0]?.count || 0;\n\n    // Previous month client count for comparison\n    const lastMonthClientCountResult = await db\n      .select({ count: count() })\n      .from(clients)\n      .where(and(\n        eq(clients.userId, userId),\n        sql`${clients.createdAt} >= ${lastMonth.toISOString()}`,\n        sql`${clients.createdAt} < ${thisMonth.toISOString()}`\n      ));\n    \n    const lastMonthClientCount = lastMonthClientCountResult[0]?.count || 0;\n    const clientGrowth = lastMonthClientCount > 0 ? ((recentClientCount - lastMonthClientCount) / lastMonthClientCount) * 100 : 0;\n\n    // Product count\n    const productCountResult = await db\n      .select({ count: count() })\n      .from(products)\n      .where(eq(products.userId, userId));\n    \n    const productCount = productCountResult[0]?.count || 0;\n\n    // Recent invoices with client info\n    const recentInvoices = await db\n      .select()\n      .from(invoices)\n      .leftJoin(clients, eq(invoices.clientId, clients.id))\n      .where(eq(invoices.userId, userId))\n      .orderBy(desc(invoices.createdAt))\n      .limit(4);\n\n    const recentInvoicesFormatted = recentInvoices.map(row => ({\n      ...row.invoices,\n      client: row.clients!,\n    }));\n\n    // Top products by sales quantity\n    const topProductsResult = await db\n      .select({\n        product: products,\n        salesCount: sum(sales.quantity),\n      })\n      .from(products)\n      .leftJoin(sales, eq(products.id, sales.productId))\n      .where(eq(products.userId, userId))\n      .groupBy(products.id)\n      .orderBy(desc(sum(sales.quantity)))\n      .limit(5);\n\n    const topProducts = topProductsResult\n      .map(row => ({\n        ...row.product,\n        salesCount: parseInt(row.salesCount || \"0\"),\n      }))\n      .sort((a, b) => b.salesCount - a.salesCount); // Ensure proper sorting by sales count\n\n    // Low stock products (stock < 10)\n    const lowStockProducts = await db\n      .select()\n      .from(products)\n      .where(and(eq(products.userId, userId), eq(products.stock, 0)))\n      .limit(10);\n\n    return {\n      revenue,\n      invoiceCount,\n      clientCount,\n      productCount,\n      recentInvoices: recentInvoicesFormatted,\n      topProducts,\n      lowStockProducts,\n      revenueGrowth: Math.round(revenueGrowth * 100) / 100,\n      invoiceGrowth: Math.round(invoiceGrowth * 100) / 100,\n      clientGrowth: Math.round(clientGrowth * 100) / 100,\n      recentInvoiceCount,\n      recentClientCount,\n    };\n  }\n\n  // License operations\n  async getLicenseByKey(key: string): Promise<License | undefined> {\n    const [license] = await db.select().from(licenses).where(eq(licenses.key, key));\n    return license;\n  }\n\n  async getAllLicenses(): Promise<License[]> {\n    return db.select().from(licenses).orderBy(desc(licenses.createdAt));\n  }\n\n  async createLicense(licenseData: NewLicense): Promise<License> {\n    const [license] = await db.insert(licenses).values(licenseData).returning();\n    return license;\n  }\n\n  async activateLicense(key: string, clientName?: string, deviceId?: string): Promise<License> {\n    const [license] = await db\n      .update(licenses)\n      .set({\n        activated: true,\n        clientName,\n        deviceId,\n        activatedAt: new Date(),\n      })\n      .where(eq(licenses.key, key))\n      .returning();\n    return license;\n  }\n\n  async revokeLicense(key: string): Promise<License> {\n    const [license] = await db\n      .update(licenses)\n      .set({\n        activated: false,\n        revokedAt: new Date(),\n      })\n      .where(eq(licenses.key, key))\n      .returning();\n    return license;\n  }\n\n  // Accounting operations implementation\n\n  // Expense Categories\n  async getExpenseCategories(userId: string): Promise<ExpenseCategory[]> {\n    return db.select().from(expenseCategories).where(eq(expenseCategories.userId, userId)).orderBy(desc(expenseCategories.createdAt));\n  }\n\n  async getExpenseCategory(id: number, userId: string): Promise<ExpenseCategory | undefined> {\n    const [category] = await db.select().from(expenseCategories).where(and(eq(expenseCategories.id, id), eq(expenseCategories.userId, userId)));\n    return category;\n  }\n\n  async createExpenseCategory(category: NewExpenseCategory): Promise<ExpenseCategory> {\n    const [newCategory] = await db.insert(expenseCategories).values(category).returning();\n    return newCategory;\n  }\n\n  async updateExpenseCategory(id: number, category: Partial<NewExpenseCategory>, userId: string): Promise<ExpenseCategory> {\n    const [updatedCategory] = await db\n      .update(expenseCategories)\n      .set(category)\n      .where(and(eq(expenseCategories.id, id), eq(expenseCategories.userId, userId)))\n      .returning();\n    return updatedCategory;\n  }\n\n  async deleteExpenseCategory(id: number, userId: string): Promise<void> {\n    await db.delete(expenseCategories).where(and(eq(expenseCategories.id, id), eq(expenseCategories.userId, userId)));\n  }\n\n  // Expenses\n  async getExpenses(userId: string): Promise<any[]> {\n    return await db\n      .select({\n        id: expenses.id,\n        reference: expenses.reference,\n        description: expenses.description,\n        amount: expenses.amount,\n        expenseDate: expenses.expenseDate,\n        paymentMethod: expenses.paymentMethod,\n        status: expenses.status,\n        receiptUrl: expenses.receiptUrl,\n        notes: expenses.notes,\n        imprestId: expenses.imprestId,\n        approvedBy: expenses.approvedBy,\n        approvedAt: expenses.approvedAt,\n        createdAt: expenses.createdAt,\n        category: {\n          id: expenseCategories.id,\n          name: expenseCategories.name,\n          isMajor: expenseCategories.isMajor,\n        },\n      })\n      .from(expenses)\n      .leftJoin(expenseCategories, eq(expenses.categoryId, expenseCategories.id))\n      .where(eq(expenses.userId, userId))\n      .orderBy(desc(expenses.createdAt));\n  }\n\n  async getExpensesByPeriod(userId: string, startDate: Date, endDate: Date): Promise<any[]> {\n    return await db\n      .select({\n        id: expenses.id,\n        reference: expenses.reference,\n        description: expenses.description,\n        amount: expenses.amount,\n        expenseDate: expenses.expenseDate,\n        paymentMethod: expenses.paymentMethod,\n        status: expenses.status,\n        receiptUrl: expenses.receiptUrl,\n        notes: expenses.notes,\n        imprestId: expenses.imprestId,\n        approvedBy: expenses.approvedBy,\n        approvedAt: expenses.approvedAt,\n        createdAt: expenses.createdAt,\n        category: {\n          id: expenseCategories.id,\n          name: expenseCategories.name,\n          isMajor: expenseCategories.isMajor,\n        },\n      })\n      .from(expenses)\n      .leftJoin(expenseCategories, eq(expenses.categoryId, expenseCategories.id))\n      .where(and(\n        eq(expenses.userId, userId),\n        gte(expenses.expenseDate, startDate),\n        lte(expenses.expenseDate, endDate)\n      ))\n      .orderBy(desc(expenses.createdAt));\n  }\n\n  async getExpense(id: number, userId: string): Promise<any | undefined> {\n    const [result] = await db\n      .select({\n        id: expenses.id,\n        reference: expenses.reference,\n        description: expenses.description,\n        amount: expenses.amount,\n        expenseDate: expenses.expenseDate,\n        paymentMethod: expenses.paymentMethod,\n        status: expenses.status,\n        receiptUrl: expenses.receiptUrl,\n        notes: expenses.notes,\n        imprestId: expenses.imprestId,\n        approvedBy: expenses.approvedBy,\n        approvedAt: expenses.approvedAt,\n        createdAt: expenses.createdAt,\n        category: {\n          id: expenseCategories.id,\n          name: expenseCategories.name,\n          isMajor: expenseCategories.isMajor,\n        },\n      })\n      .from(expenses)\n      .leftJoin(expenseCategories, eq(expenses.categoryId, expenseCategories.id))\n      .where(and(eq(expenses.id, id), eq(expenses.userId, userId)));\n\n    return result;\n  }\n\n  async createExpense(expense: NewExpense): Promise<Expense> {\n    // Generate unique reference if not provided\n    const reference = expense.reference || `EXP-${Date.now()}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n    \n    // Create the expense without deducting from imprest fund yet\n    const [newExpense] = await db.insert(expenses).values({ ...expense, reference }).returning();\n    \n    return newExpense;\n  }\n\n  async updateExpense(id: number, expense: Partial<NewExpense>, userId: string): Promise<Expense> {\n    const [updatedExpense] = await db\n      .update(expenses)\n      .set(expense)\n      .where(and(eq(expenses.id, id), eq(expenses.userId, userId)))\n      .returning();\n    return updatedExpense;\n  }\n\n  async deleteExpense(id: number, userId: string): Promise<void> {\n    await db.delete(expenses).where(and(eq(expenses.id, id), eq(expenses.userId, userId)));\n  }\n\n  async approveExpense(id: number, approvedBy: string, userId: string): Promise<Expense> {\n    return await db.transaction(async (tx) => {\n      // Get the expense details first\n      const [expense] = await tx.select().from(expenses).where(and(eq(expenses.id, id), eq(expenses.userId, userId)));\n      if (!expense) throw new Error(\"Dépense introuvable\");\n\n      // Update expense status\n      const [updatedExpense] = await tx\n        .update(expenses)\n        .set({ \n          status: 'approved', \n          approvedBy, \n          approvedAt: new Date() \n        })\n        .where(and(eq(expenses.id, id), eq(expenses.userId, userId)))\n        .returning();\n\n      // If linked to an imprest fund, deduct the amount NOW (on approval)\n      if (expense.imprestId) {\n        // Get current fund balance\n        const [fund] = await tx.select().from(imprestFunds).where(eq(imprestFunds.id, expense.imprestId));\n        if (!fund) throw new Error(\"Fonds d'avance introuvable\");\n        \n        const currentBalance = parseFloat(fund.currentBalance);\n        const expenseAmount = parseFloat(expense.amount);\n        \n        if (currentBalance < expenseAmount) {\n          throw new Error(`Solde insuffisant. Solde actuel: ${currentBalance} FCFA, Dépense: ${expenseAmount} FCFA`);\n        }\n        \n        const newBalance = currentBalance - expenseAmount;\n        \n        // Update fund balance\n        await tx.update(imprestFunds)\n          .set({ currentBalance: newBalance.toString(), updatedAt: new Date() })\n          .where(eq(imprestFunds.id, expense.imprestId));\n        \n        // Create imprest transaction record\n        await tx.insert(imprestTransactions).values({\n          reference: `ITX-${Date.now()}`,\n          imprestId: expense.imprestId,\n          type: 'expense',\n          amount: expense.amount,\n          description: `Dépense approuvée: ${expense.description}`,\n          balanceAfter: newBalance.toString(),\n          expenseId: expense.id,\n          userId: expense.userId,\n        });\n      }\n\n      // Note: Transaction journal integration removed for now\n\n      return updatedExpense;\n    });\n  }\n\n  async rejectExpense(id: number, userId: string): Promise<Expense> {\n    return await db.transaction(async (tx) => {\n      // Get the expense details first\n      const [expense] = await tx.select().from(expenses).where(and(eq(expenses.id, id), eq(expenses.userId, userId)));\n      if (!expense) throw new Error(\"Dépense introuvable\");\n\n      // Update expense status\n      const [updatedExpense] = await tx\n        .update(expenses)\n        .set({ status: 'rejected' })\n        .where(and(eq(expenses.id, id), eq(expenses.userId, userId)))\n        .returning();\n\n      // If the expense was already approved and linked to an imprest fund, restore the amount\n      if (expense.status === 'approved' && expense.imprestId) {\n        // Get current fund balance\n        const [fund] = await tx.select().from(imprestFunds).where(eq(imprestFunds.id, expense.imprestId));\n        if (fund) {\n          const currentBalance = parseFloat(fund.currentBalance);\n          const expenseAmount = parseFloat(expense.amount);\n          const newBalance = currentBalance + expenseAmount;\n          \n          // Restore fund balance\n          await tx.update(imprestFunds)\n            .set({ currentBalance: newBalance.toString(), updatedAt: new Date() })\n            .where(eq(imprestFunds.id, expense.imprestId));\n          \n          // Create imprest transaction record for the refund\n          await tx.insert(imprestTransactions).values({\n            reference: `ITX-${Date.now()}`,\n            imprestId: expense.imprestId,\n            type: 'refund',\n            amount: expense.amount,\n            description: `Remboursement dépense rejetée: ${expense.description}`,\n            balanceAfter: newBalance.toString(),\n            expenseId: expense.id,\n            userId: expense.userId,\n          });\n        }\n      }\n\n      return updatedExpense;\n    });\n  }\n\n  // Imprest Funds\n  async getImprestFunds(userId: string): Promise<ImprestFund[]> {\n    return db.select().from(imprestFunds).where(eq(imprestFunds.userId, userId)).orderBy(desc(imprestFunds.createdAt));\n  }\n\n  async getImprestFund(id: number, userId: string): Promise<ImprestFund | undefined> {\n    const [fund] = await db.select().from(imprestFunds).where(and(eq(imprestFunds.id, id), eq(imprestFunds.userId, userId)));\n    return fund;\n  }\n\n  async createImprestFund(fund: NewImprestFund): Promise<ImprestFund> {\n    // Generate unique reference\n    const reference = `IMP-${Date.now()}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n    const initialAmount = parseFloat(fund.initialAmount as any);\n    const [newFund] = await db.insert(imprestFunds).values({ \n      ...fund, \n      reference,\n      initialAmount: initialAmount.toString(),\n      currentBalance: initialAmount.toString(),\n    }).returning();\n    return newFund;\n  }\n\n  async updateImprestFund(id: number, fund: Partial<NewImprestFund>, userId: string): Promise<ImprestFund> {\n    const [updatedFund] = await db\n      .update(imprestFunds)\n      .set({ ...fund, updatedAt: new Date() })\n      .where(and(eq(imprestFunds.id, id), eq(imprestFunds.userId, userId)))\n      .returning();\n    return updatedFund;\n  }\n\n  async deleteImprestFund(id: number, userId: string): Promise<void> {\n    // First delete related transactions\n    await db.delete(imprestTransactions).where(eq(imprestTransactions.imprestId, id));\n    // Then delete the fund\n    await db.delete(imprestFunds).where(and(eq(imprestFunds.id, id), eq(imprestFunds.userId, userId)));\n  }\n\n  // Imprest Transactions\n  async getImprestTransactions(imprestId: number, userId: string): Promise<ImprestTransaction[]> {\n    return db.select().from(imprestTransactions)\n      .where(and(eq(imprestTransactions.imprestId, imprestId), eq(imprestTransactions.userId, userId)))\n      .orderBy(desc(imprestTransactions.createdAt));\n  }\n\n  async createImprestTransaction(transaction: NewImprestTransaction): Promise<ImprestTransaction> {\n    // Generate unique reference\n    const reference = `TXN-${Date.now()}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n    \n    // Get current fund to calculate new balance\n    const [fund] = await db.select().from(imprestFunds).where(eq(imprestFunds.id, transaction.imprestId));\n    if (!fund) throw new Error(\"Imprest fund not found\");\n    \n    const currentBalance = parseFloat(fund.currentBalance);\n    const transactionAmount = parseFloat(transaction.amount as any);\n    \n    let newBalance: number;\n    if (transaction.type === 'deposit') {\n      newBalance = currentBalance + transactionAmount;\n    } else {\n      newBalance = currentBalance - transactionAmount;\n      if (newBalance < 0) throw new Error(\"Insufficient funds\");\n    }\n    \n    // Create transaction\n    const [newTransaction] = await db.insert(imprestTransactions).values({\n      ...transaction,\n      reference,\n      amount: transactionAmount.toString(),\n      balanceAfter: newBalance.toString(),\n    }).returning();\n    \n    // Update fund balance\n    await db.update(imprestFunds)\n      .set({ \n        currentBalance: newBalance.toString(),\n        updatedAt: new Date() \n      })\n      .where(eq(imprestFunds.id, transaction.imprestId));\n    \n    return newTransaction;\n  }\n\n  // Accounting Reports\n  async getAccountingReports(userId: string): Promise<AccountingReport[]> {\n    return db.select().from(accountingReports).where(eq(accountingReports.userId, userId)).orderBy(desc(accountingReports.createdAt));\n  }\n\n  async createAccountingReport(report: NewAccountingReport): Promise<AccountingReport> {\n    const [newReport] = await db.insert(accountingReports).values(report).returning();\n    return newReport;\n  }\n\n  async deleteAccountingReport(id: number, userId: string): Promise<void> {\n    await db.delete(accountingReports).where(and(eq(accountingReports.id, id), eq(accountingReports.userId, userId)));\n  }\n\n  // Accounting Statistics\n  async getAccountingStats(userId: string): Promise<{\n    totalExpenses: number;\n    pendingExpenses: number;\n    approvedExpenses: number;\n    totalImprestFunds: number;\n    activeImprestFunds: number;\n    totalRevenues: number;\n    monthlyRevenues: number;\n    recentRevenues: number;\n    netResult: number;\n    monthlyExpensesByCategory: { category: string; amount: number; allocatedAmount: number }[];\n    recentExpenses: (Expense & { category: ExpenseCategory })[];\n  }> {\n    const now = new Date();\n    const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    \n    // Total expenses amount (excluding rejected expenses)\n    const totalExpensesResult = await db\n      .select({ total: sum(expenses.amount) })\n      .from(expenses)\n      .where(and(\n        eq(expenses.userId, userId),\n        ne(expenses.status, \"rejected\")\n      ));\n    \n    const totalExpenses = parseFloat(totalExpensesResult[0]?.total || \"0\");\n\n    // Pending expenses count\n    const pendingExpensesResult = await db\n      .select({ count: count() })\n      .from(expenses)\n      .where(and(eq(expenses.userId, userId), eq(expenses.status, \"pending\")));\n    \n    const pendingExpenses = pendingExpensesResult[0]?.count || 0;\n\n    // Approved expenses count\n    const approvedExpensesResult = await db\n      .select({ count: count() })\n      .from(expenses)\n      .where(and(eq(expenses.userId, userId), eq(expenses.status, \"approved\")));\n    \n    const approvedExpenses = approvedExpensesResult[0]?.count || 0;\n\n    // Total imprest funds amount\n    const totalImprestResult = await db\n      .select({ total: sum(imprestFunds.currentBalance) })\n      .from(imprestFunds)\n      .where(eq(imprestFunds.userId, userId));\n    \n    const totalImprestFunds = parseFloat(totalImprestResult[0]?.total || \"0\");\n\n    // Active imprest funds count\n    const activeImprestResult = await db\n      .select({ count: count() })\n      .from(imprestFunds)\n      .where(and(eq(imprestFunds.userId, userId), eq(imprestFunds.status, \"active\")));\n    \n    const activeImprestFunds = activeImprestResult[0]?.count || 0;\n\n    // Monthly expenses by category with imprest fund allocation\n    const monthlyExpensesByCategory = await db\n      .select({\n        category: expenseCategories.name,\n        categoryId: expenseCategories.id,\n        expenseAmount: sum(expenses.amount),\n      })\n      .from(expenses)\n      .leftJoin(expenseCategories, eq(expenses.categoryId, expenseCategories.id))\n      .where(and(\n        eq(expenses.userId, userId),\n        sql`${expenses.expenseDate} >= ${thisMonth.toISOString()}`,\n        ne(expenses.status, \"rejected\")\n      ))\n      .groupBy(expenseCategories.name, expenseCategories.id);\n\n    // Get imprest fund allocations for each category - using MAX to avoid counting the same fund multiple times\n    const imprestAllocationByCategory = await db\n      .select({\n        categoryId: expenseCategories.id,\n        category: expenseCategories.name,\n        allocatedAmount: sql<string>`MAX(${imprestFunds.initialAmount})`,\n      })\n      .from(expenses)\n      .leftJoin(expenseCategories, eq(expenses.categoryId, expenseCategories.id))\n      .leftJoin(imprestFunds, eq(expenses.imprestId, imprestFunds.id))\n      .where(and(\n        eq(expenses.userId, userId),\n        isNotNull(expenses.imprestId),\n        eq(imprestFunds.status, \"active\")\n      ))\n      .groupBy(expenseCategories.id, expenseCategories.name, imprestFunds.id);\n\n    const monthlyExpensesByCategoryFormatted = monthlyExpensesByCategory.map(row => {\n      const allocation = imprestAllocationByCategory.find(alloc => \n        alloc.categoryId === row.categoryId\n      );\n      return {\n        category: row.category || 'Sans catégorie',\n        amount: parseFloat(row.expenseAmount || \"0\"),\n        allocatedAmount: parseFloat(allocation?.allocatedAmount || \"0\"),\n      };\n    });\n\n    // Recent expenses\n    const recentExpensesResult = await db\n      .select()\n      .from(expenses)\n      .leftJoin(expenseCategories, eq(expenses.categoryId, expenseCategories.id))\n      .where(eq(expenses.userId, userId))\n      .orderBy(desc(expenses.createdAt))\n      .limit(5);\n\n    const recentExpenses = recentExpensesResult.map(row => ({\n      ...row.expenses,\n      category: row.expense_categories!,\n    }));\n\n    // Total revenues amount\n    const totalRevenuesResult = await db\n      .select({ total: sum(revenues.amount) })\n      .from(revenues)\n      .where(eq(revenues.userId, userId));\n    \n    const totalRevenues = parseFloat(totalRevenuesResult[0]?.total || \"0\");\n\n    // Monthly revenues (current month)\n    const monthlyRevenuesResult = await db\n      .select({ total: sum(revenues.amount) })\n      .from(revenues)\n      .where(and(\n        eq(revenues.userId, userId),\n        sql`${revenues.revenueDate} >= ${thisMonth.toISOString()}`\n      ));\n    \n    const monthlyRevenues = parseFloat(monthlyRevenuesResult[0]?.total || \"0\");\n\n    // Recent revenues count (last 30 days)\n    const lastMonth = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n    const recentRevenuesResult = await db\n      .select({ count: count() })\n      .from(revenues)\n      .where(and(\n        eq(revenues.userId, userId),\n        sql`${revenues.revenueDate} >= ${lastMonth.toISOString()}`\n      ));\n    \n    const recentRevenues = recentRevenuesResult[0]?.count || 0;\n\n    // Calculate net result (Revenues - Expenses)\n    const netResult = totalRevenues - totalExpenses;\n\n    return {\n      totalExpenses,\n      pendingExpenses,\n      approvedExpenses,\n      totalImprestFunds,\n      activeImprestFunds,\n      totalRevenues,\n      monthlyRevenues,\n      recentRevenues,\n      netResult,\n      monthlyExpensesByCategory: monthlyExpensesByCategoryFormatted,\n      recentExpenses,\n    };\n  }\n\n  async getAccountingStatsByPeriod(userId: string, startDate: Date, endDate: Date): Promise<{\n    totalExpenses: number;\n    pendingExpenses: number;\n    approvedExpenses: number;\n    totalImprestFunds: number;\n    activeImprestFunds: number;\n    totalRevenues: number;\n    monthlyRevenues: number;\n    recentRevenues: number;\n    netResult: number;\n    monthlyExpensesByCategory: { category: string; amount: number; allocatedAmount: number }[];\n    recentExpenses: (Expense & { category: ExpenseCategory })[];\n  }> {\n    // Total expenses amount (excluding rejected expenses) for the period\n    const totalExpensesResult = await db\n      .select({ total: sum(expenses.amount) })\n      .from(expenses)\n      .where(and(\n        eq(expenses.userId, userId),\n        ne(expenses.status, \"rejected\"),\n        gte(expenses.expenseDate, startDate),\n        lte(expenses.expenseDate, endDate)\n      ));\n    \n    const totalExpenses = parseFloat(totalExpensesResult[0]?.total || \"0\");\n\n    // Pending expenses count for the period\n    const pendingExpensesResult = await db\n      .select({ count: count() })\n      .from(expenses)\n      .where(and(\n        eq(expenses.userId, userId), \n        eq(expenses.status, \"pending\"),\n        gte(expenses.expenseDate, startDate),\n        lte(expenses.expenseDate, endDate)\n      ));\n    \n    const pendingExpenses = pendingExpensesResult[0]?.count || 0;\n\n    // Approved expenses count for the period\n    const approvedExpensesResult = await db\n      .select({ count: count() })\n      .from(expenses)\n      .where(and(\n        eq(expenses.userId, userId), \n        eq(expenses.status, \"approved\"),\n        gte(expenses.expenseDate, startDate),\n        lte(expenses.expenseDate, endDate)\n      ));\n    \n    const approvedExpenses = approvedExpensesResult[0]?.count || 0;\n\n    // Total imprest funds amount (not filtered by period)\n    const totalImprestResult = await db\n      .select({ total: sum(imprestFunds.currentBalance) })\n      .from(imprestFunds)\n      .where(eq(imprestFunds.userId, userId));\n    \n    const totalImprestFunds = parseFloat(totalImprestResult[0]?.total || \"0\");\n\n    // Active imprest funds count (not filtered by period)\n    const activeImprestResult = await db\n      .select({ count: count() })\n      .from(imprestFunds)\n      .where(and(\n        eq(imprestFunds.userId, userId),\n        eq(imprestFunds.status, \"active\")\n      ));\n    \n    const activeImprestFunds = activeImprestResult[0]?.count || 0;\n\n    // Total revenues for the period\n    const totalRevenuesResult = await db\n      .select({ total: sum(revenues.amount) })\n      .from(revenues)\n      .where(and(\n        eq(revenues.userId, userId),\n        gte(revenues.revenueDate, startDate),\n        lte(revenues.revenueDate, endDate)\n      ));\n    \n    const totalRevenues = parseFloat(totalRevenuesResult[0]?.total || \"0\");\n\n    // Monthly revenues for the period\n    const monthlyRevenues = totalRevenues;\n\n    // Recent revenues for the period\n    const recentRevenues = totalRevenues;\n\n    // Monthly expenses by category for the period\n    const monthlyExpensesByCategoryResult = await db\n      .select({\n        category: expenseCategories.name,\n        amount: sum(expenses.amount),\n      })\n      .from(expenses)\n      .leftJoin(expenseCategories, eq(expenses.categoryId, expenseCategories.id))\n      .where(and(\n        eq(expenses.userId, userId),\n        ne(expenses.status, \"rejected\"),\n        gte(expenses.expenseDate, startDate),\n        lte(expenses.expenseDate, endDate)\n      ))\n      .groupBy(expenseCategories.name);\n\n    const monthlyExpensesByCategoryFormatted = monthlyExpensesByCategoryResult.map(row => ({\n      category: row.category || \"Sans catégorie\",\n      amount: parseFloat(row.amount || \"0\"),\n      allocatedAmount: 0,\n    }));\n\n    // Recent expenses for the period (limit to 5)\n    const recentExpensesResult = await db\n      .select({\n        id: expenses.id,\n        reference: expenses.reference,\n        description: expenses.description,\n        amount: expenses.amount,\n        expenseDate: expenses.expenseDate,\n        paymentMethod: expenses.paymentMethod,\n        status: expenses.status,\n        receiptUrl: expenses.receiptUrl,\n        notes: expenses.notes,\n        imprestId: expenses.imprestId,\n        approvedBy: expenses.approvedBy,\n        approvedAt: expenses.approvedAt,\n        createdAt: expenses.createdAt,\n        category: {\n          id: expenseCategories.id,\n          name: expenseCategories.name,\n          isMajor: expenseCategories.isMajor,\n        },\n      })\n      .from(expenses)\n      .leftJoin(expenseCategories, eq(expenses.categoryId, expenseCategories.id))\n      .where(and(\n        eq(expenses.userId, userId),\n        gte(expenses.expenseDate, startDate),\n        lte(expenses.expenseDate, endDate)\n      ))\n      .orderBy(desc(expenses.createdAt))\n      .limit(5) as (Expense & { category: ExpenseCategory })[];\n\n    // Calculate net result for the period\n    const netResult = totalRevenues - totalExpenses;\n\n    return {\n      totalExpenses,\n      pendingExpenses,\n      approvedExpenses,\n      totalImprestFunds,\n      activeImprestFunds,\n      totalRevenues,\n      monthlyRevenues,\n      recentRevenues,\n      netResult,\n      monthlyExpensesByCategory: monthlyExpensesByCategoryFormatted,\n      recentExpenses: recentExpensesResult,\n    };\n  }\n\n  // ==========================================\n  // CASH BOOK OPERATIONS\n  // ==========================================\n  \n  async getCashBookEntries(userId: string): Promise<CashBookEntry[]> {\n    return db.select().from(cashBookEntries).where(eq(cashBookEntries.userId, userId)).orderBy(desc(cashBookEntries.date));\n  }\n\n  async getCashBookEntry(id: number, userId: string): Promise<CashBookEntry | undefined> {\n    const [entry] = await db.select().from(cashBookEntries).where(and(eq(cashBookEntries.id, id), eq(cashBookEntries.userId, userId)));\n    return entry;\n  }\n\n  async createCashBookEntry(data: NewCashBookEntry): Promise<CashBookEntry> {\n    // Generate unique reference\n    const reference = `CB-${Date.now()}-${Math.random().toString(36).substr(2, 5).toUpperCase()}`;\n    \n    const [newEntry] = await db.insert(cashBookEntries).values({\n      ...data,\n      reference,\n      date: typeof data.date === 'string' ? data.date : (data.date as Date).toISOString().split('T')[0],\n    }).returning();\n\n    // Add to transaction journal\n    await this.addToTransactionJournal({\n      userId: data.userId,\n      transactionDate: typeof data.date === 'string' ? new Date(data.date) : data.date as Date,\n      reference,\n      description: data.description,\n      sourceModule: 'cash_book',\n      sourceId: newEntry.id,\n      debitAccount: data.type === 'expense' ? data.account : undefined,\n      creditAccount: data.type === 'income' ? data.account : undefined,\n      debitAmount: data.type === 'expense' ? data.amount : undefined,\n      creditAmount: data.type === 'income' ? data.amount : undefined,\n      createdBy: data.userId,\n    });\n\n    return newEntry;\n  }\n\n  async updateCashBookEntry(id: number, data: Partial<NewCashBookEntry>, userId: string): Promise<CashBookEntry> {\n    const updateData: any = { ...data };\n    if (updateData.date instanceof Date) {\n      updateData.date = updateData.date.toISOString().split('T')[0];\n    }\n    \n    const [updatedEntry] = await db\n      .update(cashBookEntries)\n      .set({\n        ...updateData,\n        updatedAt: new Date(),\n      })\n      .where(and(eq(cashBookEntries.id, id), eq(cashBookEntries.userId, userId)))\n      .returning();\n    return updatedEntry;\n  }\n\n  async deleteCashBookEntry(id: number, userId: string): Promise<void> {\n    await db.delete(cashBookEntries).where(and(eq(cashBookEntries.id, id), eq(cashBookEntries.userId, userId)));\n  }\n\n  async reconcileCashBookEntry(id: number, userId: string): Promise<CashBookEntry> {\n    const [updatedEntry] = await db\n      .update(cashBookEntries)\n      .set({\n        isReconciled: true,\n        reconciledAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(and(eq(cashBookEntries.id, id), eq(cashBookEntries.userId, userId)))\n      .returning();\n    return updatedEntry;\n  }\n\n  // ==========================================\n  // PETTY CASH OPERATIONS\n  // ==========================================\n  \n  async getPettyCashEntries(userId: string): Promise<PettyCashEntry[]> {\n    return db.select().from(pettyCashEntries).where(eq(pettyCashEntries.userId, userId)).orderBy(desc(pettyCashEntries.date));\n  }\n\n  async getPettyCashEntry(id: number, userId: string): Promise<PettyCashEntry | undefined> {\n    const [entry] = await db.select().from(pettyCashEntries).where(and(eq(pettyCashEntries.id, id), eq(pettyCashEntries.userId, userId)));\n    return entry;\n  }\n\n  async createPettyCashEntry(data: NewPettyCashEntry): Promise<PettyCashEntry> {\n    // Calculate running balance\n    const lastEntry = await db\n      .select({ runningBalance: pettyCashEntries.runningBalance })\n      .from(pettyCashEntries)\n      .where(eq(pettyCashEntries.userId, data.userId))\n      .orderBy(desc(pettyCashEntries.createdAt))\n      .limit(1);\n\n    const lastBalance = parseFloat(lastEntry[0]?.runningBalance || \"0\");\n    const newBalance = lastBalance - parseFloat(data.amount);\n\n    const [newEntry] = await db.insert(pettyCashEntries).values({\n      ...data,\n      date: typeof data.date === 'string' ? data.date : (data.date as Date).toISOString().split('T')[0],\n    }).returning();\n\n    return newEntry;\n  }\n\n  async updatePettyCashEntry(id: number, data: Partial<NewPettyCashEntry>, userId: string): Promise<PettyCashEntry> {\n    const updateData: any = { ...data };\n    if (updateData.date instanceof Date) {\n      updateData.date = updateData.date.toISOString().split('T')[0];\n    }\n    \n    const [updatedEntry] = await db\n      .update(pettyCashEntries)\n      .set({\n        ...updateData,\n        updatedAt: new Date(),\n      })\n      .where(and(eq(pettyCashEntries.id, id), eq(pettyCashEntries.userId, userId)))\n      .returning();\n    return updatedEntry;\n  }\n\n  async approvePettyCashEntry(id: number, approvedBy: string, userId: string): Promise<PettyCashEntry> {\n    const [updatedEntry] = await db\n      .update(pettyCashEntries)\n      .set({\n        status: 'approved',\n        approvedBy,\n        updatedAt: new Date(),\n      })\n      .where(and(eq(pettyCashEntries.id, id), eq(pettyCashEntries.userId, userId)))\n      .returning();\n\n    if (updatedEntry) {\n      // Add to transaction journal\n      await this.addToTransactionJournal({\n        userId,\n        transactionDate: new Date(updatedEntry.date),\n        reference: `PC-${updatedEntry.id}`,\n        description: updatedEntry.description,\n        sourceModule: 'petty_cash',\n        sourceId: updatedEntry.id,\n        debitAccount: 'petty_cash_expense',\n        creditAccount: 'petty_cash',\n        debitAmount: updatedEntry.amount,\n        creditAmount: updatedEntry.amount,\n        createdBy: approvedBy,\n      });\n    }\n\n    return updatedEntry;\n  }\n\n  async rejectPettyCashEntry(id: number, userId: string): Promise<PettyCashEntry> {\n    const [updatedEntry] = await db\n      .update(pettyCashEntries)\n      .set({\n        status: 'rejected',\n        updatedAt: new Date(),\n      })\n      .where(and(eq(pettyCashEntries.id, id), eq(pettyCashEntries.userId, userId)))\n      .returning();\n    return updatedEntry;\n  }\n\n  async deletePettyCashEntry(id: number, userId: string): Promise<void> {\n    await db.delete(pettyCashEntries).where(and(eq(pettyCashEntries.id, id), eq(pettyCashEntries.userId, userId)));\n  }\n\n  // ==========================================\n  // TRANSACTION JOURNAL OPERATIONS\n  // ==========================================\n  \n  async getTransactionJournal(userId: string, filters?: any): Promise<TransactionJournal[]> {\n    const conditions = [eq(transactionJournal.userId, userId)];\n\n    if (filters?.startDate) {\n      conditions.push(gte(transactionJournal.transactionDate, new Date(filters.startDate)));\n    }\n    if (filters?.endDate) {\n      conditions.push(lte(transactionJournal.transactionDate, new Date(filters.endDate)));\n    }\n    if (filters?.sourceModule) {\n      conditions.push(eq(transactionJournal.sourceModule, filters.sourceModule));\n    }\n\n    return await db\n      .select()\n      .from(transactionJournal)\n      .where(and(...conditions))\n      .orderBy(desc(transactionJournal.entryDate));\n  }\n\n  async addToTransactionJournal(data: NewTransactionJournal): Promise<TransactionJournal> {\n    const [newEntry] = await db.insert(transactionJournal).values(data).returning();\n    return newEntry;\n  }\n\n  async getTransactionJournalEntry(id: number, userId: string): Promise<TransactionJournal | undefined> {\n    const [entry] = await db\n      .select()\n      .from(transactionJournal)\n      .where(and(eq(transactionJournal.id, id), eq(transactionJournal.userId, userId)));\n    return entry;\n  }\n\n  // ==========================================\n  // FINANCIAL DASHBOARD OPERATIONS\n  // ==========================================\n  \n  async getFinancialDashboardData(userId: string) {\n    try {\n      // Cash flow summary\n      const cashFlowResult = await db\n        .select({\n          type: cashBookEntries.type,\n          total: sum(cashBookEntries.amount),\n        })\n        .from(cashBookEntries)\n        .where(and(\n          eq(cashBookEntries.userId, userId),\n          sql`${cashBookEntries.date} >= date_trunc('month', current_date)`\n        ))\n        .groupBy(cashBookEntries.type);\n\n      // Account balances\n      const accountBalances = await db\n        .select({\n          account: cashBookEntries.account,\n          balance: sum(sql`CASE WHEN ${cashBookEntries.type} = 'income' THEN ${cashBookEntries.amount} ELSE -${cashBookEntries.amount} END`),\n        })\n        .from(cashBookEntries)\n        .where(eq(cashBookEntries.userId, userId))\n        .groupBy(cashBookEntries.account);\n\n      // Recent transactions\n      const recentTransactions = await db\n        .select()\n        .from(transactionJournal)\n        .where(eq(transactionJournal.userId, userId))\n        .orderBy(desc(transactionJournal.entryDate))\n        .limit(10);\n\n      // Petty cash summary\n      const pettyCashSummary = await db\n        .select({\n          status: pettyCashEntries.status,\n          count: count(),\n          total: sum(pettyCashEntries.amount),\n        })\n        .from(pettyCashEntries)\n        .where(and(\n          eq(pettyCashEntries.userId, userId),\n          sql`${pettyCashEntries.date} >= date_trunc('month', current_date)`\n        ))\n        .groupBy(pettyCashEntries.status);\n\n      return {\n        cashFlow: cashFlowResult.map(c => ({\n          type: c.type,\n          total: parseFloat(c.total || \"0\")\n        })),\n        accountBalances: accountBalances.map(a => ({\n          account: a.account,\n          balance: parseFloat(a.balance || \"0\")\n        })),\n        recentTransactions,\n        pettyCashSummary: pettyCashSummary.map(p => ({\n          status: p.status,\n          count: p.count,\n          total: parseFloat(p.total || \"0\")\n        }))\n      };\n    } catch (error) {\n      console.error(\"Error getting financial dashboard data:\", error);\n      throw error;\n    }\n  }\n\n  // ==========================================\n  // REVENUE OPERATIONS\n  // ==========================================\n\n  async getRevenueCategories(userId: string): Promise<RevenueCategory[]> {\n    return await db\n      .select()\n      .from(revenueCategories)\n      .where(eq(revenueCategories.userId, userId))\n      .orderBy(desc(revenueCategories.createdAt));\n  }\n\n  async getRevenueCategory(id: number, userId: string): Promise<RevenueCategory | undefined> {\n    const [category] = await db\n      .select()\n      .from(revenueCategories)\n      .where(and(eq(revenueCategories.id, id), eq(revenueCategories.userId, userId)));\n    return category;\n  }\n\n  async createRevenueCategory(categoryData: NewRevenueCategory): Promise<RevenueCategory> {\n    const [category] = await db\n      .insert(revenueCategories)\n      .values(categoryData)\n      .returning();\n    return category;\n  }\n\n  async updateRevenueCategory(id: number, categoryData: Partial<NewRevenueCategory>, userId: string): Promise<RevenueCategory> {\n    const [category] = await db\n      .update(revenueCategories)\n      .set(categoryData)\n      .where(and(eq(revenueCategories.id, id), eq(revenueCategories.userId, userId)))\n      .returning();\n    return category;\n  }\n\n  async deleteRevenueCategory(id: number, userId: string): Promise<void> {\n    await db\n      .delete(revenueCategories)\n      .where(and(eq(revenueCategories.id, id), eq(revenueCategories.userId, userId)));\n  }\n\n  async getRevenues(userId: string): Promise<(Revenue & { category: RevenueCategory })[]> {\n    return await db\n      .select({\n        id: revenues.id,\n        reference: revenues.reference,\n        description: revenues.description,\n        amount: revenues.amount,\n        categoryId: revenues.categoryId,\n        revenueDate: revenues.revenueDate,\n        paymentMethod: revenues.paymentMethod,\n        source: revenues.source,\n        receiptUrl: revenues.receiptUrl,\n        notes: revenues.notes,\n        userId: revenues.userId,\n        createdAt: revenues.createdAt,\n        category: {\n          id: revenueCategories.id,\n          name: revenueCategories.name,\n          description: revenueCategories.description,\n          userId: revenueCategories.userId,\n          createdAt: revenueCategories.createdAt,\n        },\n      })\n      .from(revenues)\n      .leftJoin(revenueCategories, eq(revenues.categoryId, revenueCategories.id))\n      .where(eq(revenues.userId, userId))\n      .orderBy(desc(revenues.createdAt)) as (Revenue & { category: RevenueCategory })[];\n  }\n\n  async getRevenuesByPeriod(userId: string, startDate: Date, endDate: Date): Promise<(Revenue & { category: RevenueCategory })[]> {\n    return await db\n      .select({\n        id: revenues.id,\n        reference: revenues.reference,\n        description: revenues.description,\n        amount: revenues.amount,\n        categoryId: revenues.categoryId,\n        revenueDate: revenues.revenueDate,\n        paymentMethod: revenues.paymentMethod,\n        source: revenues.source,\n        receiptUrl: revenues.receiptUrl,\n        notes: revenues.notes,\n        userId: revenues.userId,\n        createdAt: revenues.createdAt,\n        category: {\n          id: revenueCategories.id,\n          name: revenueCategories.name,\n          description: revenueCategories.description,\n          userId: revenueCategories.userId,\n          createdAt: revenueCategories.createdAt,\n        },\n      })\n      .from(revenues)\n      .leftJoin(revenueCategories, eq(revenues.categoryId, revenueCategories.id))\n      .where(and(\n        eq(revenues.userId, userId),\n        gte(revenues.revenueDate, startDate),\n        lte(revenues.revenueDate, endDate)\n      ))\n      .orderBy(desc(revenues.createdAt)) as (Revenue & { category: RevenueCategory })[];\n  }\n\n  async getRevenue(id: number, userId: string): Promise<Revenue | undefined> {\n    const [revenue] = await db\n      .select()\n      .from(revenues)\n      .where(and(eq(revenues.id, id), eq(revenues.userId, userId)));\n    return revenue;\n  }\n\n  async createRevenue(revenueData: NewRevenue): Promise<Revenue> {\n    const reference = `REV-${Date.now()}`;\n    const [revenue] = await db\n      .insert(revenues)\n      .values({\n        ...revenueData,\n        reference,\n      })\n      .returning();\n    return revenue;\n  }\n\n  async updateRevenue(id: number, revenueData: Partial<NewRevenue>, userId: string): Promise<Revenue> {\n    const [revenue] = await db\n      .update(revenues)\n      .set(revenueData)\n      .where(and(eq(revenues.id, id), eq(revenues.userId, userId)))\n      .returning();\n    return revenue;\n  }\n\n  async deleteRevenue(id: number, userId: string): Promise<void> {\n    await db\n      .delete(revenues)\n      .where(and(eq(revenues.id, id), eq(revenues.userId, userId)));\n  }\n\n  // Business Alerts implementation\n  async getBusinessAlerts(userId: string, unreadOnly: boolean = false): Promise<BusinessAlert[]> {\n    const condition = unreadOnly \n      ? and(eq(businessAlerts.userId, userId), eq(businessAlerts.isRead, false))\n      : eq(businessAlerts.userId, userId);\n      \n    return await db\n      .select()\n      .from(businessAlerts)\n      .where(condition)\n      .orderBy(desc(businessAlerts.createdAt));\n  }\n\n  async createBusinessAlert(alertData: NewBusinessAlert): Promise<BusinessAlert> {\n    // Check if similar alert already exists (to avoid duplicates)\n    if (alertData.entityType && alertData.entityId) {\n      const existingAlert = await db\n        .select()\n        .from(businessAlerts)\n        .where(and(\n          eq(businessAlerts.userId, alertData.userId),\n          eq(businessAlerts.type, alertData.type),\n          eq(businessAlerts.entityType, alertData.entityType),\n          eq(businessAlerts.entityId, alertData.entityId),\n          eq(businessAlerts.isResolved, false)\n        ))\n        .limit(1);\n        \n      if (existingAlert.length > 0) {\n        return existingAlert[0];\n      }\n    }\n\n    const [alert] = await db\n      .insert(businessAlerts)\n      .values({\n        ...alertData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return alert;\n  }\n\n  async markAlertAsRead(id: number, userId: string): Promise<void> {\n    await db\n      .update(businessAlerts)\n      .set({ \n        isRead: true,\n        updatedAt: new Date(),\n      })\n      .where(and(eq(businessAlerts.id, id), eq(businessAlerts.userId, userId)));\n  }\n\n  async markAlertAsResolved(id: number, userId: string): Promise<void> {\n    await db\n      .update(businessAlerts)\n      .set({ \n        isResolved: true,\n        isRead: true,\n        updatedAt: new Date(),\n      })\n      .where(and(eq(businessAlerts.id, id), eq(businessAlerts.userId, userId)));\n  }\n\n  async deleteBusinessAlert(id: number, userId: string): Promise<void> {\n    await db\n      .delete(businessAlerts)\n      .where(and(eq(businessAlerts.id, id), eq(businessAlerts.userId, userId)));\n  }\n\n  async generateStockAlerts(userId: string): Promise<BusinessAlert[]> {\n    // First, mark all existing stock alerts as resolved to refresh them\n    await db\n      .update(businessAlerts)\n      .set({ isResolved: true, updatedAt: new Date() })\n      .where(and(\n        eq(businessAlerts.userId, userId),\n        or(eq(businessAlerts.type, \"low_stock\"), eq(businessAlerts.type, \"critical_stock\")),\n        eq(businessAlerts.isResolved, false)\n      ));\n\n    // Get all products with low stock for this user\n    const lowStockProducts = await db\n      .select()\n      .from(products)\n      .where(and(\n        eq(products.userId, userId),\n        sql`${products.stock} <= ${products.alertStock}`\n      ));\n\n    const alerts: BusinessAlert[] = [];\n\n    for (const product of lowStockProducts) {\n      const stockLevel = product.stock || 0;\n      const alertLevel = product.alertStock || 10;\n      \n      let severity: string, type: string, title: string, message: string;\n      \n      if (stockLevel === 0) {\n        severity = \"critical\";\n        type = \"critical_stock\";\n        title = \"Rupture de stock\";\n        message = `Le produit \"${product.name}\" est en rupture de stock.`;\n      } else {\n        severity = stockLevel <= alertLevel / 2 ? \"high\" : \"medium\";\n        type = \"low_stock\";\n        title = \"Stock faible\";\n        message = `Le produit \"${product.name}\" a un stock faible: ${stockLevel} unité(s) restante(s).`;\n      }\n\n      // Force create new alert by bypassing duplicate check\n      const [alert] = await db\n        .insert(businessAlerts)\n        .values({\n          userId,\n          type,\n          severity,\n          title,\n          message,\n          entityType: \"product\",\n          entityId: product.id,\n          metadata: {\n            productName: product.name,\n            currentStock: stockLevel,\n            alertThreshold: alertLevel,\n          },\n          isRead: false,\n          isResolved: false,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        })\n        .returning();\n      \n      alerts.push(alert);\n    }\n\n    return alerts;\n  }\n\n  async generateOverdueInvoiceAlerts(userId: string): Promise<BusinessAlert[]> {\n    // Get all unpaid invoices with due dates in the past\n    const now = new Date();\n    const nowString = now.toISOString();\n    const overdueInvoices = await db\n      .select({\n        id: invoices.id,\n        number: invoices.number,\n        dueDate: invoices.dueDate,\n        totalTTC: invoices.totalTTC,\n        client: clients,\n      })\n      .from(invoices)\n      .leftJoin(clients, eq(invoices.clientId, clients.id))\n      .where(and(\n        eq(invoices.userId, userId),\n        or(eq(invoices.status, \"en_attente\"), eq(invoices.status, \"partiellement_reglee\")),\n        isNotNull(invoices.dueDate),\n        sql`${invoices.dueDate} < ${nowString}`\n      ));\n\n    const alerts: BusinessAlert[] = [];\n\n    for (const invoice of overdueInvoices) {\n      // Check if an alert already exists for this specific invoice\n      const existingAlert = await db\n        .select()\n        .from(businessAlerts)\n        .where(and(\n          eq(businessAlerts.userId, userId),\n          eq(businessAlerts.type, \"overdue_invoice\"),\n          eq(businessAlerts.entityType, \"invoice\"),\n          eq(businessAlerts.entityId, invoice.id),\n          eq(businessAlerts.isResolved, false)\n        ))\n        .limit(1);\n\n      // Skip if alert already exists for this invoice\n      if (existingAlert.length > 0) {\n        alerts.push(existingAlert[0]);\n        continue;\n      }\n\n      const daysPastDue = Math.floor(\n        (now.getTime() - new Date(invoice.dueDate!).getTime()) / (1000 * 60 * 60 * 24)\n      );\n      \n      const severity = daysPastDue > 30 ? \"critical\" : daysPastDue > 7 ? \"high\" : \"medium\";\n      const title = \"Facture échue\";\n      const message = `La facture ${invoice.number} de ${invoice.client?.name || \"Client inconnu\"} est échue depuis ${daysPastDue} jour(s).`;\n\n      // Create new alert only if none exists\n      const [alert] = await db\n        .insert(businessAlerts)\n        .values({\n          userId,\n          type: \"overdue_invoice\",\n          severity,\n          title,\n          message,\n          entityType: \"invoice\",\n          entityId: invoice.id,\n          metadata: {\n            invoiceNumber: invoice.number,\n            clientName: invoice.client?.name,\n            amount: invoice.totalTTC,\n            dueDate: invoice.dueDate?.toISOString(),\n            daysPastDue,\n          },\n          isRead: false,\n          isResolved: false,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        })\n        .returning();\n      \n      alerts.push(alert);\n    }\n\n    return alerts;\n  }\n\n  async cleanupResolvedAlerts(userId: string, olderThanDays: number = 30): Promise<void> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - olderThanDays);\n    \n    await db\n      .delete(businessAlerts)\n      .where(and(\n        eq(businessAlerts.userId, userId),\n        eq(businessAlerts.isResolved, true),\n        sql`${businessAlerts.updatedAt} < ${cutoffDate}`\n      ));\n  }\n\n  async markAllAlertsAsRead(userId: string): Promise<number> {\n    const result = await db\n      .update(businessAlerts)\n      .set({ \n        isRead: true, \n        updatedAt: new Date() \n      })\n      .where(and(\n        eq(businessAlerts.userId, userId),\n        eq(businessAlerts.isRead, false)\n      ))\n      .returning();\n    \n    return result.length;\n  }\n\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":80229},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"// This file now acts as the main export point for all schemas\n// All tables and relations are now organized in separate modules\n\n// Re-export everything from the modular schemas\nexport * from \"./schemas\";","size_bytes":205},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useState, useEffect } from \"react\";\nimport LoadingScreen from \"@/components/loading-screen\";\nimport LanguageSelector from \"@/components/language-selector\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport AuthPage from \"@/pages/auth\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Clients from \"@/pages/clients\";\nimport Products from \"@/pages/products\";\nimport Categories from \"@/pages/categories\";\nimport Invoices from \"@/pages/invoices\";\nimport InvoiceDetail from \"@/pages/invoice-detail\";\nimport Sales from \"@/pages/sales\";\nimport Settings from \"@/pages/settings\";\nimport Export from \"@/pages/export\";\nimport UserRegistration from \"@/pages/user-registration\";\nimport LicenseActivation from \"@/pages/license-activation\";\nimport AdminLicenses from \"@/pages/admin-licenses\";\nimport Accounting from \"@/pages/accounting\";\n\nimport AlertsPage from \"@/pages/alerts\";\nimport UserGuide from \"@/pages/user-guide\";\nimport Sidebar from \"@/components/sidebar\";\nimport TrialBanner from \"@/components/trial-banner\";\n\nfunction AppContent() {\n  const { user } = useAuth();\n  const [trialExpired, setTrialExpired] = useState(false);\n  const [trialStartTime, setTrialStartTime] = useState<number | null>(null);\n  \n  // Start trial timer when user first accesses the dashboard\n  useEffect(() => {\n    if (user && !user.licenseActivated) {\n      // Skip license activation for admin user \"Youssouphafils\"\n      if (user.firstName === \"Youssouphafils\" || user.email === \"youssouphafils@gmail.com\") {\n        return; // Admin never needs license activation\n      }\n      \n      // Check if trial was already started in localStorage\n      const storedStartTime = localStorage.getItem(`trial_start_${user.id}`);\n      let startTime = storedStartTime ? parseInt(storedStartTime) : null;\n      \n      if (!startTime) {\n        // Start new trial - but don't expire immediately, let user see dashboard\n        startTime = Date.now();\n        localStorage.setItem(`trial_start_${user.id}`, startTime.toString());\n        setTrialStartTime(startTime);\n        \n        // Set timer for 1 minute\n        const timer = setTimeout(() => {\n          setTrialExpired(true);\n        }, 60000);\n        \n        return () => clearTimeout(timer);\n      } else {\n        setTrialStartTime(startTime);\n        \n        // Check if trial should already be expired\n        const elapsed = Date.now() - startTime;\n        if (elapsed >= 60000) { // 1 minute = 60000ms\n          setTrialExpired(true);\n          return;\n        }\n        \n        // Set timer for remaining time\n        const remainingTime = 60000 - elapsed;\n        const timer = setTimeout(() => {\n          setTrialExpired(true);\n        }, remainingTime);\n        \n        return () => clearTimeout(timer);\n      }\n    }\n  }, [user]);\n\n  // Clean up trial data when user activates license\n  useEffect(() => {\n    if (user?.licenseActivated) {\n      localStorage.removeItem(`trial_start_${user.id}`);\n      setTrialExpired(false); // Reset trial state\n    }\n  }, [user?.licenseActivated, user?.id]);\n  \n  // Show license activation after trial expires (except for admin)\n  if (user && !user.licenseActivated && trialExpired && user.firstName !== \"Youssouphafils\" && user.email !== \"youssouphafils@gmail.com\") {\n    return <LicenseActivation />;\n  }\n\n  const handleActivateLicense = () => {\n    setTrialExpired(true);\n  };\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      <div className=\"flex-1 overflow-hidden content-glass\">\n        {user && !user.licenseActivated && trialStartTime && !trialExpired && user.firstName !== \"Youssouphafils\" && user.email !== \"youssouphafils@gmail.com\" && (\n          <div className=\"p-4\">\n            <TrialBanner \n              trialStartTime={trialStartTime} \n              onActivateLicense={handleActivateLicense}\n            />\n          </div>\n        )}\n        <div className=\"h-full overflow-auto\">\n          <Switch>\n            <Route path=\"/\" component={Dashboard} />\n            <Route path=\"/clients\" component={Clients} />\n            <Route path=\"/products\" component={Products} />\n            <Route path=\"/categories\" component={Categories} />\n            <Route path=\"/invoices\" component={Invoices} />\n            <Route path=\"/invoices/:id\" component={InvoiceDetail} />\n            <Route path=\"/sales\" component={Sales} />\n            <Route path=\"/accounting\" component={Accounting} />\n            <Route path=\"/settings\" component={Settings} />\n            <Route path=\"/alerts\" component={AlertsPage} />\n            <Route path=\"/export\" component={Export} />\n            <Route path=\"/user-guide\" component={UserGuide} />\n            <Route path=\"/complete-profile\" component={UserRegistration} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [showLoadingScreen, setShowLoadingScreen] = useState(() => {\n    // Check if we should show loading screen\n    return !sessionStorage.getItem('hasSeenLoading');\n  });\n  const [showLanguageSelector, setShowLanguageSelector] = useState(() => {\n    // Check if language has been selected before\n    return !localStorage.getItem('initialLanguageSelected');\n  });\n\n  // Show loading screen if not seen before\n  if (showLoadingScreen) {\n    return (\n      <LoadingScreen \n        onComplete={() => {\n          setShowLoadingScreen(false);\n          sessionStorage.setItem('hasSeenLoading', 'true');\n        }} \n      />\n    );\n  }\n\n  // Show language selector if not selected before\n  if (showLanguageSelector) {\n    return (\n      <LanguageSelector \n        onLanguageSelect={(language) => {\n          // Save the language preference\n          localStorage.setItem('initialLanguageSelected', 'true');\n          localStorage.setItem('preferredLanguage', language);\n          setShowLanguageSelector(false);\n        }} \n      />\n    );\n  }\n\n  // Wait for auth to complete before showing main app\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {/* Public routes for license management */}\n      <Route path=\"/activate\" component={LicenseActivation} />\n      <Route path=\"/admin\" component={AdminLicenses} />\n      \n      {isLoading || !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/auth\" component={AuthPage} />\n          <Route component={AuthPage} />\n        </>\n      ) : (\n        <AppContent />\n      )}\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":7254},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Beautiful gradient backgrounds */\n  --app-background: linear-gradient(135deg, hsl(210, 60%, 98%) 0%, hsl(195, 100%, 95%) 25%, hsl(180, 100%, 96%) 50%, hsl(165, 60%, 97%) 75%, hsl(150, 40%, 98%) 100%);\n  --card-background: hsla(0, 0%, 100%, 0.85);\n  --sidebar-background: hsla(210, 60%, 98%, 0.95);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n  \n  /* Beautiful dark gradient backgrounds */\n  --app-background: linear-gradient(135deg, hsl(240, 15%, 8%) 0%, hsl(235, 20%, 10%) 25%, hsl(230, 25%, 12%) 50%, hsl(225, 20%, 10%) 75%, hsl(240, 15%, 8%) 100%);\n  --card-background: hsla(240, 10%, 8%, 0.85);\n  --sidebar-background: hsla(240, 15%, 8%, 0.95);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased text-foreground;\n    background: var(--app-background);\n    background-attachment: fixed;\n    min-height: 100vh;\n  }\n  \n  /* Enhanced card styling with backdrop blur */\n  .card {\n    background: var(--card-background);\n    backdrop-filter: blur(10px);\n    border: 1px solid hsla(0, 0%, 100%, 0.2);\n    box-shadow: 0 8px 32px hsla(0, 0%, 0%, 0.1);\n  }\n  \n  .dark .card {\n    background: var(--card-background);\n    backdrop-filter: blur(10px);\n    border: 1px solid hsla(255, 255%, 255%, 0.1);\n    box-shadow: 0 8px 32px hsla(0, 0%, 0%, 0.3);\n  }\n  \n  /* Beautiful sidebar with glassmorphism effect */\n  .sidebar-glass {\n    background: var(--sidebar-background);\n    backdrop-filter: blur(15px);\n    border-right: 1px solid hsla(0, 0%, 100%, 0.2);\n    box-shadow: 4px 0 24px hsla(0, 0%, 0%, 0.1);\n  }\n  \n  .dark .sidebar-glass {\n    background: var(--sidebar-background);\n    backdrop-filter: blur(15px);\n    border-right: 1px solid hsla(255, 255%, 255%, 0.1);\n    box-shadow: 4px 0 24px hsla(0, 0%, 0%, 0.4);\n  }\n  \n  /* Content area glass effect */\n  .content-glass {\n    background: hsla(0, 0%, 100%, 0.1);\n    backdrop-filter: blur(5px);\n  }\n  \n  .dark .content-glass {\n    background: hsla(0, 0%, 0%, 0.1);\n    backdrop-filter: blur(5px);\n  }\n}\n\n/* Custom styles for the application */\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.line-clamp-3 {\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n/* Print styles - Only show the invoice content when printing */\n@media print {\n  body * {\n    visibility: hidden;\n  }\n  \n  .invoice-content, .invoice-content * {\n    visibility: visible !important;\n  }\n  \n  .invoice-content div,\n  .invoice-content p,\n  .invoice-content h1,\n  .invoice-content h2,\n  .invoice-content h3,\n  .invoice-content span,\n  .invoice-content table,\n  .invoice-content thead,\n  .invoice-content tbody,\n  .invoice-content tr,\n  .invoice-content th,\n  .invoice-content td {\n    display: revert !important;\n    visibility: visible !important;\n  }\n  \n  .invoice-content {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    padding: 20px !important;\n    margin: 0;\n    background: white !important;\n    color: black !important;\n    font-family: Arial, sans-serif !important;\n    line-height: 1.6 !important;\n  }\n  \n  /* Hide all elements that should not appear in print */\n  .print\\:hidden,\n  .sidebar,\n  .navbar,\n  .header,\n  nav,\n  header,\n  .action-buttons,\n  button,\n  .no-print {\n    display: none !important;\n    visibility: hidden !important;\n  }\n  \n  /* Ensure the invoice content is properly styled for print */\n  .invoice-content .card {\n    box-shadow: none !important;\n    border: none !important;\n    background: white !important;\n  }\n  \n  /* Force display of grid elements */\n  .invoice-content .grid {\n    display: grid !important;\n    grid-template-columns: 1fr 1fr !important;\n    gap: 40px !important;\n    margin-bottom: 40px !important;\n  }\n  \n  .invoice-content .grid-cols-1 {\n    grid-template-columns: 1fr !important;\n  }\n  \n  .invoice-content .md\\:grid-cols-2 {\n    grid-template-columns: 1fr 1fr !important;\n  }\n  \n  /* Force display of flex elements */\n  .invoice-content .flex {\n    display: flex !important;\n  }\n  \n  .invoice-content .justify-between {\n    justify-content: space-between !important;\n  }\n  \n  .invoice-content .justify-end {\n    justify-content: flex-end !important;\n  }\n  \n  .invoice-content .items-start {\n    align-items: flex-start !important;\n  }\n  \n  /* Force display of table elements */\n  .invoice-content table {\n    width: 100% !important;\n    border-collapse: collapse !important;\n    margin-bottom: 32px !important;\n    display: table !important;\n  }\n  \n  .invoice-content thead, .invoice-content tbody {\n    display: table-header-group !important;\n  }\n  \n  .invoice-content tbody {\n    display: table-row-group !important;\n  }\n  \n  .invoice-content tr {\n    display: table-row !important;\n  }\n  \n  .invoice-content th, .invoice-content td {\n    display: table-cell !important;\n    padding: 12px !important;\n    border-bottom: 1px solid #e5e7eb !important;\n  }\n  \n  .invoice-content th {\n    background-color: #f9fafb !important;\n    font-weight: bold !important;\n    text-align: left !important;\n  }\n  \n  .invoice-content .text-right {\n    text-align: right !important;\n  }\n  \n  /* Typography styles */\n  .invoice-content h1 {\n    font-size: 36px !important;\n    font-weight: bold !important;\n    margin: 0 0 8px 0 !important;\n  }\n  \n  .invoice-content h3 {\n    font-weight: bold !important;\n    margin-bottom: 12px !important;\n  }\n  \n  .invoice-content p {\n    margin: 4px 0 !important;\n  }\n  \n  /* Spacing utilities */\n  .invoice-content .mb-2 { margin-bottom: 8px !important; }\n  .invoice-content .mb-3 { margin-bottom: 12px !important; }\n  .invoice-content .mb-6 { margin-bottom: 24px !important; }\n  .invoice-content .mb-8 { margin-bottom: 32px !important; }\n  .invoice-content .space-y-2 > * + * { margin-top: 8px !important; }\n  .invoice-content .gap-8 { gap: 32px !important; }\n  .invoice-content .space-x-2 > * + * { margin-left: 8px !important; }\n  \n  /* Make text darker for better print quality */\n  .invoice-content {\n    color: #000 !important;\n  }\n  \n  .invoice-content .text-gray-600 {\n    color: #666 !important;\n  }\n  \n  .invoice-content .text-gray-700 {\n    color: #333 !important;\n  }\n  \n  .invoice-content .text-primary {\n    color: #3b82f6 !important;\n  }\n  \n  /* Ensure all content displays */\n  .invoice-content .whitespace-pre-line {\n    white-space: pre-line !important;\n  }\n  \n  .invoice-content .font-medium {\n    font-weight: 500 !important;\n  }\n  \n  .invoice-content .font-semibold {\n    font-weight: 600 !important;\n  }\n  \n  .invoice-content .font-bold {\n    font-weight: bold !important;\n  }\n  \n  /* Ensure border styles */\n  .invoice-content .border-t {\n    border-top: 2px solid #374151 !important;\n  }\n  \n  .invoice-content .pt-2 {\n    padding-top: 8px !important;\n  }\n  \n  .invoice-content .w-full {\n    width: 100% !important;\n  }\n  \n  /* Color overrides for print */\n  .invoice-content .text-yellow-600 {\n    color: #d97706 !important;\n  }\n  \n  .invoice-content .text-green-600 {\n    color: #059669 !important;\n  }\n  \n  .invoice-content .text-red-600 {\n    color: #dc2626 !important;\n  }\n  \n  /* Ensure proper page margins for printing */\n  @page {\n    margin: 1cm;\n  }\n\n  /* Show dialog content when printing */\n  [role=\"dialog\"] {\n    position: static !important;\n    transform: none !important;\n    max-width: none !important;\n    max-height: none !important;\n    overflow: visible !important;\n    background: white !important;\n    box-shadow: none !important;\n    border: none !important;\n    margin: 0 !important;\n    padding: 0 !important;\n  }\n\n  /* Hide dialog overlay and non-essential elements when printing */\n  [data-radix-popper-content-wrapper],\n  [data-overlay-container],\n  .fixed.inset-0,\n  [role=\"dialog\"] > div:first-child {\n    position: static !important;\n    background: transparent !important;\n    backdrop-filter: none !important;\n  }\n\n  /* Ensure dialog header is hidden during print */\n  [role=\"dialog\"] h2[id*=\"dialog-title\"] {\n    display: none !important;\n  }\n}\n\n/* Loading screen animations */\n@keyframes fade-in {\n  from { \n    opacity: 0; \n    transform: translateY(20px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n.animate-fade-in {\n  animation: fade-in 0.8s ease-out;\n}\n\n.animate-fade-in-delay {\n  animation: fade-in 0.8s ease-out 0.3s both;\n}\n","size_bytes":9820},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/breadcrumb.tsx":{"content":"import { ChevronRight, Home } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\ninterface BreadcrumbItem {\n  label: string;\n  href?: string;\n  icon?: React.ComponentType<any>;\n}\n\ninterface BreadcrumbProps {\n  items?: BreadcrumbItem[];\n  className?: string;\n}\n\nexport function Breadcrumb({ items, className }: BreadcrumbProps) {\n  const [location] = useLocation();\n\n  // Generate breadcrumbs automatically based on current route if no items provided\n  const generateBreadcrumbs = (): BreadcrumbItem[] => {\n    const pathSegments = location.split('/').filter(Boolean);\n    \n    const breadcrumbs: BreadcrumbItem[] = [\n      { label: \"Accueil\", href: \"/\", icon: Home }\n    ];\n\n    // Route mapping for better labels\n    const routeLabels: Record<string, string> = {\n      'clients': 'Clients',\n      'products': 'Produits',\n      'categories': 'Catégories',\n      'invoices': 'Factures',\n      'sales': 'Ventes',\n      'accounting': 'Comptabilité',\n      'settings': 'Paramètres',\n      'export': 'Exporter',\n      'admin': 'Administration'\n    };\n\n    let currentPath = '';\n    \n    pathSegments.forEach((segment, index) => {\n      currentPath += `/${segment}`;\n      const isLast = index === pathSegments.length - 1;\n      \n      // Handle dynamic routes (like /invoices/123)\n      if (isNaN(Number(segment))) {\n        breadcrumbs.push({\n          label: routeLabels[segment] || segment.charAt(0).toUpperCase() + segment.slice(1),\n          href: isLast ? undefined : currentPath\n        });\n      } else {\n        // For ID-based routes, show a generic label\n        const parentSegment = pathSegments[index - 1];\n        if (parentSegment === 'invoices') {\n          breadcrumbs.push({\n            label: `Facture #${segment}`,\n            href: isLast ? undefined : currentPath\n          });\n        } else if (parentSegment === 'clients') {\n          breadcrumbs.push({\n            label: `Client #${segment}`,\n            href: isLast ? undefined : currentPath\n          });\n        } else if (parentSegment === 'products') {\n          breadcrumbs.push({\n            label: `Produit #${segment}`,\n            href: isLast ? undefined : currentPath\n          });\n        } else {\n          breadcrumbs.push({\n            label: `#${segment}`,\n            href: isLast ? undefined : currentPath\n          });\n        }\n      }\n    });\n\n    return breadcrumbs;\n  };\n\n  const breadcrumbItems = items || generateBreadcrumbs();\n\n  // Don't show breadcrumbs for homepage\n  if (location === '/' && !items) {\n    return null;\n  }\n\n  return (\n    <nav \n      aria-label=\"Fil d'Ariane\" \n      className={cn(\"flex items-center space-x-1 text-sm text-gray-500\", className)}\n      data-testid=\"breadcrumb-nav\"\n    >\n      {breadcrumbItems.map((item, index) => {\n        const isLast = index === breadcrumbItems.length - 1;\n        const Icon = item.icon;\n\n        return (\n          <div key={index} className=\"flex items-center space-x-1\">\n            {index > 0 && (\n              <ChevronRight className=\"w-4 h-4 text-gray-400\" data-testid=\"breadcrumb-separator\" />\n            )}\n            \n            {item.href ? (\n              <Link href={item.href}>\n                <span className=\"flex items-center space-x-1 hover:text-gray-700 cursor-pointer transition-colors\" data-testid={`breadcrumb-link-${index}`}>\n                  {Icon && <Icon className=\"w-4 h-4\" />}\n                  <span>{item.label}</span>\n                </span>\n              </Link>\n            ) : (\n              <span \n                className={cn(\n                  \"flex items-center space-x-1\",\n                  isLast ? \"text-gray-900 font-medium\" : \"text-gray-500\"\n                )}\n                data-testid={`breadcrumb-current-${index}`}\n              >\n                {Icon && <Icon className=\"w-4 h-4\" />}\n                <span>{item.label}</span>\n              </span>\n            )}\n          </div>\n        );\n      })}\n    </nav>\n  );\n}\n\nexport default Breadcrumb;","size_bytes":4014},"client/src/components/business-alerts.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Separator } from '@/components/ui/separator';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Bell, \n  BellOff, \n  CheckCircle, \n  AlertCircle, \n  AlertTriangle, \n  XCircle, \n  Package, \n  FileText, \n  Users,\n  Trash2,\n  RefreshCw,\n  Settings,\n  Eye,\n  EyeOff,\n  CheckCheck\n} from 'lucide-react';\nimport { formatDistance } from 'date-fns';\nimport { fr, enUS } from 'date-fns/locale';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useTranslation } from '@/lib/i18n';\nimport { useSettings } from '@/hooks/useSettings';\nimport type { SelectBusinessAlert } from '@shared/schema';\n\ninterface BusinessAlertsProps {\n  showUnreadOnly?: boolean;\n  compact?: boolean;\n}\n\nconst severityConfig = {\n  low: {\n    icon: AlertCircle,\n    color: 'bg-blue-50 border-blue-200 dark:bg-blue-950 dark:border-blue-800',\n    badge: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',\n    textColor: 'text-blue-700 dark:text-blue-300'\n  },\n  medium: {\n    icon: AlertTriangle,\n    color: 'bg-yellow-50 border-yellow-200 dark:bg-yellow-950 dark:border-yellow-800',\n    badge: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n    textColor: 'text-yellow-700 dark:text-yellow-300'\n  },\n  high: {\n    icon: AlertTriangle,\n    color: 'bg-orange-50 border-orange-200 dark:bg-orange-950 dark:border-orange-800',\n    badge: 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200',\n    textColor: 'text-orange-700 dark:text-orange-300'\n  },\n  critical: {\n    icon: XCircle,\n    color: 'bg-red-50 border-red-200 dark:bg-red-950 dark:border-red-800',\n    badge: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',\n    textColor: 'text-red-700 dark:text-red-300'\n  }\n};\n\nconst getTypeConfig = (t: any) => ({\n  low_stock: {\n    icon: Package,\n    label: t('lowStock'),\n    color: 'text-yellow-600 dark:text-yellow-400'\n  },\n  critical_stock: {\n    icon: Package,\n    label: t('criticalStock'),\n    color: 'text-red-600 dark:text-red-400'\n  },\n  overdue_invoice: {\n    icon: FileText,\n    label: t('overdueInvoice'),\n    color: 'text-orange-600 dark:text-orange-400'\n  },\n  payment_due: {\n    icon: Users,\n    label: t('paymentDue'),\n    color: 'text-blue-600 dark:text-blue-400'\n  }\n});\n\nexport function BusinessAlerts({ showUnreadOnly = false, compact = false }: BusinessAlertsProps) {\n  const [activeTab, setActiveTab] = useState('all');\n  const [unreadFilter, setUnreadFilter] = useState(showUnreadOnly);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n  \n  const typeConfig = getTypeConfig(t);\n\n  const { data: alerts, isLoading } = useQuery<SelectBusinessAlert[]>({\n    queryKey: ['/api/alerts', unreadFilter],\n    queryFn: async () => {\n      const response = await fetch(`/api/alerts?unreadOnly=${unreadFilter}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch alerts');\n      }\n      return response.json();\n    },\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/alerts/${id}/read`, { method: 'PATCH' });\n      if (!response.ok) {\n        throw new Error('Failed to mark alert as read');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n      toast({\n        title: t(\"success\"),\n        description: t(\"markAsRead\"),\n      });\n    },\n    onError: () => {\n      toast({\n        title: t(\"error\"),\n        description: \"Impossible de marquer l'alerte comme lue\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const markAsResolvedMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/alerts/${id}/resolve`, { method: 'PATCH' });\n      if (!response.ok) {\n        throw new Error('Failed to resolve alert');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n      toast({\n        title: t(\"success\"),\n        description: \"Alerte résolue\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: t(\"error\"),\n        description: \"Impossible de résoudre l'alerte\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAlertMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/alerts/${id}`, { method: 'DELETE' });\n      if (!response.ok) {\n        throw new Error('Failed to delete alert');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n      toast({\n        title: t(\"success\"),\n        description: t(\"deleteAlert\"),\n      });\n    },\n    onError: () => {\n      toast({\n        title: t(\"error\"),\n        description: \"Impossible de supprimer l'alerte\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateStockAlertsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/alerts/generate/stock', { method: 'POST' });\n      if (!response.ok) {\n        throw new Error('Failed to generate stock alerts');\n      }\n      return response.json();\n    },\n    onSuccess: (data: { message: string }) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n      toast({\n        title: t(\"success\"),\n        description: data.message,\n      });\n    },\n    onError: () => {\n      toast({\n        title: t(\"error\"),\n        description: \"Impossible de générer les alertes de stock\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateOverdueAlertsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/alerts/generate/overdue', { method: 'POST' });\n      if (!response.ok) {\n        throw new Error('Failed to generate overdue alerts');\n      }\n      return response.json();\n    },\n    onSuccess: (data: { message: string }) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n      toast({\n        title: t(\"success\"),\n        description: data.message,\n      });\n    },\n    onError: () => {\n      toast({\n        title: t(\"error\"),\n        description: \"Impossible de générer les alertes de factures échues\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/alerts/mark-all-read', { method: 'PATCH' });\n      if (!response.ok) {\n        throw new Error('Failed to mark all alerts as read');\n      }\n      return response.json();\n    },\n    onSuccess: (data: { message: string }) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n      toast({\n        title: t(\"success\"),\n        description: data.message,\n      });\n    },\n    onError: () => {\n      toast({\n        title: t(\"error\"),\n        description: \"Impossible de marquer toutes les alertes comme lues\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const cleanupMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/alerts/cleanup', { method: 'DELETE' });\n      if (!response.ok) {\n        throw new Error('Failed to cleanup alerts');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n      toast({\n        title: t(\"success\"),\n        description: \"Alertes nettoyées avec succès\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: t(\"error\"),\n        description: \"Impossible de nettoyer les alertes\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n        <div className=\"h-24 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n        <div className=\"h-24 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n      </div>\n    );\n  }\n\n  const filteredAlerts: SelectBusinessAlert[] = alerts || [];\n  const unreadCount = filteredAlerts.filter((alert) => !alert.isRead).length;\n  const criticalCount = filteredAlerts.filter((alert) => alert.severity === 'critical').length;\n\n  const getFilteredAlerts = (filter: string): SelectBusinessAlert[] => {\n    switch (filter) {\n      case 'unread':\n        return filteredAlerts.filter((alert) => !alert.isRead);\n      case 'critical':\n        return filteredAlerts.filter((alert) => alert.severity === 'critical');\n      case 'stock':\n        return filteredAlerts.filter((alert) => \n          alert.type === 'low_stock' || alert.type === 'critical_stock'\n        );\n      case 'invoices':\n        return filteredAlerts.filter((alert) => alert.type === 'overdue_invoice');\n      default:\n        return filteredAlerts;\n    }\n  };\n\n  const renderAlert = (alert: SelectBusinessAlert) => {\n    const severity = severityConfig[alert.severity as keyof typeof severityConfig] || severityConfig.medium;\n    const alertType = typeConfig[alert.type as keyof typeof typeConfig];\n    const SeverityIcon = severity.icon;\n    const TypeIcon = alertType?.icon || AlertCircle;\n\n    return (\n      <Card key={alert.id} className={`${severity.color} transition-all hover:shadow-md`}>\n        <CardHeader className={compact ? \"pb-2\" : \"pb-4\"}>\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"flex-shrink-0\">\n                <SeverityIcon className={`h-5 w-5 ${severity.textColor}`} />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <h4 className=\"text-sm font-medium text-gray-900 dark:text-gray-100 truncate\">\n                    {alert.title}\n                  </h4>\n                  <Badge className={severity.badge}>\n                    {alert.severity}\n                  </Badge>\n                  {!alert.isRead && (\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {settings?.language === 'en' ? 'New' : 'Nouveau'}\n                    </Badge>\n                  )}\n                </div>\n                <div className=\"flex items-center space-x-2 text-xs text-gray-500 dark:text-gray-400\">\n                  <TypeIcon className=\"h-3 w-3\" />\n                  <span>{alertType?.label || alert.type}</span>\n                  <span>•</span>\n                  <span>\n                    {formatDistance(new Date(alert.createdAt!), new Date(), {\n                      addSuffix: true,\n                      locale: settings?.language === 'en' ? enUS : fr\n                    })}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              {!alert.isRead && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => markAsReadMutation.mutate(alert.id)}\n                  disabled={markAsReadMutation.isPending}\n                  data-testid={`button-mark-read-${alert.id}`}\n                >\n                  <Eye className=\"h-3 w-3\" />\n                </Button>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => markAsResolvedMutation.mutate(alert.id)}\n                disabled={markAsResolvedMutation.isPending}\n                data-testid={`button-resolve-${alert.id}`}\n              >\n                <CheckCircle className=\"h-3 w-3\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => deleteAlertMutation.mutate(alert.id)}\n                disabled={deleteAlertMutation.isPending}\n                data-testid={`button-delete-${alert.id}`}\n              >\n                <Trash2 className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        {!compact && (\n          <CardContent className=\"pt-0\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-2\">\n              {alert.message}\n            </p>\n            {alert.metadata && (\n              <div className=\"text-xs text-gray-500 dark:text-gray-400 space-y-1\">\n                {typeof alert.metadata === 'object' && alert.metadata && (\n                  <>\n                    {(alert.metadata as any).productName && (\n                      <div>{settings?.language === 'en' ? 'Product' : 'Produit'}: {(alert.metadata as any).productName}</div>\n                    )}\n                    {(alert.metadata as any).invoiceNumber && (\n                      <div>{settings?.language === 'en' ? 'Invoice' : 'Facture'}: {(alert.metadata as any).invoiceNumber}</div>\n                    )}\n                    {(alert.metadata as any).clientName && (\n                      <div>{t('client')}: {(alert.metadata as any).clientName}</div>\n                    )}\n                    {(alert.metadata as any).daysPastDue && (\n                      <div>{settings?.language === 'en' ? 'Days overdue' : 'Échéance dépassée'}: {String((alert.metadata as any).daysPastDue)} {settings?.language === 'en' ? 'day(s)' : 'jour(s)'}</div>\n                    )}\n                    {(alert.metadata as any).currentStock !== undefined && (\n                      <div>{settings?.language === 'en' ? 'Current stock' : 'Stock actuel'}: {String((alert.metadata as any).currentStock)}</div>\n                    )}\n                  </>\n                )}\n              </div>\n            )}\n          </CardContent>\n        )}\n      </Card>\n    );\n  };\n\n  if (compact) {\n    return (\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-medium\">{t('alerts')}</h3>\n          <div className=\"flex items-center space-x-2\">\n            {unreadCount > 0 && (\n              <Badge variant=\"destructive\" className=\"text-xs\">\n                {unreadCount}\n              </Badge>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setUnreadFilter(!unreadFilter)}\n              data-testid=\"button-toggle-unread-filter\"\n            >\n              {unreadFilter ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n        </div>\n        <ScrollArea className=\"h-96\">\n          <div className=\"space-y-2\">\n            {getFilteredAlerts('all').map(renderAlert)}\n            {getFilteredAlerts('all').length === 0 && (\n              <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                <Bell className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                <p>{settings?.language === 'en' ? 'No alerts' : 'Aucune alerte'}</p>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">\n            {t('alerts')}\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            {settings?.language === 'en' ? 'Monitor your stock and overdue invoices' : 'Surveillez vos stocks et factures échues'}\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          {unreadCount > 0 && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => markAllAsReadMutation.mutate()}\n              disabled={markAllAsReadMutation.isPending}\n              data-testid=\"button-mark-all-read\"\n            >\n              <CheckCheck className=\"h-4 w-4 mr-2\" />\n{t('markAllAsRead')}\n            </Button>\n          )}\n          {unreadCount > 0 && (\n            <Badge variant=\"destructive\">\n{unreadCount} {settings?.language === 'en' ? 'unread' : 'non lue(s)'}\n            </Badge>\n          )}\n          {criticalCount > 0 && (\n            <Badge variant=\"secondary\">\n{criticalCount} {settings?.language === 'en' ? 'critical' : 'critique(s)'}\n            </Badge>\n          )}\n        </div>\n      </div>\n\n      <div className=\"flex flex-wrap gap-2\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => generateStockAlertsMutation.mutate()}\n          disabled={generateStockAlertsMutation.isPending}\n          data-testid=\"button-generate-stock-alerts\"\n        >\n          <Package className=\"h-4 w-4 mr-2\" />\n{settings?.language === 'en' ? 'Check Stock' : 'Vérifier stocks'}\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => generateOverdueAlertsMutation.mutate()}\n          disabled={generateOverdueAlertsMutation.isPending}\n          data-testid=\"button-generate-overdue-alerts\"\n        >\n          <FileText className=\"h-4 w-4 mr-2\" />\n{settings?.language === 'en' ? 'Check Due Dates' : 'Vérifier échéances'}\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => cleanupMutation.mutate()}\n          disabled={cleanupMutation.isPending}\n          data-testid=\"button-cleanup-alerts\"\n        >\n          <Trash2 className=\"h-4 w-4 mr-2\" />\n{settings?.language === 'en' ? 'Cleanup' : 'Nettoyer'}\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setUnreadFilter(!unreadFilter)}\n          data-testid=\"button-toggle-filter\"\n        >\n          {unreadFilter ? (\n            <>\n              <EyeOff className=\"h-4 w-4 mr-2\" />\n{settings?.language === 'en' ? 'Show All' : 'Afficher tout'}\n            </>\n          ) : (\n            <>\n              <Eye className=\"h-4 w-4 mr-2\" />\n{settings?.language === 'en' ? 'Unread Only' : 'Non lues seulement'}\n            </>\n          )}\n        </Button>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"all\" data-testid=\"tab-all-alerts\">\n            {settings?.language === 'en' ? 'All' : 'Toutes'} ({filteredAlerts.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"unread\" data-testid=\"tab-unread-alerts\">\n            {settings?.language === 'en' ? 'Unread' : 'Non lues'} ({unreadCount})\n          </TabsTrigger>\n          <TabsTrigger value=\"critical\" data-testid=\"tab-critical-alerts\">\n            {settings?.language === 'en' ? 'Critical' : 'Critiques'} ({criticalCount})\n          </TabsTrigger>\n          <TabsTrigger value=\"stock\" data-testid=\"tab-stock-alerts\">\n            {t('stock')} ({getFilteredAlerts('stock').length})\n          </TabsTrigger>\n          <TabsTrigger value=\"invoices\" data-testid=\"tab-invoice-alerts\">\n            {settings?.language === 'en' ? 'Invoices' : 'Factures'} ({getFilteredAlerts('invoices').length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"all\" className=\"space-y-4\">\n          {getFilteredAlerts('all').map(renderAlert)}\n          {filteredAlerts.length === 0 && (\n            <div className=\"text-center py-12\">\n              <Bell className=\"h-16 w-16 mx-auto mb-4 text-gray-300 dark:text-gray-600\" />\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-2\">\n                {settings?.language === 'en' ? 'No alerts' : 'Aucune alerte'}\n              </h3>\n              <p className=\"text-gray-500 dark:text-gray-400\">\n                {settings?.language === 'en' ? 'All your alerts will appear here.' : 'Toutes vos alertes apparaîtront ici.'}\n              </p>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"unread\" className=\"space-y-4\">\n          {getFilteredAlerts('unread').map(renderAlert)}\n          {getFilteredAlerts('unread').length === 0 && (\n            <div className=\"text-center py-12\">\n              <BellOff className=\"h-16 w-16 mx-auto mb-4 text-gray-300 dark:text-gray-600\" />\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-2\">\n                {settings?.language === 'en' ? 'No unread alerts' : 'Aucune alerte non lue'}\n              </h3>\n              <p className=\"text-gray-500 dark:text-gray-400\">\n                {settings?.language === 'en' ? 'All your alerts have been read.' : 'Toutes vos alertes ont été lues.'}\n              </p>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"critical\" className=\"space-y-4\">\n          {getFilteredAlerts('critical').map(renderAlert)}\n          {getFilteredAlerts('critical').length === 0 && (\n            <div className=\"text-center py-12\">\n              <XCircle className=\"h-16 w-16 mx-auto mb-4 text-gray-300 dark:text-gray-600\" />\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-2\">\n                {settings?.language === 'en' ? 'No critical alerts' : 'Aucune alerte critique'}\n              </h3>\n              <p className=\"text-gray-500 dark:text-gray-400\">\n                {settings?.language === 'en' ? 'No critical situation detected.' : 'Aucune situation critique détectée.'}\n              </p>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"stock\" className=\"space-y-4\">\n          {getFilteredAlerts('stock').map(renderAlert)}\n          {getFilteredAlerts('stock').length === 0 && (\n            <div className=\"text-center py-12\">\n              <Package className=\"h-16 w-16 mx-auto mb-4 text-gray-300 dark:text-gray-600\" />\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-2\">\n                {settings?.language === 'en' ? 'No stock alerts' : 'Aucune alerte de stock'}\n              </h3>\n              <p className=\"text-gray-500 dark:text-gray-400\">\n                {settings?.language === 'en' ? 'All your inventory levels are good.' : 'Tous vos stocks sont à niveau.'}\n              </p>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"invoices\" className=\"space-y-4\">\n          {getFilteredAlerts('invoices').map(renderAlert)}\n          {getFilteredAlerts('invoices').length === 0 && (\n            <div className=\"text-center py-12\">\n              <FileText className=\"h-16 w-16 mx-auto mb-4 text-gray-300 dark:text-gray-600\" />\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-2\">\n                {settings?.language === 'en' ? 'No overdue invoices' : 'Aucune facture échue'}\n              </h3>\n              <p className=\"text-gray-500 dark:text-gray-400\">\n                {settings?.language === 'en' ? 'All your invoices are up to date.' : 'Toutes vos factures sont à jour.'}\n              </p>\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":23666},"client/src/components/client-search.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Check, ChevronsUpDown, Plus, User } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { type Client } from \"@shared/schema\";\n\ninterface ClientSearchProps {\n  value?: number;\n  onChange: (value: number | undefined) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  onCreateNew?: (name: string) => void;\n}\n\nexport function ClientSearch({ \n  value, \n  onChange, \n  placeholder = \"Rechercher un client...\",\n  disabled = false,\n  onCreateNew\n}: ClientSearchProps) {\n  const [open, setOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  // Debounce search query\n  useEffect(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    \n    timeoutRef.current = setTimeout(() => {\n      setDebouncedQuery(searchQuery);\n    }, 300);\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [searchQuery]);\n\n  // Fetch clients with search\n  const { data: clients = [], isLoading } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\", debouncedQuery || \"all\"],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (debouncedQuery.trim()) {\n        params.append('search', debouncedQuery.trim());\n      }\n      const response = await fetch(`/api/clients?${params.toString()}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch clients');\n      return response.json();\n    },\n    retry: false,\n  });\n\n  // Fetch selected client separately to ensure it's always available for display\n  const { data: selectedClient } = useQuery<Client>({\n    queryKey: [\"/api/clients\", value],\n    queryFn: async () => {\n      const response = await fetch(`/api/clients/${value}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch client');\n      return response.json();\n    },\n    enabled: !!value,\n    retry: false,\n  });\n\n  const handleSelect = (clientId: string) => {\n    if (clientId === \"create-new\" && onCreateNew && searchQuery.trim()) {\n      onCreateNew(searchQuery.trim());\n      setOpen(false);\n      setSearchQuery(\"\");\n      return;\n    }\n\n    const id = parseInt(clientId);\n    \n    if (!isNaN(id)) {\n      onChange(id);\n      setOpen(false);\n      setSearchQuery(\"\");\n    }\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-full justify-between\"\n          disabled={disabled}\n        >\n          {selectedClient ? (\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-4 h-4\" />\n              <span>{selectedClient.name}</span>\n              {selectedClient.company && (\n                <span className=\"text-sm text-muted-foreground\">- {selectedClient.company}</span>\n              )}\n            </div>\n          ) : (\n            <span className=\"text-muted-foreground\">{placeholder}</span>\n          )}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[400px] p-0\" align=\"start\">\n        <Command shouldFilter={false}>\n          <CommandInput \n            placeholder=\"Tapez pour rechercher...\" \n            value={searchQuery}\n            onValueChange={setSearchQuery}\n          />\n          <CommandList className=\"max-h-[200px] overflow-y-auto\">\n            {isLoading ? (\n              <CommandEmpty>Recherche en cours...</CommandEmpty>\n            ) : clients.length === 0 ? (\n              <CommandEmpty>\n                {searchQuery ? (\n                  <div className=\"text-center py-4\">\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      Aucun client trouvé pour \"{searchQuery}\"\n                    </p>\n                    {onCreateNew && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSelect(\"create-new\")}\n                        className=\"text-primary\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Créer \"{searchQuery}\"\n                      </Button>\n                    )}\n                  </div>\n                ) : (\n                  \"Aucun client trouvé\"\n                )}\n              </CommandEmpty>\n            ) : (\n              <CommandGroup>\n                {clients.map((client) => (\n                  <div\n                    key={client.id}\n                    onClick={() => handleSelect(client.id.toString())}\n                    className=\"flex items-center space-x-2 rounded-sm px-2 py-2 cursor-pointer hover:bg-accent hover:text-accent-foreground\"\n                  >\n                    <Check\n                      className={cn(\n                        \"mr-2 h-4 w-4\",\n                        value === client.id ? \"opacity-100\" : \"opacity-0\"\n                      )}\n                    />\n                    <div className=\"flex flex-col\">\n                      <div className=\"flex items-center space-x-2\">\n                        <User className=\"w-4 h-4\" />\n                        <span className=\"font-medium\">{client.name}</span>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {client.company && `${client.company} • `}\n                        {client.email}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                {searchQuery.trim() && onCreateNew && !clients.some(c => \n                  c.name.toLowerCase().includes(searchQuery.toLowerCase())\n                ) && (\n                  <div\n                    onClick={() => handleSelect(\"create-new\")}\n                    className=\"flex items-center space-x-2 rounded-sm px-2 py-2 text-primary cursor-pointer hover:bg-accent hover:text-accent-foreground\"\n                  >\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Créer \"{searchQuery.trim()}\"\n                  </div>\n                )}\n              </CommandGroup>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":6866},"client/src/components/dashboard-alerts-widget.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Link } from 'wouter';\nimport { \n  Bell, \n  BellOff, \n  AlertTriangle, \n  Package, \n  FileText,\n  ChevronRight,\n  RefreshCw\n} from 'lucide-react';\nimport { formatDistance } from 'date-fns';\nimport { fr } from 'date-fns/locale';\nimport type { SelectBusinessAlert } from '@shared/schema';\n\nconst typeConfig = {\n  low_stock: {\n    icon: Package,\n    label: 'Stock faible',\n    color: 'text-yellow-600 dark:text-yellow-400'\n  },\n  critical_stock: {\n    icon: Package,\n    label: 'Rupture de stock',\n    color: 'text-red-600 dark:text-red-400'\n  },\n  overdue_invoice: {\n    icon: FileText,\n    label: 'Facture échue',\n    color: 'text-orange-600 dark:text-orange-400'\n  },\n  payment_due: {\n    icon: FileText,\n    label: 'Paiement dû',\n    color: 'text-blue-600 dark:text-blue-400'\n  }\n};\n\nexport function DashboardAlertsWidget() {\n  const { data: alerts, isLoading, refetch, isRefetching } = useQuery<SelectBusinessAlert[]>({\n    queryKey: ['/api/alerts', true], // unreadOnly = true\n    queryFn: async () => {\n      const response = await fetch('/api/alerts?unreadOnly=true');\n      if (!response.ok) {\n        throw new Error('Failed to fetch alerts');\n      }\n      return response.json();\n    },\n    refetchInterval: 60000, // Refresh every minute\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-semibold flex items-center\">\n              <Bell className=\"h-5 w-5 mr-2\" />\n              Alertes critiques\n            </CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n            <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n            <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const filteredAlerts = alerts || [];\n  const criticalAlerts = filteredAlerts.filter(alert => \n    alert.severity === 'critical' || alert.severity === 'high'\n  );\n  const unreadCount = filteredAlerts.length;\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold flex items-center\">\n            <Bell className=\"h-5 w-5 mr-2\" />\n            Alertes métier\n            {unreadCount > 0 && (\n              <Badge variant=\"destructive\" className=\"ml-2\">\n                {unreadCount}\n              </Badge>\n            )}\n          </CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => refetch()}\n              disabled={isRefetching}\n              data-testid=\"button-refresh-alerts\"\n            >\n              <RefreshCw className={`h-4 w-4 ${isRefetching ? 'animate-spin' : ''}`} />\n            </Button>\n            <Link href=\"/alerts\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-alerts\">\n                Voir tout\n                <ChevronRight className=\"h-4 w-4 ml-1\" />\n              </Button>\n            </Link>\n          </div>\n        </div>\n        <CardDescription>\n          Surveillez vos stocks et factures échues\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {unreadCount === 0 ? (\n          <div className=\"text-center py-6\">\n            <BellOff className=\"h-12 w-12 mx-auto mb-3 text-gray-300 dark:text-gray-600\" />\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n              Aucune alerte en cours\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {/* Show critical alerts first, then limit to 5 total */}\n            {filteredAlerts\n              .sort((a, b) => {\n                // Priority: critical > high > medium > low\n                const severityOrder = { critical: 0, high: 1, medium: 2, low: 3 };\n                const aSeverity = severityOrder[a.severity as keyof typeof severityOrder] || 4;\n                const bSeverity = severityOrder[b.severity as keyof typeof severityOrder] || 4;\n                if (aSeverity !== bSeverity) return aSeverity - bSeverity;\n                // Then by creation date (newest first)\n                return new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime();\n              })\n              .slice(0, 5)\n              .map((alert) => {\n                const alertType = typeConfig[alert.type as keyof typeof typeConfig];\n                const TypeIcon = alertType?.icon || AlertTriangle;\n                const isHighPriority = alert.severity === 'critical' || alert.severity === 'high';\n\n                return (\n                  <Alert\n                    key={alert.id}\n                    className={isHighPriority ? 'border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-950' : ''}\n                  >\n                    <div className=\"flex items-start space-x-3\">\n                      <TypeIcon className={`h-4 w-4 mt-0.5 ${alertType?.color || 'text-gray-500'}`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <h4 className=\"text-sm font-medium text-gray-900 dark:text-gray-100 truncate\">\n                            {alert.title}\n                          </h4>\n                          {isHighPriority && (\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              {alert.severity}\n                            </Badge>\n                          )}\n                        </div>\n                        <AlertDescription className=\"text-xs text-gray-600 dark:text-gray-300 mb-1\">\n                          {alert.message}\n                        </AlertDescription>\n                        <div className=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-400\">\n                          <span>{alertType?.label || alert.type}</span>\n                          <span>\n                            {formatDistance(new Date(alert.createdAt!), new Date(), {\n                              addSuffix: true,\n                              locale: fr\n                            })}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Alert>\n                );\n              })}\n            \n            {unreadCount > 5 && (\n              <div className=\"text-center pt-2\">\n                <Link href=\"/alerts\">\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-xs\" data-testid=\"button-view-more-alerts\">\n                    et {unreadCount - 5} autre(s)...\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7370},"client/src/components/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\nimport { ReactNode } from \"react\";\nimport Breadcrumb from \"@/components/breadcrumb\";\n\ninterface BreadcrumbItem {\n  label: string;\n  href?: string;\n  icon?: React.ComponentType<any>;\n}\n\ninterface HeaderProps {\n  title: string | ReactNode;\n  subtitle?: string;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n  breadcrumbs?: BreadcrumbItem[];\n  showBreadcrumbs?: boolean;\n}\n\nexport default function Header({ title, subtitle, action, breadcrumbs, showBreadcrumbs = true }: HeaderProps) {\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200\">\n      {/* Breadcrumbs */}\n      {showBreadcrumbs && (\n        <div className=\"px-6 py-2 border-b border-gray-100 bg-gray-50\">\n          <Breadcrumb items={breadcrumbs} />\n        </div>\n      )}\n      \n      {/* Main Header */}\n      <div className=\"px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">{title}</h2>\n            {subtitle && (\n              <p className=\"text-sm text-gray-500\">{subtitle}</p>\n            )}\n          </div>\n          {action && (\n            <div className=\"flex items-center space-x-4\">\n              <Button onClick={action.onClick}>\n                <Plus className=\"mr-2 h-4 w-4\" />\n                {action.label}\n              </Button>\n              <div className=\"text-right\">\n                <p className=\"text-sm text-gray-500\">Dernière synchronisation</p>\n                <p className=\"text-sm font-medium text-gray-900\">Il y a 2 minutes</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1750},"client/src/components/invoice-pdf.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Download, Printer } from \"lucide-react\";\n\ninterface InvoicePDFProps {\n  invoice: any; // Full invoice with items and client\n  user?: any; // User information for company details\n}\n\nexport default function InvoicePDF({ invoice, user }: InvoicePDFProps) {\n  const formatCurrency = (amount: string | number) => {\n    const userSettings = JSON.parse(localStorage.getItem('userSettings') || '{\"currency\":\"XOF\"}');\n    const currency = userSettings.currency || 'XOF';\n    \n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    \n    if (currency === 'XOF') {\n      return `${numAmount.toLocaleString('fr-FR')} F CFA`;\n    } else if (currency === 'GHS') {\n      return `GH₵ ${numAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n    }\n    \n    // Fallback pour XOF par défaut\n    return `${numAmount.toLocaleString('fr-FR')} F CFA`;\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('fr-FR');\n  };\n\n  const getPaymentMethodLabel = (paymentMethod: string) => {\n    const methods = {\n      cash: \"💰 Espèces\",\n      bank_transfer: \"🏦 Virement bancaire\", \n      check: \"💳 Chèque\",\n      card: \"💳 Carte bancaire\",\n      mobile_money: \"📱 Mobile Money\"\n    };\n    return methods[paymentMethod as keyof typeof methods] || paymentMethod;\n  };\n\n  const handlePrint = () => {\n    // Store original title\n    const originalTitle = document.title;\n    \n    // Change page title for print\n    document.title = `Facture ${invoice?.number || 'UNKNOWN'}`;\n    \n    // Open print dialog\n    window.print();\n    \n    // Restore original title after a short delay\n    setTimeout(() => {\n      document.title = originalTitle;\n    }, 100);\n  };\n\n  const handleDownloadPDF = async () => {\n    try {\n      // Dynamically import jsPDF and html2canvas to avoid SSR issues\n      const { default: jsPDF } = await import('jspdf');\n      const { default: html2canvas } = await import('html2canvas');\n      \n      // Get the invoice content element\n      const element = document.querySelector('.invoice-content') as HTMLElement;\n      if (!element) {\n        console.error(\"Invoice content element not found\");\n        alert(\"Erreur: Contenu de la facture non trouvé\");\n        return;\n      }\n\n      // Hide action buttons temporarily for cleaner PDF\n      const actionButtons = element.parentElement?.querySelector('.print\\\\:hidden') as HTMLElement;\n      const originalDisplay = actionButtons?.style.display;\n      if (actionButtons) {\n        actionButtons.style.display = 'none';\n      }\n      \n      // Wait a moment for styles to apply\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      // Generate canvas from HTML with better options\n      const canvas = await html2canvas(element, {\n        scale: 1.5,\n        useCORS: true,\n        allowTaint: true,\n        backgroundColor: '#ffffff',\n        logging: false,\n        removeContainer: true,\n        imageTimeout: 15000,\n        onclone: (clonedDoc) => {\n          // Remove any remaining print-hidden elements in the clone\n          const printHiddenElements = clonedDoc.querySelectorAll('.print\\\\:hidden');\n          printHiddenElements.forEach(el => el.remove());\n        }\n      });\n      \n      // Restore action buttons\n      if (actionButtons && originalDisplay !== undefined) {\n        actionButtons.style.display = originalDisplay;\n      }\n      \n      // Create PDF with proper dimensions\n      const pdf = new jsPDF({\n        orientation: 'portrait',\n        unit: 'mm',\n        format: 'a4',\n      });\n      \n      const pageWidth = pdf.internal.pageSize.getWidth();\n      const pageHeight = pdf.internal.pageSize.getHeight();\n      const margin = 10;\n      const contentWidth = pageWidth - (2 * margin);\n      \n      // Calculate dimensions\n      const imgWidth = contentWidth;\n      const imgHeight = (canvas.height * imgWidth) / canvas.width;\n      \n      // Add the image to PDF\n      const imgData = canvas.toDataURL('image/png', 0.95);\n      \n      if (imgHeight <= pageHeight - (2 * margin)) {\n        // Single page\n        pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight);\n      } else {\n        // Multiple pages - use a simpler approach\n        pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight);\n        \n        // If content is too long, it will be cut off, but this is simpler and more reliable\n        // For very long invoices, users can use the print function instead\n      }\n      \n      // Generate filename with current date\n      const now = new Date();\n      const dateStr = now.toLocaleDateString('fr-FR').replace(/\\//g, '-');\n      const timeStr = now.toLocaleTimeString('fr-FR').replace(/:/g, '-');\n      const filename = `Facture_${invoice.number}_${dateStr}_${timeStr}.pdf`;\n      \n      // Save the PDF\n      pdf.save(filename);\n      \n      console.log('PDF généré avec succès:', filename);\n      \n    } catch (error) {\n      console.error('Erreur lors de la génération du PDF:', error);\n      alert(`Erreur lors de la génération du PDF: ${error instanceof Error ? error.message : 'Erreur inconnue'}. Veuillez réessayer.`);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      {/* Action Buttons */}\n      <div className=\"flex justify-end space-x-2 mb-6 print:hidden\">\n        <Button variant=\"outline\" onClick={handlePrint}>\n          <Printer className=\"w-4 h-4 mr-2\" />\n          Imprimer\n        </Button>\n        <Button onClick={handleDownloadPDF}>\n          <Download className=\"w-4 h-4 mr-2\" />\n          Télécharger PDF\n        </Button>\n      </div>\n\n      {/* Invoice Content */}\n      <Card className=\"print:shadow-none print:border-none invoice-content\">\n        <CardContent className=\"p-8\">\n          {/* Header */}\n          <div className=\"flex justify-between items-start mb-8\">\n            <div className=\"flex items-start space-x-4\">\n\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">FACTURE</h1>\n                <p className=\"text-lg text-gray-600\">{invoice.number}</p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold text-primary mb-2\">\n                {user?.company || `${user?.firstName || ''} ${user?.lastName || ''}`.trim() || 'Mon Entreprise'}\n              </div>\n              <div className=\"text-sm text-gray-600\">\n                {user?.address && (\n                  <p className=\"whitespace-pre-line\">{user.address}</p>\n                )}\n                {user?.email && <p>Email: {user.email}</p>}\n                {user?.phone && <p>Tél: {user.phone}</p>}\n                {user?.businessType && <p>Activité: {user.businessType}</p>}\n              </div>\n            </div>\n          </div>\n\n          {/* Invoice Info and Client */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\">\n            <div>\n              <h3 className=\"font-semibold text-gray-900 mb-3\">Facturé à :</h3>\n              <div className=\"text-gray-700\">\n                <p className=\"font-medium\">{invoice.client?.name}</p>\n                {invoice.client?.company && <p>{invoice.client.company}</p>}\n                {invoice.client?.email && <p>{invoice.client.email}</p>}\n                {invoice.client?.phone && <p>{invoice.client.phone}</p>}\n                {invoice.client?.address && (\n                  <p className=\"whitespace-pre-line\">{invoice.client.address}</p>\n                )}\n              </div>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-gray-900 mb-3\">Détails de la facture :</h3>\n              <div className=\"space-y-2 text-gray-700\">\n                <div className=\"flex justify-between\">\n                  <span>Date d'émission :</span>\n                  <span>{invoice.createdAt && formatDate(invoice.createdAt)}</span>\n                </div>\n                {invoice.dueDate && (\n                  <div className=\"flex justify-between\">\n                    <span>Date d'échéance :</span>\n                    <span>{formatDate(invoice.dueDate)}</span>\n                  </div>\n                )}\n                <div className=\"flex justify-between\">\n                  <span>Statut :</span>\n                  <span className={`font-medium ${\n                    invoice.status === 'payee' ? 'text-green-600' :\n                    invoice.status === 'en_attente' ? 'text-yellow-600' :\n                    'text-red-600'\n                  }`}>\n                    {invoice.status === 'payee' ? 'Payée' :\n                     invoice.status === 'en_attente' ? 'En attente' :\n                     invoice.status === 'en_retard' ? 'En retard' :\n                     invoice.status === 'annulee' ? 'Annulée' :\n                     invoice.status === 'brouillon' ? 'Brouillon' :\n                     invoice.status === 'envoyee' ? 'Envoyée' :\n                     'Statut inconnu'}\n                  </span>\n                </div>\n                {invoice.paymentMethod && (\n                  <div className=\"flex justify-between\">\n                    <span>Moyen de paiement :</span>\n                    <span className=\"font-medium text-gray-900\">\n                      {getPaymentMethodLabel(invoice.paymentMethod)}\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <Separator className=\"mb-8\" />\n\n          {/* Items Table */}\n          <div className=\"mb-8\">\n            <h3 className=\"font-semibold text-gray-900 mb-4\">Articles</h3>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full border-collapse border border-gray-300\">\n                <thead>\n                  <tr className=\"bg-gray-50\">\n                    <th className=\"border border-gray-300 px-4 py-3 text-left font-medium text-gray-900\">\n                      Description\n                    </th>\n                    <th className=\"border border-gray-300 px-4 py-3 text-center font-medium text-gray-900\">\n                      Quantité\n                    </th>\n                    <th className=\"border border-gray-300 px-4 py-3 text-right font-medium text-gray-900\">\n                      Prix unitaire\n                    </th>\n                    <th className=\"border border-gray-300 px-4 py-3 text-right font-medium text-gray-900\">\n                      Total\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {invoice.items?.map((item: any, index: number) => (\n                    <tr key={index}>\n                      <td className=\"border border-gray-300 px-4 py-3 text-gray-900\">\n                        {item.productName}\n                      </td>\n                      <td className=\"border border-gray-300 px-4 py-3 text-center text-gray-900\">\n                        {item.quantity}\n                      </td>\n                      <td className=\"border border-gray-300 px-4 py-3 text-right text-gray-900\">\n                        {formatCurrency(item.priceHT)}\n                      </td>\n                      <td className=\"border border-gray-300 px-4 py-3 text-right font-medium text-gray-900\">\n                        {formatCurrency(item.totalHT)}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Totals */}\n          <div className=\"flex justify-end mb-8\">\n            <div className=\"w-full max-w-sm space-y-2\">\n              <div className=\"flex justify-between text-gray-700\">\n                <span>Sous-total :</span>\n                <span>{formatCurrency(invoice.totalHT)}</span>\n              </div>\n              <div className=\"flex justify-between text-gray-700\">\n                <span>TVA ({invoice.tvaRate}%) :</span>\n                <span>{formatCurrency(invoice.totalTVA)}</span>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between text-lg font-semibold text-gray-900\">\n                <span>Total :</span>\n                <span>{formatCurrency(invoice.totalTTC)}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Notes */}\n          {invoice.notes && (\n            <div className=\"mb-8\">\n              <h3 className=\"font-semibold text-gray-900 mb-3\">Notes :</h3>\n              <p className=\"text-gray-700 whitespace-pre-line\">{invoice.notes}</p>\n            </div>\n          )}\n\n          {/* Footer */}\n          <Separator className=\"mb-6\" />\n          <div className=\"text-center text-sm text-gray-500\">\n            <p>Merci pour votre confiance !</p>\n            {(user?.email || user?.phone) && (\n              <p className=\"mt-2\">\n                Pour toute question concernant cette facture, contactez-nous :\n                {user?.email && (\n                  <span className=\"block mt-1\">Email : {user.email}</span>\n                )}\n                {user?.phone && (\n                  <span className=\"block mt-1\">Téléphone : {user.phone}</span>\n                )}\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13486},"client/src/components/language-selector.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Globe, Check } from \"lucide-react\";\nimport { languages } from \"@/lib/i18n\";\n\ninterface LanguageSelectorProps {\n  onLanguageSelect: (language: \"fr\" | \"en\") => void;\n}\n\nexport default function LanguageSelector({ onLanguageSelect }: LanguageSelectorProps) {\n  const [selectedLanguage, setSelectedLanguage] = useState<\"fr\" | \"en\">(\"fr\");\n\n  const handleConfirm = () => {\n    onLanguageSelect(selectedLanguage);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-xl border-0\">\n          <CardHeader className=\"text-center pb-4\">\n            <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Globe className=\"text-white text-2xl\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-gray-900\">\n              YGestion\n            </CardTitle>\n            <p className=\"text-gray-600 mt-2\">\n              {selectedLanguage === 'fr' \n                ? 'Choisissez votre langue préférée' \n                : 'Choose your preferred language'\n              }\n            </p>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            <div className=\"space-y-3\">\n              <label className=\"text-sm font-medium text-gray-700\">\n                {selectedLanguage === 'fr' ? 'Langue' : 'Language'}\n              </label>\n              <Select value={selectedLanguage} onValueChange={(value: \"fr\" | \"en\") => setSelectedLanguage(value)}>\n                <SelectTrigger className=\"h-12\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {languages.map((language) => (\n                    <SelectItem key={language.value} value={language.value}>\n                      <div className=\"flex items-center gap-3\">\n                        <span className=\"text-2xl\">{language.value === 'fr' ? '🇫🇷' : '🇺🇸'}</span>\n                        <span>{language.label}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <p className=\"text-sm text-blue-800\">\n                {selectedLanguage === 'fr' \n                  ? 'Cette langue sera utilisée pour toute l\\'interface de l\\'application. Vous pourrez la modifier plus tard dans les paramètres.'\n                  : 'This language will be used for the entire application interface. You can change it later in the settings.'\n                }\n              </p>\n            </div>\n\n            <Button \n              onClick={handleConfirm}\n              className=\"w-full h-12 text-lg font-medium\"\n              size=\"lg\"\n            >\n              <Check className=\"w-5 h-5 mr-2\" />\n              {selectedLanguage === 'fr' ? 'Continuer' : 'Continue'}\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3423},"client/src/components/loading-screen.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { BarChart3 } from \"lucide-react\";\nimport { useSettings } from \"@/hooks/useSettings\";\nimport { useTranslation } from \"@/lib/i18n\";\n\ninterface LoadingScreenProps {\n  onComplete: () => void;\n}\n\nexport default function LoadingScreen({ onComplete }: LoadingScreenProps) {\n  const [progress, setProgress] = useState(0);\n  const [isComplete, setIsComplete] = useState(false);\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n\n  useEffect(() => {\n    // Simulate loading progress over 10 seconds\n    const totalDuration = 10000; // 10 seconds\n    const intervalTime = 100; // Update every 100ms\n    const totalSteps = totalDuration / intervalTime;\n    let currentStep = 0;\n\n    const progressInterval = setInterval(() => {\n      currentStep++;\n      const baseProgress = (currentStep / totalSteps) * 100;\n      // Add some randomness for more natural feel\n      const randomOffset = Math.random() * 3 - 1.5; // Random between -1.5 and 1.5\n      const newProgress = Math.min(100, Math.max(0, baseProgress + randomOffset));\n      \n      setProgress(newProgress);\n\n      if (currentStep >= totalSteps) {\n        clearInterval(progressInterval);\n        setProgress(100);\n        // Complete after showing 100% for a moment\n        setTimeout(() => {\n          setIsComplete(true);\n          setTimeout(onComplete, 500);\n        }, 500);\n      }\n    }, intervalTime);\n\n    return () => clearInterval(progressInterval);\n  }, [onComplete]);\n\n  return (\n    <div className={`fixed inset-0 bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center z-50 transition-opacity duration-500 ${isComplete ? 'opacity-0' : 'opacity-100'}`}>\n      <div className=\"text-center\">\n        {/* Ultra Professional Loading Animation */}\n        <div className=\"mb-8 relative\">\n          {/* Central Hub */}\n          <div className=\"w-32 h-32 mx-auto relative flex items-center justify-center\">\n            {/* Core Orb */}\n            <div className=\"w-16 h-16 relative\">\n              <div className=\"absolute inset-0 bg-gradient-to-br from-blue-400 via-indigo-500 to-purple-600 rounded-full shadow-2xl animate-pulse\"></div>\n              <div className=\"absolute inset-2 bg-white rounded-full flex items-center justify-center\">\n                <div className=\"w-6 h-6 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full animate-bounce\"></div>\n              </div>\n            </div>\n            \n            {/* Orbital Rings */}\n            <div className=\"absolute inset-0 border-2 border-blue-300/40 rounded-full animate-spin\" style={{ animationDuration: '4s' }}></div>\n            <div className=\"absolute inset-2 border border-indigo-400/30 rounded-full animate-spin\" style={{ animationDuration: '3s', animationDirection: 'reverse' }}></div>\n            \n            {/* Floating Data Points */}\n            <div className=\"absolute w-3 h-3 bg-blue-400 rounded-full shadow-lg animate-bounce\" style={{ top: '10%', left: '15%', animationDelay: '0s', animationDuration: '2s' }}></div>\n            <div className=\"absolute w-2 h-2 bg-indigo-500 rounded-full shadow-lg animate-bounce\" style={{ top: '80%', right: '20%', animationDelay: '0.5s', animationDuration: '2.2s' }}></div>\n            <div className=\"absolute w-2.5 h-2.5 bg-purple-500 rounded-full shadow-lg animate-bounce\" style={{ bottom: '15%', left: '25%', animationDelay: '1s', animationDuration: '1.8s' }}></div>\n            <div className=\"absolute w-2 h-2 bg-cyan-400 rounded-full shadow-lg animate-bounce\" style={{ top: '25%', right: '10%', animationDelay: '1.5s', animationDuration: '2.5s' }}></div>\n          </div>\n          \n          {/* Outer Energy Rings */}\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"w-48 h-48 border border-blue-200/20 rounded-full animate-ping\" style={{ animationDuration: '3s' }}></div>\n          </div>\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"w-56 h-56 border border-indigo-200/15 rounded-full animate-ping\" style={{ animationDuration: '4s', animationDelay: '1s' }}></div>\n          </div>\n          \n          {/* Connecting Lines Animation */}\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"w-40 h-40 relative\">\n              <div className=\"absolute top-0 left-1/2 w-0.5 h-8 bg-gradient-to-b from-blue-400 to-transparent animate-pulse\" style={{ animationDelay: '0.5s' }}></div>\n              <div className=\"absolute bottom-0 left-1/2 w-0.5 h-8 bg-gradient-to-t from-indigo-400 to-transparent animate-pulse\" style={{ animationDelay: '1s' }}></div>\n              <div className=\"absolute left-0 top-1/2 h-0.5 w-8 bg-gradient-to-r from-purple-400 to-transparent animate-pulse\" style={{ animationDelay: '1.5s' }}></div>\n              <div className=\"absolute right-0 top-1/2 h-0.5 w-8 bg-gradient-to-l from-cyan-400 to-transparent animate-pulse\" style={{ animationDelay: '2s' }}></div>\n            </div>\n          </div>\n        </div>\n\n        {/* App Title */}\n        <h1 className=\"text-4xl font-bold text-gray-800 mb-2 animate-fade-in\">\n          YGestion\n        </h1>\n        <p className=\"text-lg text-gray-600 mb-8 animate-fade-in-delay\">\n          {settings?.language === 'en' ? 'Simplified business management' : 'Gestion d\\'entreprise simplifiée'}\n        </p>\n\n        {/* Progress Bar */}\n        <div className=\"w-64 mx-auto\">\n          <div className=\"bg-gray-200 rounded-full h-2 mb-4\">\n            <div \n              className=\"bg-primary h-2 rounded-full transition-all duration-300 ease-out\"\n              style={{ width: `${Math.min(progress, 100)}%` }}\n            ></div>\n          </div>\n          <p className=\"text-sm text-gray-500\">\n            {settings?.language === 'en' ? 'Loading...' : 'Chargement...'} {Math.floor(Math.min(progress, 100))}%\n          </p>\n        </div>\n\n        {/* Loading dots */}\n        <div className=\"flex justify-center mt-6 space-x-1\">\n          <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '0ms' }}></div>\n          <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '150ms' }}></div>\n          <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '300ms' }}></div>\n        </div>\n      </div>\n\n\n    </div>\n  );\n}","size_bytes":6470},"client/src/components/loading-skeletons.tsx":{"content":"import { Skeleton } from \"@/components/ui/skeleton\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\n\n// Dashboard Skeleton\nexport function DashboardSkeleton() {\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between px-6 py-4 border-b bg-background\">\n        <div className=\"flex items-center space-x-4 mb-4 sm:mb-0\">\n          <Skeleton className=\"h-6 w-32\" />\n          <Skeleton className=\"h-4 w-64\" />\n        </div>\n        <Skeleton className=\"h-10 w-24\" />\n      </div>\n      \n      <div className=\"flex-1 overflow-auto p-6 space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i}>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <Skeleton className=\"h-4 w-24\" />\n                <Skeleton className=\"h-4 w-4\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-8 w-20 mb-2\" />\n                <Skeleton className=\"h-3 w-32\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Chart Skeleton */}\n          <Card>\n            <CardHeader>\n              <Skeleton className=\"h-5 w-36\" />\n            </CardHeader>\n            <CardContent>\n              <Skeleton className=\"h-64 w-full\" />\n            </CardContent>\n          </Card>\n\n          {/* Recent Invoices */}\n          <Card>\n            <CardHeader>\n              <Skeleton className=\"h-5 w-32\" />\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {Array.from({ length: 4 }).map((_, i) => (\n                <div key={i} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"space-y-2 flex-1\">\n                    <Skeleton className=\"h-4 w-24\" />\n                    <Skeleton className=\"h-3 w-32\" />\n                  </div>\n                  <div className=\"text-right space-y-2\">\n                    <Skeleton className=\"h-4 w-16\" />\n                    <Skeleton className=\"h-5 w-12\" />\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Invoice List Skeleton\nexport function InvoiceListSkeleton() {\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between px-6 py-4 border-b bg-background\">\n        <div className=\"flex items-center space-x-4 mb-4 sm:mb-0\">\n          <Skeleton className=\"h-6 w-24\" />\n          <Skeleton className=\"h-4 w-48\" />\n        </div>\n        <Skeleton className=\"h-10 w-32\" />\n      </div>\n      \n      <div className=\"flex-1 overflow-auto p-6\">\n        {/* Search and Filters */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <Skeleton className=\"h-10 flex-1\" />\n          <Skeleton className=\"h-10 w-32\" />\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n\n        {/* Invoice Cards */}\n        <div className=\"grid gap-4\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-5 w-32\" />\n                    <Skeleton className=\"h-4 w-24\" />\n                  </div>\n                  <div className=\"text-right space-y-2\">\n                    <Skeleton className=\"h-6 w-20\" />\n                    <Skeleton className=\"h-5 w-16\" />\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-4 w-28\" />\n                    <Skeleton className=\"h-3 w-36\" />\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Skeleton className=\"h-8 w-8\" />\n                    <Skeleton className=\"h-8 w-8\" />\n                    <Skeleton className=\"h-8 w-8\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Pagination Skeleton */}\n        <div className=\"flex justify-center mt-6\">\n          <div className=\"flex space-x-2\">\n            <Skeleton className=\"h-10 w-10\" />\n            <Skeleton className=\"h-10 w-10\" />\n            <Skeleton className=\"h-10 w-10\" />\n            <Skeleton className=\"h-10 w-10\" />\n            <Skeleton className=\"h-10 w-10\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Client List Skeleton\nexport function ClientListSkeleton() {\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between px-6 py-4 border-b bg-background\">\n        <div className=\"flex items-center space-x-4 mb-4 sm:mb-0\">\n          <Skeleton className=\"h-6 w-20\" />\n          <Skeleton className=\"h-4 w-40\" />\n        </div>\n        <Skeleton className=\"h-10 w-28\" />\n      </div>\n      \n      <div className=\"flex-1 overflow-auto p-6\">\n        {/* Search Bar */}\n        <div className=\"mb-6\">\n          <Skeleton className=\"h-10 w-full max-w-sm\" />\n        </div>\n\n        {/* Client Cards */}\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {Array.from({ length: 9 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"space-y-2 flex-1\">\n                    <Skeleton className=\"h-5 w-32\" />\n                    <Skeleton className=\"h-4 w-48\" />\n                    <Skeleton className=\"h-4 w-36\" />\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Skeleton className=\"h-8 w-8\" />\n                    <Skeleton className=\"h-8 w-8\" />\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-28\" />\n                  <Skeleton className=\"h-4 w-24\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Product List Skeleton\nexport function ProductListSkeleton() {\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between px-6 py-4 border-b bg-background\">\n        <div className=\"flex items-center space-x-4 mb-4 sm:mb-0\">\n          <Skeleton className=\"h-6 w-20\" />\n          <Skeleton className=\"h-4 w-44\" />\n        </div>\n        <Skeleton className=\"h-10 w-32\" />\n      </div>\n      \n      <div className=\"flex-1 overflow-auto p-6\">\n        {/* Search and Filters */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <Skeleton className=\"h-10 flex-1\" />\n          <Skeleton className=\"h-10 w-40\" />\n        </div>\n\n        {/* Product Cards */}\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n          {Array.from({ length: 12 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"space-y-2 flex-1\">\n                    <Skeleton className=\"h-5 w-28\" />\n                    <Skeleton className=\"h-4 w-36\" />\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Skeleton className=\"h-8 w-8\" />\n                    <Skeleton className=\"h-8 w-8\" />\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <Skeleton className=\"h-4 w-16\" />\n                    <Skeleton className=\"h-4 w-20\" />\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <Skeleton className=\"h-4 w-12\" />\n                    <Skeleton className=\"h-4 w-16\" />\n                  </div>\n                  <Skeleton className=\"h-5 w-12\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Sales List Skeleton\nexport function SalesListSkeleton() {\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between px-6 py-4 border-b bg-background\">\n        <div className=\"flex items-center space-x-4 mb-4 sm:mb-0\">\n          <Skeleton className=\"h-6 w-20\" />\n          <Skeleton className=\"h-4 w-40\" />\n        </div>\n        <Skeleton className=\"h-10 w-28\" />\n      </div>\n      \n      <div className=\"flex-1 overflow-auto p-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          {Array.from({ length: 3 }).map((_, i) => (\n            <Card key={i}>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <Skeleton className=\"h-4 w-24\" />\n                <Skeleton className=\"h-4 w-4\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-8 w-20\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Sales Table */}\n        <Card>\n          <CardHeader>\n            <Skeleton className=\"h-5 w-32\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {Array.from({ length: 8 }).map((_, i) => (\n                <div key={i} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"space-y-2 flex-1\">\n                    <Skeleton className=\"h-4 w-32\" />\n                    <Skeleton className=\"h-3 w-24\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-4 w-20\" />\n                    <Skeleton className=\"h-3 w-16\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-4 w-16\" />\n                    <Skeleton className=\"h-3 w-12\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\n// Form Skeleton (for modals and forms)\nexport function FormSkeleton() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-4 w-24\" />\n        <Skeleton className=\"h-10 w-full\" />\n      </div>\n      \n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-4 w-20\" />\n        <Skeleton className=\"h-10 w-full\" />\n      </div>\n      \n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-4 w-28\" />\n        <Skeleton className=\"h-24 w-full\" />\n      </div>\n      \n      <div className=\"flex justify-end space-x-4\">\n        <Skeleton className=\"h-10 w-20\" />\n        <Skeleton className=\"h-10 w-24\" />\n      </div>\n    </div>\n  );\n}\n\n// Invoice Form Skeleton (detailed for invoice creation)\nexport function InvoiceFormSkeleton() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Client Selection */}\n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-4 w-20\" />\n        <Skeleton className=\"h-10 w-full\" />\n      </div>\n      \n      {/* Status and Payment Method Row */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Skeleton className=\"h-4 w-16\" />\n          <Skeleton className=\"h-10 w-full\" />\n        </div>\n        <div className=\"space-y-2\">\n          <Skeleton className=\"h-4 w-24\" />\n          <Skeleton className=\"h-10 w-full\" />\n        </div>\n      </div>\n      \n      {/* TVA and Due Date Row */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Skeleton className=\"h-4 w-20\" />\n          <Skeleton className=\"h-10 w-full\" />\n        </div>\n        <div className=\"space-y-2\">\n          <Skeleton className=\"h-4 w-28\" />\n          <Skeleton className=\"h-10 w-full\" />\n        </div>\n      </div>\n      \n      {/* Items Section */}\n      <div className=\"space-y-4\">\n        <Skeleton className=\"h-5 w-32\" />\n        {Array.from({ length: 2 }).map((_, i) => (\n          <div key={i} className=\"border rounded-lg p-4 space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Skeleton className=\"h-4 w-20\" />\n                <Skeleton className=\"h-10 w-full\" />\n              </div>\n              <div className=\"space-y-2\">\n                <Skeleton className=\"h-4 w-16\" />\n                <Skeleton className=\"h-10 w-full\" />\n              </div>\n              <div className=\"space-y-2\">\n                <Skeleton className=\"h-4 w-20\" />\n                <Skeleton className=\"h-10 w-full\" />\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      {/* Total Section */}\n      <div className=\"border-t pt-4 space-y-2\">\n        <div className=\"flex justify-between\">\n          <Skeleton className=\"h-4 w-16\" />\n          <Skeleton className=\"h-4 w-20\" />\n        </div>\n        <div className=\"flex justify-between\">\n          <Skeleton className=\"h-4 w-12\" />\n          <Skeleton className=\"h-4 w-16\" />\n        </div>\n        <div className=\"flex justify-between\">\n          <Skeleton className=\"h-5 w-16\" />\n          <Skeleton className=\"h-5 w-24\" />\n        </div>\n      </div>\n      \n      {/* Notes */}\n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-4 w-20\" />\n        <Skeleton className=\"h-20 w-full\" />\n      </div>\n      \n      {/* Action Buttons */}\n      <div className=\"flex justify-end space-x-4\">\n        <Skeleton className=\"h-10 w-20\" />\n        <Skeleton className=\"h-10 w-32\" />\n      </div>\n    </div>\n  );\n}\n\n// Loading Button Component\nexport function LoadingButton({ \n  children, \n  isLoading, \n  ...props \n}: { \n  children: React.ReactNode; \n  isLoading: boolean; \n  [key: string]: any; \n}) {\n  return (\n    <button {...props} disabled={isLoading}>\n      {isLoading ? (\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current\"></div>\n          <span>Chargement...</span>\n        </div>\n      ) : (\n        children\n      )}\n    </button>\n  );\n}\n\n// Table Skeleton\nexport function TableSkeleton({ rows = 5, columns = 4 }: { rows?: number; columns?: number }) {\n  return (\n    <div className=\"space-y-4\">\n      {/* Table Header */}\n      <div className=\"flex space-x-4 pb-2 border-b\">\n        {Array.from({ length: columns }).map((_, i) => (\n          <Skeleton key={i} className=\"h-4 w-24 flex-1\" />\n        ))}\n      </div>\n      \n      {/* Table Rows */}\n      {Array.from({ length: rows }).map((_, i) => (\n        <div key={i} className=\"flex space-x-4 py-3\">\n          {Array.from({ length: columns }).map((_, j) => (\n            <Skeleton key={j} className=\"h-4 w-20 flex-1\" />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}","size_bytes":15656},"client/src/components/product-combobox.tsx":{"content":"import { useState } from \"react\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { type Product } from \"@shared/schema\";\n\ninterface ProductComboboxProps {\n  products: Product[];\n  value?: number;\n  onChange: (value: number | undefined) => void;\n  placeholder?: string;\n  disabled?: boolean;\n}\n\nexport function ProductCombobox({ \n  products, \n  value, \n  onChange, \n  placeholder = \"Sélectionner un produit...\",\n  disabled = false \n}: ProductComboboxProps) {\n  const [open, setOpen] = useState(false);\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const selectedProduct = products.find((product) => product.id === value);\n\n  const filteredProducts = products.filter((product) =>\n    product.name.toLowerCase().includes(searchValue.toLowerCase()) ||\n    product.id.toString().includes(searchValue)\n  );\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-full justify-between\"\n          disabled={disabled}\n        >\n          {selectedProduct ? selectedProduct.name : placeholder}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-full p-0\">\n        <Command>\n          <CommandInput \n            placeholder=\"Rechercher un produit...\" \n            value={searchValue}\n            onValueChange={setSearchValue}\n          />\n          <CommandList>\n            <CommandEmpty>Aucun produit trouvé.</CommandEmpty>\n            <CommandGroup>\n              {filteredProducts.map((product) => (\n                <CommandItem\n                  key={product.id}\n                  value={product.id.toString()}\n                  onSelect={(currentValue) => {\n                    const productId = parseInt(currentValue);\n                    onChange(productId === value ? undefined : productId);\n                    setOpen(false);\n                    setSearchValue(\"\");\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === product.id ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  <div className=\"flex flex-col\">\n                    <span>{product.name}</span>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {Number(product.priceHT).toLocaleString('fr-FR')} XOF HT\n                      {product.stock !== undefined && ` • Stock: ${product.stock}`}\n                    </span>\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":3164},"client/src/components/product-search.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Check, ChevronsUpDown, Plus, Package } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { type Product } from \"@shared/schema\";\n\ninterface ProductSearchProps {\n  value?: number;\n  onChange: (value: number | undefined) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  onCreateNew?: (name: string) => void;\n  onProductSelect?: (product: Product) => void;\n}\n\nexport function ProductSearch({ \n  value, \n  onChange, \n  placeholder = \"Rechercher un produit...\",\n  disabled = false,\n  onCreateNew,\n  onProductSelect\n}: ProductSearchProps) {\n  const [open, setOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  // Debounce search query\n  useEffect(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    \n    timeoutRef.current = setTimeout(() => {\n      setDebouncedQuery(searchQuery);\n    }, 300);\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [searchQuery]);\n\n  // Fetch products with search\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\", debouncedQuery ? { search: debouncedQuery } : {}],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (debouncedQuery) {\n        params.append('search', debouncedQuery);\n      }\n      const response = await fetch(`/api/products?${params.toString()}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch products');\n      return response.json();\n    },\n    retry: false,\n  });\n\n  // Fetch selected product separately to ensure it's always available for display\n  const { data: selectedProduct } = useQuery<Product>({\n    queryKey: [\"/api/products\", value],\n    queryFn: async () => {\n      const response = await fetch(`/api/products/${value}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch product');\n      return response.json();\n    },\n    enabled: !!value,\n    retry: false,\n  });\n\n  const formatCurrency = (amount: string | number) => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return `${numAmount.toLocaleString('fr-FR')} F CFA`;\n  };\n\n  const handleSelect = (productId: string) => {\n    console.log(\"Product selection attempt:\", productId);\n    \n    if (productId === \"create-new\" && onCreateNew && searchQuery) {\n      onCreateNew(searchQuery);\n      setOpen(false);\n      setSearchQuery(\"\");\n      return;\n    }\n\n    const id = parseInt(productId);\n    console.log(\"Parsed product ID:\", id);\n    \n    if (!isNaN(id)) {\n      const product = products.find(p => p.id === id);\n      \n      onChange(id);\n      if (product && onProductSelect) {\n        onProductSelect(product);\n      }\n      \n      setOpen(false);\n      setSearchQuery(\"\");\n    }\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-full justify-between\"\n          disabled={disabled}\n        >\n          {selectedProduct ? (\n            <div className=\"flex items-center space-x-2\">\n              <Package className=\"w-4 h-4\" />\n              <span>{selectedProduct.name}</span>\n              <span className=\"text-sm text-muted-foreground\">\n                • {formatCurrency(selectedProduct.priceHT)} HT\n                {selectedProduct.stock !== undefined && ` • Stock: ${selectedProduct.stock}`}\n              </span>\n            </div>\n          ) : (\n            <span className=\"text-muted-foreground\">{placeholder}</span>\n          )}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[400px] p-0\" align=\"start\">\n        <Command shouldFilter={false} value=\"\" onValueChange={() => {}}>\n          <CommandInput \n            placeholder=\"Tapez pour rechercher...\" \n            value={searchQuery}\n            onValueChange={setSearchQuery}\n          />\n          <CommandList className=\"max-h-[200px] overflow-y-auto\">\n            {isLoading ? (\n              <CommandEmpty>Recherche en cours...</CommandEmpty>\n            ) : products.length === 0 ? (\n              <CommandEmpty>\n                {searchQuery ? (\n                  <div className=\"text-center py-4\">\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      Aucun produit trouvé pour \"{searchQuery}\"\n                    </p>\n                    {onCreateNew && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSelect(\"create-new\")}\n                        className=\"text-primary\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Créer \"{searchQuery}\"\n                      </Button>\n                    )}\n                  </div>\n                ) : (\n                  \"Aucun produit trouvé\"\n                )}\n              </CommandEmpty>\n            ) : (\n              <CommandGroup>\n                {products.map((product) => (\n                  <CommandItem\n                    key={product.id}\n                    value={product.id.toString()}\n                    onSelect={() => handleSelect(product.id.toString())}\n                    onClick={() => handleSelect(product.id.toString())}\n                    className=\"cursor-pointer hover:bg-gray-100\"\n                  >\n                    <Check\n                      className={cn(\n                        \"mr-2 h-4 w-4\",\n                        value === product.id ? \"opacity-100\" : \"opacity-0\"\n                      )}\n                    />\n                    <div className=\"flex flex-col w-full\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Package className=\"w-4 h-4\" />\n                          <span className=\"font-medium\">{product.name}</span>\n                        </div>\n                        <span className=\"text-sm font-medium\">\n                          {formatCurrency(product.priceHT)} HT\n                        </span>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {product.description && `${product.description} • `}\n                        {product.stock !== undefined && `Stock: ${product.stock}`}\n                      </div>\n                    </div>\n                  </CommandItem>\n                ))}\n                {searchQuery && onCreateNew && !products.some(p => \n                  p.name.toLowerCase().includes(searchQuery.toLowerCase())\n                ) && (\n                  <CommandItem\n                    value=\"create-new\"\n                    onSelect={() => handleSelect(\"create-new\")}\n                    className=\"text-primary cursor-pointer\"\n                  >\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Créer \"{searchQuery}\"\n                  </CommandItem>\n                )}\n              </CommandGroup>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":7890},"client/src/components/profile-editor.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useTranslation } from '@/lib/i18n';\nimport { useSettings } from '@/hooks/useSettings';\nimport { Save } from 'lucide-react';\n\nconst profileSchema = z.object({\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  phone: z.string().optional(),\n  company: z.string().optional(),\n  position: z.string().optional(),\n  address: z.string().optional(),\n  businessType: z.string().optional(),\n});\n\ntype ProfileFormData = z.infer<typeof profileSchema>;\n\nexport default function ProfileEditor() {\n  const { toast } = useToast();\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n\n  // Get current user data\n  const { data: user } = useQuery({\n    queryKey: ['/api/user'],\n    retry: false,\n  });\n\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      phone: '',\n      company: '',\n      position: '',\n      address: '',\n      businessType: '',\n    },\n  });\n\n  // Update form when user data is loaded\n  useEffect(() => {\n    if (user) {\n      form.reset({\n        firstName: (user as any).firstName || '',\n        lastName: (user as any).lastName || '',\n        phone: (user as any).phone || '',\n        company: (user as any).company || '',\n        position: (user as any).position || '',\n        address: (user as any).address || '',\n        businessType: (user as any).businessType || '',\n      });\n    }\n  }, [user, form]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileFormData) => {\n      const response = await fetch('/api/auth/complete-profile', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Update failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      toast({\n        title: t('success'),\n        description: settings?.language === 'en' ? 'Profile updated successfully' : 'Profil mis à jour avec succès',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: t('error'),\n        description: error.message || (settings?.language === 'en' ? 'Failed to update profile' : 'Erreur lors de la mise à jour du profil'),\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: ProfileFormData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"firstName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t('profileFirstName')}</FormLabel>\n                <FormControl>\n                  <Input placeholder={settings?.language === 'en' ? 'First name' : 'Prénom'} {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"lastName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t('profileLastName')}</FormLabel>\n                <FormControl>\n                  <Input placeholder={settings?.language === 'en' ? 'Last name' : 'Nom'} {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"phone\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t('profilePhone')}</FormLabel>\n                <FormControl>\n                  <Input placeholder={settings?.language === 'en' ? 'Phone number' : 'Numéro de téléphone'} {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"company\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t('profileCompany')}</FormLabel>\n                <FormControl>\n                  <Input placeholder={settings?.language === 'en' ? 'Company name' : 'Nom de l\\'entreprise'} {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"position\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t('profilePosition')}</FormLabel>\n                <FormControl>\n                  <Input placeholder={settings?.language === 'en' ? 'Position/Title' : 'Poste/Titre'} {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"businessType\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t('profileBusinessType')}</FormLabel>\n                <FormControl>\n                  <Input placeholder={settings?.language === 'en' ? 'Business type' : 'Type d\\'activité'} {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"address\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>{t('profileAddress')}</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder={settings?.language === 'en' ? 'Complete address' : 'Adresse complète'} \n                  className=\"min-h-[100px]\"\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end\">\n          <Button \n            type=\"submit\" \n            disabled={updateProfileMutation.isPending}\n            className=\"flex items-center gap-2\"\n          >\n            <Save className=\"w-4 h-4\" />\n            {updateProfileMutation.isPending\n              ? (settings?.language === 'en' ? 'Updating...' : 'Mise à jour...')\n              : t('updateProfile')\n            }\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}","size_bytes":7474},"client/src/components/sidebar.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  BarChart3, \n  Users, \n  Package, \n  Tags, \n  FileText, \n  TrendingUp, \n  Settings, \n  Download,\n  LogOut,\n  X,\n  Shield,\n  Calculator,\n  Bell,\n  BookOpen\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useSettings } from \"@/hooks/useSettings\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { SelectBusinessAlert } from \"@shared/schema\";\n\n\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n\n  // Get unread alerts count\n  const { data: alerts = [] } = useQuery<SelectBusinessAlert[]>({\n    queryKey: ['/api/alerts', true], // unreadOnly = true\n    queryFn: async () => {\n      const response = await fetch('/api/alerts?unreadOnly=true');\n      if (!response.ok) {\n        throw new Error('Failed to fetch alerts');\n      }\n      return response.json();\n    },\n    refetchInterval: 30000, // Refresh every 30 seconds\n    enabled: !!user, // Only fetch if user is authenticated\n  });\n\n  const unreadAlertsCount = alerts.length;\n\n  const navigation = [\n    { name: t('dashboard'), href: \"/\", icon: BarChart3 },\n    { name: t('clients'), href: \"/clients\", icon: Users },\n    { name: t('products'), href: \"/products\", icon: Package },\n    { name: t('categories'), href: \"/categories\", icon: Tags },\n    { name: t('invoices'), href: \"/invoices\", icon: FileText },\n    { name: t('sales'), href: \"/sales\", icon: TrendingUp },\n    { name: t('accounting'), href: \"/accounting\", icon: Calculator },\n    { name: t('alerts'), href: \"/alerts\", icon: Bell },\n  ];\n\n  const secondaryNavigation = [\n    { name: t('settings'), href: \"/settings\", icon: Settings },\n    { name: t('export'), href: \"/export\", icon: Download },\n    { name: \"Guide utilisateur\", href: \"/user-guide\", icon: BookOpen },\n  ];\n\n  // Add admin navigation for Fatimata\n  const adminNavigation = [\n    { name: \"Admin Licences\", href: \"/admin\", icon: Shield },\n  ];\n\n  return (\n    <div className=\"w-64 sidebar-glass flex flex-col\">\n      {/* Logo and Title */}\n      <div className=\"p-6 border-b border-white/20 dark:border-white/10\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <BarChart3 className=\"text-white text-lg\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-gray-900\">YGestion</h1>\n            <p className=\"text-sm text-gray-500\">v1.0.0</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 px-4 py-6 space-y-2\">\n        {navigation.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href;\n          const isAlertsItem = item.href === \"/alerts\";\n          \n          return (\n            <Link key={item.name} href={item.href}>\n              <Button\n                variant=\"ghost\"\n                className={cn(\n                  \"w-full justify-start relative transition-all duration-200 ease-in-out transform hover:scale-[1.02] hover:shadow-sm\",\n                  isActive\n                    ? \"bg-primary text-white hover:bg-primary/90 shadow-sm\"\n                    : \"text-gray-700 dark:text-gray-300 hover:bg-white/30 dark:hover:bg-white/20 hover:text-gray-900 dark:hover:text-white\"\n                )}\n              >\n                <Icon className=\"mr-3 h-4 w-4\" />\n                {item.name}\n                {isAlertsItem && unreadAlertsCount > 0 && (\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"ml-auto text-xs h-5 px-1.5 min-w-[20px] flex items-center justify-center\"\n                  >\n                    {unreadAlertsCount > 99 ? '99+' : unreadAlertsCount}\n                  </Badge>\n                )}\n              </Button>\n            </Link>\n          );\n        })}\n        \n        <div className=\"border-t border-white/20 dark:border-white/10 pt-4 mt-4 space-y-2\">\n          {secondaryNavigation.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href;\n            \n            return (\n              <Link key={item.name} href={item.href}>\n                <Button\n                  variant=\"ghost\"\n                  className={cn(\n                    \"w-full justify-start transition-all duration-200 ease-in-out transform hover:scale-[1.02] hover:shadow-sm\",\n                    isActive\n                      ? \"bg-primary text-white hover:bg-primary/90 shadow-sm\"\n                      : \"text-gray-700 dark:text-gray-300 hover:bg-white/30 dark:hover:bg-white/20 hover:text-gray-900 dark:hover:text-white\"\n                  )}\n                >\n                  <Icon className=\"mr-3 h-4 w-4\" />\n                  {item.name}\n                </Button>\n              </Link>\n            );\n          })}\n\n          {/* Admin navigation for Youssouphafils */}\n          {(user?.firstName?.toLowerCase() === \"youssouphafils\" || user?.email?.toLowerCase().includes(\"youssouphafils\")) && (\n            <div className=\"border-t border-white/20 dark:border-white/10 pt-2 mt-2\">\n              {adminNavigation.map((item) => {\n                const Icon = item.icon;\n                const isActive = location === item.href;\n                \n                return (\n                  <Link key={item.name} href={item.href}>\n                    <Button\n                      variant=\"ghost\"\n                      className={cn(\n                        \"w-full justify-start transition-all duration-200 ease-in-out transform hover:scale-[1.02] hover:shadow-sm\",\n                        isActive\n                          ? \"bg-purple-600 text-white hover:bg-purple-700 shadow-sm\"\n                          : \"text-purple-700 hover:bg-purple-100 hover:text-purple-800\"\n                      )}\n                    >\n                      <Icon className=\"mr-3 h-4 w-4\" />\n                      {item.name}\n                    </Button>\n                  </Link>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-white/20 dark:border-white/10\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center overflow-hidden\">\n            {user?.profileImageUrl ? (\n              <img \n                src={user.profileImageUrl} \n                alt=\"Profile\" \n                className=\"w-full h-full object-cover\"\n              />\n            ) : (\n              <Users className=\"w-4 h-4 text-gray-600\" />\n            )}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-gray-900 truncate\">\n              {user?.firstName && user?.lastName \n                ? `${user.firstName} ${user.lastName}`\n                : user?.email || \"Utilisateur\"\n              }\n            </p>\n            <p className=\"text-xs text-gray-500\">Administrateur</p>\n          </div>\n          <div className=\"flex space-x-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-gray-400 hover:text-red-600 hover:bg-red-50 transition-all duration-200 ease-in-out transform hover:scale-105\"\n              onClick={() => {\n                if (confirm(settings?.language === 'en' \n                  ? 'Are you sure you want to close the application?' \n                  : 'Êtes-vous sûr de vouloir fermer l\\'application ?'\n                )) {\n                  window.close();\n                }\n              }}\n              title={settings?.language === 'en' ? 'Close Application' : 'Fermer l\\'application'}\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-gray-400 hover:text-gray-600 hover:bg-gray-50 transition-all duration-200 ease-in-out transform hover:scale-105\"\n              onClick={async () => {\n                try {\n                  await fetch('/api/logout', { method: 'POST' });\n                  window.location.href = '/';\n                } catch (error) {\n                  console.error('Erreur lors de la déconnexion:', error);\n                }\n              }}\n              title={settings?.language === 'en' ? 'Logout' : 'Se déconnecter'}\n            >\n              <LogOut className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8891},"client/src/components/simple-client-select.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Check, ChevronsUpDown, User } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Input } from \"@/components/ui/input\";\nimport { type Client } from \"@shared/schema\";\n\ninterface SimpleClientSelectProps {\n  value?: number;\n  onChange: (value: number | undefined) => void;\n  placeholder?: string;\n  disabled?: boolean;\n}\n\nexport function SimpleClientSelect({ \n  value, \n  onChange, \n  placeholder = \"Rechercher ou créer un client...\",\n  disabled = false,\n}: SimpleClientSelectProps) {\n  const [open, setOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch all clients\n  const { data: clients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n    retry: false,\n  });\n\n  // Get selected client\n  const selectedClient = clients.find(c => c.id === value);\n\n  // Filter clients based on search\n  const filteredClients = clients.filter(client =>\n    client.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (client.email && client.email.toLowerCase().includes(searchQuery.toLowerCase())) ||\n    (client.company && client.company.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleSelect = (clientId: number) => {\n    onChange(clientId);\n    setOpen(false);\n    setSearchQuery(\"\");\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-full justify-between\"\n          disabled={disabled}\n        >\n          {selectedClient ? (\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-4 h-4\" />\n              <span>{selectedClient.name}</span>\n              {selectedClient.company && (\n                <span className=\"text-sm text-muted-foreground\">- {selectedClient.company}</span>\n              )}\n            </div>\n          ) : (\n            <span className=\"text-muted-foreground\">{placeholder}</span>\n          )}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[400px] p-0\" align=\"start\">\n        <div className=\"p-3 border-b\">\n          <Input\n            placeholder=\"Tapez pour rechercher...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"h-9\"\n          />\n        </div>\n        <div className=\"max-h-[200px] overflow-y-auto\">\n          {filteredClients.length === 0 ? (\n            <div className=\"p-4 text-center text-sm text-muted-foreground\">\n              {searchQuery ? `Aucun client trouvé pour \"${searchQuery}\"` : \"Aucun client trouvé\"}\n            </div>\n          ) : (\n            <div className=\"p-1\">\n              {filteredClients.map((client) => (\n                <div\n                  key={client.id}\n                  onClick={() => handleSelect(client.id)}\n                  className={cn(\n                    \"flex items-center space-x-2 rounded-sm px-2 py-2 cursor-pointer hover:bg-accent hover:text-accent-foreground\",\n                    value === client.id && \"bg-accent text-accent-foreground\"\n                  )}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === client.id ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  <div className=\"flex flex-col flex-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <User className=\"w-4 h-4\" />\n                      <span className=\"font-medium\">{client.name}</span>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {client.company && `${client.company} • `}\n                      {client.email}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":4310},"client/src/components/simple-product-select-v2.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Check, ChevronsUpDown, Package } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Input } from \"@/components/ui/input\";\nimport { type Product } from \"@shared/schema\";\n\ninterface SimpleProductSelectProps {\n  value?: number;\n  onChange: (value: number | undefined) => void;\n  onProductSelect?: (product: Product) => void;\n  placeholder?: string;\n  disabled?: boolean;\n}\n\nexport function SimpleProductSelectV2({ \n  value, \n  onChange, \n  onProductSelect,\n  placeholder = \"Rechercher un produit...\",\n  disabled = false,\n}: SimpleProductSelectProps) {\n  const [open, setOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch all products\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n    retry: false,\n  });\n\n  // Get selected product\n  const selectedProduct = products.find(p => p.id === value);\n\n  // Filter products based on search\n  const filteredProducts = products.filter(product =>\n    product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (product.description && product.description.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const formatCurrency = (amount: string | number) => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return `${numAmount.toLocaleString('fr-FR')} F CFA`;\n  };\n\n  const handleSelect = (productId: number) => {\n    const product = products.find(p => p.id === productId);\n    \n    onChange(productId);\n    if (product && onProductSelect) {\n      onProductSelect(product);\n    }\n    \n    setOpen(false);\n    setSearchQuery(\"\");\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-full justify-between\"\n          disabled={disabled}\n        >\n          {selectedProduct ? (\n            <div className=\"flex items-center space-x-2\">\n              <Package className=\"w-4 h-4\" />\n              <span>{selectedProduct.name}</span>\n              <span className=\"text-sm text-muted-foreground\">\n                • {formatCurrency(selectedProduct.priceHT)} HT\n                {selectedProduct.stock !== undefined && ` • Stock: ${selectedProduct.stock}`}\n              </span>\n            </div>\n          ) : (\n            <span className=\"text-muted-foreground\">{placeholder}</span>\n          )}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[400px] p-0\" align=\"start\">\n        <div className=\"p-3 border-b\">\n          <Input\n            placeholder=\"Tapez pour rechercher...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"h-9\"\n          />\n        </div>\n        <div className=\"max-h-[200px] overflow-y-auto\">\n          {filteredProducts.length === 0 ? (\n            <div className=\"p-4 text-center text-sm text-muted-foreground\">\n              {searchQuery ? `Aucun produit trouvé pour \"${searchQuery}\"` : \"Aucun produit trouvé\"}\n            </div>\n          ) : (\n            <div className=\"p-1\">\n              {filteredProducts.map((product) => (\n                <div\n                  key={product.id}\n                  onClick={() => handleSelect(product.id)}\n                  className={cn(\n                    \"flex items-center space-x-2 rounded-sm px-2 py-2 cursor-pointer hover:bg-accent hover:text-accent-foreground\",\n                    value === product.id && \"bg-accent text-accent-foreground\"\n                  )}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === product.id ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  <div className=\"flex flex-col w-full\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Package className=\"w-4 h-4\" />\n                        <span className=\"font-medium\">{product.name}</span>\n                      </div>\n                      <span className=\"text-sm font-medium\">\n                        {formatCurrency(product.priceHT)} HT\n                      </span>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {product.description && `${product.description} • `}\n                      {product.stock !== undefined && `Stock: ${product.stock}`}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":5077},"client/src/components/simple-product-select.tsx":{"content":"import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { type Product } from \"@shared/schema\";\n\ninterface SimpleProductSelectProps {\n  products: Product[];\n  value?: number;\n  onChange: (value: number | undefined) => void;\n  placeholder?: string;\n  disabled?: boolean;\n}\n\nexport function SimpleProductSelect({ \n  products, \n  value, \n  onChange, \n  placeholder = \"Sélectionner un produit...\",\n  disabled = false \n}: SimpleProductSelectProps) {\n  const selectedProduct = products.find((product) => product.id === value);\n\n  return (\n    <Select \n      onValueChange={(selectedValue) => {\n        if (selectedValue === \"\") {\n          onChange(undefined);\n        } else {\n          onChange(parseInt(selectedValue));\n        }\n      }}\n      value={value ? value.toString() : \"\"}\n      disabled={disabled}\n    >\n      <SelectTrigger className=\"w-full\">\n        <SelectValue placeholder={placeholder} />\n      </SelectTrigger>\n      <SelectContent>\n        {products.map((product) => (\n          <SelectItem key={product.id} value={product.id.toString()}>\n            <div className=\"flex flex-col\">\n              <span>{product.name}</span>\n              <span className=\"text-sm text-muted-foreground\">\n                {Number(product.priceHT).toLocaleString('fr-FR')} XOF HT\n                {product.stock !== undefined && ` • Stock: ${product.stock}`}\n              </span>\n            </div>\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}","size_bytes":1533},"client/src/components/stats-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  change?: string;\n  changeType?: \"positive\" | \"negative\" | \"neutral\";\n  icon: LucideIcon;\n  iconColor: string;\n}\n\nexport default function StatsCard({ \n  title, \n  value, \n  change, \n  changeType = \"neutral\", \n  icon: Icon, \n  iconColor \n}: StatsCardProps) {\n  const getChangeColor = () => {\n    switch (changeType) {\n      case \"positive\":\n        return \"text-green-600\";\n      case \"negative\":\n        return \"text-red-600\";\n      default:\n        return \"text-gray-600\";\n    }\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm font-medium text-gray-500\">{title}</p>\n            <p className=\"text-xl font-bold text-gray-900 break-words\">{value}</p>\n            {change && (\n              <p className={`text-sm mt-1 ${getChangeColor()}`}>\n                {change}\n              </p>\n            )}\n          </div>\n          <div className={`w-12 h-12 ${iconColor} rounded-lg flex items-center justify-center`}>\n            <Icon className=\"text-xl\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1325},"client/src/components/sync-status.tsx":{"content":"import { RefreshCw, Wifi, WifiOff } from 'lucide-react';\nimport { useTranslation } from '@/lib/i18n';\nimport { useSettings } from '@/hooks/useSettings';\nimport { Badge } from '@/components/ui/badge';\n\ninterface SyncStatusProps {\n  isOnline?: boolean;\n  isSyncing?: boolean;\n  lastSync?: Date;\n}\n\nexport default function SyncStatus({ isOnline = true, isSyncing = false, lastSync }: SyncStatusProps) {\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n\n  const formatLastSync = (date: Date) => {\n    const now = new Date();\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n    \n    if (diffInSeconds < 60) {\n      return settings?.language === 'en' ? 'Just now' : 'À l\\'instant';\n    } else if (diffInSeconds < 3600) {\n      const minutes = Math.floor(diffInSeconds / 60);\n      return settings?.language === 'en' \n        ? `${minutes}m ago` \n        : `il y a ${minutes}m`;\n    } else {\n      return date.toLocaleTimeString(settings?.language === 'en' ? 'en-US' : 'fr-FR', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  };\n\n  if (!isOnline) {\n    return (\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <Badge variant=\"destructive\" className=\"flex items-center gap-2 px-3 py-2\">\n          <WifiOff className=\"w-4 h-4\" />\n          <span className=\"text-sm\">\n            {settings?.language === 'en' ? 'Offline' : 'Hors ligne'}\n          </span>\n        </Badge>\n      </div>\n    );\n  }\n\n  if (isSyncing) {\n    return (\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <Badge variant=\"secondary\" className=\"flex items-center gap-2 px-3 py-2 bg-blue-50 text-blue-700 border-blue-200\">\n          <RefreshCw className=\"w-4 h-4 animate-spin\" />\n          <span className=\"text-sm\">\n            {settings?.language === 'en' ? 'Syncing...' : 'Synchronisation...'}\n          </span>\n        </Badge>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50\">\n      <Badge variant=\"secondary\" className=\"flex items-center gap-2 px-3 py-2 bg-green-50 text-green-700 border-green-200\">\n        <Wifi className=\"w-4 h-4\" />\n        <span className=\"text-sm\">\n          {settings?.language === 'en' ? 'Live data' : 'Données en temps réel'}\n          {lastSync && (\n            <span className=\"ml-1 text-xs opacity-75\">\n              • {formatLastSync(lastSync)}\n            </span>\n          )}\n        </span>\n      </Badge>\n    </div>\n  );\n}","size_bytes":2481},"client/src/components/trial-banner.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Clock, Key } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface TrialBannerProps {\n  trialStartTime: number;\n  onActivateLicense: () => void;\n}\n\nexport default function TrialBanner({ trialStartTime, onActivateLicense }: TrialBannerProps) {\n  const [timeRemaining, setTimeRemaining] = useState<number>(60);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const elapsed = Math.floor((Date.now() - trialStartTime) / 1000);\n      const remaining = 60 - elapsed;\n      setTimeRemaining(remaining > 0 ? remaining : 0);\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [trialStartTime]);\n\n  const minutes = Math.floor(timeRemaining / 60);\n  const seconds = timeRemaining % 60;\n\n  return (\n    <Alert className=\"mb-4 border-amber-200 bg-amber-50 text-amber-800\" data-testid=\"trial-banner\">\n      <Clock className=\"h-4 w-4\" />\n      <AlertDescription className=\"flex items-center justify-between\">\n        <div>\n          <strong>Période d'essai active</strong> - Temps restant: {minutes}:{seconds.toString().padStart(2, '0')}\n          <br />\n          <span className=\"text-sm\">Activez votre licence pour continuer à utiliser l'application.</span>\n        </div>\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          onClick={onActivateLicense}\n          className=\"ml-4 border-amber-400 text-amber-800 hover:bg-amber-100\"\n          data-testid=\"button-activate-early\"\n        >\n          <Key className=\"w-4 h-4 mr-2\" />\n          Activer maintenant\n        </Button>\n      </AlertDescription>\n    </Alert>\n  );\n}","size_bytes":1708},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getQueryFn } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading, refetch } = useQuery<User>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n    staleTime: 0, // Always consider data stale to force refetch when needed\n    gcTime: 5 * 60 * 1000, // Keep in cache for 5 minutes (React Query v5)\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    refetch,\n  };\n}\n","size_bytes":574},"client/src/hooks/useSettings.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"./useAuth\";\nimport { Language } from \"@/lib/i18n\";\nimport { useEffect } from \"react\";\n\nexport interface UserSettings {\n  currency: string;\n  language: Language;\n}\n\nexport function useSettings() {\n  const { user } = useAuth();\n\n  // Get the preferred language from localStorage if set during initial language selection\n  const getInitialLanguage = (): Language => {\n    const preferredLanguage = localStorage.getItem('preferredLanguage');\n    return (preferredLanguage as Language) || \"fr\";\n  };\n\n  const { data: settings, isLoading } = useQuery<UserSettings>({\n    queryKey: [\"/api/user/settings\"],\n    enabled: !!user,\n    select: (data: any) => ({\n      currency: data?.currency || \"XOF\",\n      language: (data?.language || getInitialLanguage()) as Language,\n    }),\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (newSettings: Partial<UserSettings>) => {\n      const response = await fetch(\"/api/user/settings\", {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(newSettings),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur de mise à jour des paramètres\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/settings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n  });\n\n  // Sync initial language preference with user settings if not already set\n  useEffect(() => {\n    const preferredLanguage = localStorage.getItem('preferredLanguage');\n    const hasBeenSynced = localStorage.getItem('languageSynced');\n    \n    if (user && settings && preferredLanguage && !hasBeenSynced) {\n      // If the preferred language is different from current settings, update it\n      if (settings.language !== preferredLanguage) {\n        updateSettingsMutation.mutate({\n          language: preferredLanguage as Language,\n          currency: settings.currency\n        });\n        localStorage.setItem('languageSynced', 'true');\n      }\n    }\n  }, [user, settings, updateSettingsMutation]);\n\n  return {\n    settings,\n    isLoading,\n    updateSettings: updateSettingsMutation.mutate,\n    isUpdating: updateSettingsMutation.isPending,\n  };\n}","size_bytes":2497},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/i18n.ts":{"content":"// Système de traduction pour l'application\nexport type Language = 'fr' | 'en';\n\nexport interface Translations {\n  // Navigation\n  dashboard: string;\n  clients: string;\n  products: string;\n  categories: string;\n  invoices: string;\n  sales: string;\n  settings: string;\n  export: string;\n  logout: string;\n\n  // Actions communes\n  create: string;\n  edit: string;\n  delete: string;\n  save: string;\n  cancel: string;\n  search: string;\n  loading: string;\n  \n  // Dashboard\n  revenue: string;\n  invoiceCount: string;\n  clientCount: string;\n  productCount: string;\n  recentInvoices: string;\n  topProducts: string;\n  quickActions: string;\n  generateReport: string;\n  exportData: string;\n  viewAll: string;\n  amount: string;\n  date: string;\n  actions: string;\n  unknownClient: string;\n  noSalesRecorded: string;\n  sold: string;\n  activeClients: string;\n  newThisMonth: string;\n  noNewClients: string;\n  stockAlerts: string;\n  vsLastMonth: string;\n  noPreviousData: string;\n  thisWeek: string;\n  noRecentInvoices: string;\n  bestSellingProducts: string;\n  \n  // Clients\n  clientName: string;\n  email: string;\n  phone: string;\n  address: string;\n  company: string;\n  newClient: string;\n  editClient: string;\n  searchClient: string;\n  noClient: string;\n  noClientFound: string;\n  addFirstClient: string;\n  tryModifySearch: string;\n  manageClients: string;\n  clientCreated: string;\n  clientCreatedDesc: string;\n  clientModified: string;\n  clientModifiedDesc: string;\n  clientDeleted: string;\n  clientDeletedDesc: string;\n  confirmDeleteClient: string;\n  errorCreateClient: string;\n  errorUpdateClient: string;\n  errorDeleteClient: string;\n  unauthorized: string;\n  unauthorizedDesc: string;\n  lastSync: string;\n  minutesAgo: string;\n  fullName: string;\n  createdOn: string;\n\n  // Invoices\n  newInvoice: string;\n  manageInvoices: string;\n  searchInvoice: string;\n  noInvoice: string;\n  noInvoiceFound: string;\n  createFirstInvoice: string;\n  tryModifyFilters: string;\n  allStatuses: string;\n  invoiceNumber: string;\n  client: string;\n  status: string;\n  dueDate: string;\n  createInvoice: string;\n  editInvoice: string;\n  invoiceDetails: string;\n  product: string;\n  quantity: string;\n  unitPrice: string;\n  total: string;\n  addProduct: string;\n  taxRate: string;\n  subtotal: string;\n  tax: string;\n  totalAmount: string;\n  paymentMethod: string;\n  notes: string;\n  invoiceCreated: string;\n  invoiceCreatedDesc: string;\n  invoiceModified: string;\n  invoiceModifiedDesc: string;\n  invoiceDeleted: string;\n  invoiceDeletedDesc: string;\n  confirmDeleteInvoice: string;\n  errorCreateInvoice: string;\n  errorUpdateInvoice: string;\n  errorDeleteInvoice: string;\n  \n  // Products\n  productName: string;\n  description: string;\n  price: string;\n  stock: string;\n  category: string;\n  newProduct: string;\n  editProduct: string;\n  \n  // Invoice Status\n  pending: string;\n  paid: string;\n  overdue: string;\n  \n  // Settings\n  language: string;\n  currency: string;\n  profile: string;\n  preferences: string;\n\n  personalInfo: string;\n  updateProfile: string;\n  profileFirstName: string;\n  profileLastName: string;\n  profilePhone: string;\n  profileCompany: string;\n  profilePosition: string;\n  profileAddress: string;\n  profileBusinessType: string;\n  \n  // Messages\n  success: string;\n  error: string;\n  confirmDelete: string;\n  noData: string;\n  \n  // Accounting\n  accounting: string;\n  manageFinances: string;\n  totalExpenses: string;\n  pendingExpenses: string;\n  approvedExpenses: string;\n  totalImprestFunds: string;\n  activeImprestFunds: string;\n  totalRevenues: string;\n  monthlyRevenues: string;\n  recentRevenues: string;\n  netResult: string;\n  filterByPeriod: string;\n  from: string;\n  to: string;\n  clear: string;\n  \n  // Accounting cards and tabs\n  awaiting: string;\n  approved: string;\n  imprestFunds: string;\n  expensesToApprove: string;\n  validatedExpenses: string;\n  activeFunds: string;\n  benefit: string;\n  revenuesMinusExpenses: string;\n  selectedPeriod: string;\n  displaying: string;\n  \n  // Tabs\n  expenses: string;\n  revenues: string;\n  reports: string;\n  \n  // Expense Management\n  expenseManagement: string;\n  createManageExpenses: string;\n  expenseList: string;\n  manageBusinessExpenses: string;\n  downloadCsv: string;\n  newExpense: string;\n  \n  // Alerts\n  alerts: string;\n  lowStock: string;\n  criticalStock: string;\n  overdueInvoice: string;\n  paymentDue: string;\n  markAsRead: string;\n  markAllAsRead: string;\n  deleteAlert: string;\n  severity: string;\n  type: string;\n  message: string;\n  createdAt: string;\n  \n  // Landing page\n  appTitle: string;\n  appDescription: string;\n  loginButton: string;\n  createAccountButton: string;\n  newUserText: string;\n  clientManagement: string;\n  clientManagementDesc: string;\n  productCatalog: string;\n  productCatalogDesc: string;\n  invoicing: string;\n  invoicingDesc: string;\n  reporting: string;\n  reportingDesc: string;\n  whyChoose: string;\n  modernInterface: string;\n  modernInterfaceDesc: string;\n  secure: string;\n  secureDesc: string;\n  dashboardTitle: string;\n  dashboardDesc: string;\n  readyToOptimize: string;\n  joinCompanies: string;\n  startNow: string;\n}\n\nexport const translations: Record<Language, Translations> = {\n  fr: {\n    // Navigation\n    dashboard: \"Tableau de bord\",\n    clients: \"Clients\",\n    products: \"Produits\",\n    categories: \"Catégories\", \n    invoices: \"Factures\",\n    sales: \"Ventes\",\n    settings: \"Paramètres\",\n    export: \"Export\",\n    logout: \"Déconnexion\",\n\n    // Actions communes\n    create: \"Créer\",\n    edit: \"Modifier\",\n    delete: \"Supprimer\",\n    save: \"Enregistrer\",\n    cancel: \"Annuler\",\n    search: \"Rechercher\",\n    loading: \"Chargement...\",\n    \n    // Dashboard\n    revenue: \"Chiffre d'affaires\",\n    invoiceCount: \"Factures\",\n    clientCount: \"Clients\",\n    productCount: \"Produits\",\n    recentInvoices: \"Factures récentes\",\n    topProducts: \"Produits populaires\",\n    quickActions: \"Actions Rapides\",\n    generateReport: \"Générer Rapport\",\n    exportData: \"Exporter Données\",\n    viewAll: \"Voir toutes\",\n    amount: \"Montant\",\n    date: \"Date\",\n    actions: \"Actions\",\n    unknownClient: \"Client inconnu\",\n    noSalesRecorded: \"Aucune vente enregistrée\",\n    sold: \"vendus\",\n    activeClients: \"Clients Actifs\",\n    newThisMonth: \"nouveaux ce mois\",\n    noNewClients: \"Aucun nouveau client\",\n    stockAlerts: \"ruptures de stock\",\n    vsLastMonth: \"vs mois dernier\",\n    noPreviousData: \"Aucune donnée précédente\",\n    thisWeek: \"cette semaine\",\n    noRecentInvoices: \"Aucune facture récente\",\n    bestSellingProducts: \"Produits les Plus Vendus\",\n    \n    // Clients\n    clientName: \"Nom du client\",\n    email: \"Email\",\n    phone: \"Téléphone\",\n    address: \"Adresse\",\n    company: \"Entreprise\",\n    newClient: \"Nouveau Client\",\n    editClient: \"Modifier le Client\",\n    searchClient: \"Rechercher un client...\",\n    noClient: \"Aucun client\",\n    noClientFound: \"Aucun client trouvé\",\n    addFirstClient: \"Commencez par ajouter votre premier client.\",\n    tryModifySearch: \"Essayez de modifier votre recherche.\",\n    manageClients: \"Gérez vos clients et leurs informations\",\n    clientCreated: \"Client créé\",\n    clientCreatedDesc: \"Le client a été créé avec succès.\",\n    clientModified: \"Client modifié\",\n    clientModifiedDesc: \"Le client a été modifié avec succès.\",\n    clientDeleted: \"Client supprimé\",\n    clientDeletedDesc: \"Le client a été supprimé avec succès.\",\n    confirmDeleteClient: \"Êtes-vous sûr de vouloir supprimer ce client ?\",\n    errorCreateClient: \"Impossible de créer le client.\",\n    errorUpdateClient: \"Impossible de modifier le client.\",\n    errorDeleteClient: \"Impossible de supprimer le client.\",\n    unauthorized: \"Non autorisé\",\n    unauthorizedDesc: \"Vous êtes déconnecté. Reconnexion...\",\n    lastSync: \"Dernière synchronisation\",\n    minutesAgo: \"Il y a 2 minutes\",\n    fullName: \"Nom complet\",\n    createdOn: \"Créé le\",\n\n    // Invoices\n    newInvoice: \"Nouvelle Facture\",\n    manageInvoices: \"Gérez vos factures et paiements\",\n    searchInvoice: \"Rechercher une facture...\",\n    noInvoice: \"Aucune facture\",\n    noInvoiceFound: \"Aucune facture trouvée\",\n    createFirstInvoice: \"Commencez par créer votre première facture.\",\n    tryModifyFilters: \"Essayez de modifier vos filtres.\",\n    allStatuses: \"Tous les statuts\",\n    invoiceNumber: \"Numéro\",\n    client: \"Client\",\n    dueDate: \"Date d'échéance\",\n    createInvoice: \"Créer une facture\",\n    editInvoice: \"Modifier la facture\",\n    invoiceDetails: \"Détails de la facture\",\n    product: \"Produit\",\n    quantity: \"Quantité\",\n    unitPrice: \"Prix unitaire HT\",\n    total: \"Total\",\n    addProduct: \"Ajouter un produit\",\n    taxRate: \"Taux de TVA\",\n    subtotal: \"Sous-total\",\n    tax: \"TVA\",\n    totalAmount: \"Total TTC\",\n    paymentMethod: \"Mode de paiement\",\n    notes: \"Notes\",\n    searchOrCreateClient: \"Rechercher ou créer un client...\",\n    selectStatus: \"Sélectionner statut\",\n    selectTaxRate: \"Sélectionner TVA\",\n    selectPaymentMethod: \"Sélectionner le moyen de paiement\",\n    productsServices: \"Produits/Services\",\n    priceHT: \"Prix HT\",\n    searchProduct: \"Rechercher un produit...\",\n    productServiceName: \"Nom du produit/service\",\n    addLine: \"Ajouter une ligne\",\n    additionalNotes: \"Notes additionnelles\",\n    totalHT: \"Total HT\",\n    tva: \"TVA\",\n    totalTTC: \"Total TTC\",\n    creating: \"Création\",\n    invoiceCreated: \"Facture créée\",\n    invoiceCreatedDesc: \"La facture a été créée avec succès.\",\n    invoiceModified: \"Facture modifiée\",\n    invoiceModifiedDesc: \"La facture a été modifiée avec succès.\",\n    invoiceDeleted: \"Facture supprimée\",\n    invoiceDeletedDesc: \"La facture a été supprimée avec succès.\",\n    confirmDeleteInvoice: \"Êtes-vous sûr de vouloir supprimer cette facture ?\",\n    errorCreateInvoice: \"Impossible de créer la facture.\",\n    errorUpdateInvoice: \"Impossible de modifier la facture.\",\n    errorDeleteInvoice: \"Impossible de supprimer la facture.\",\n    \n    // Products\n    manageProducts: \"Gérez votre catalogue de produits\",\n    productName: \"Nom du produit\",\n    description: \"Description\",\n    price: \"Prix\",\n    stock: \"Stock\",\n    category: \"Catégorie\",\n    newProduct: \"Nouveau Produit\",\n    editProduct: \"Modifier le Produit\",\n    noProduct: \"Aucun produit\",\n    noProductFound: \"Aucun produit trouvé\",\n    addFirstProduct: \"Commencez par ajouter votre premier produit.\",\n    noCategory: \"Sans catégorie\",\n    unknownCategory: \"Catégorie inconnue\",\n    outOfStock: \"Rupture\",\n    lowStock: \"Stock faible\",\n    inStock: \"En stock\",\n    productCreated: \"Produit créé\",\n    productCreatedDesc: \"Le produit a été créé avec succès.\",\n    productModified: \"Produit modifié\",\n    productModifiedDesc: \"Le produit a été modifié avec succès.\",\n    productDeleted: \"Produit supprimé\",\n    productDeletedDesc: \"Le produit a été supprimé avec succès.\",\n    errorCreateProduct: \"Impossible de créer le produit.\",\n    errorUpdateProduct: \"Impossible de modifier le produit.\",\n    errorDeleteProduct: \"Impossible de supprimer le produit.\",\n    replenishmentAdded: \"Réapprovisionnement ajouté\",\n    replenishmentAddedDesc: \"Le stock a été réapprovisionné avec succès.\",\n    errorAddReplenishment: \"Impossible d'ajouter le réapprovisionnement.\",\n    replenishStock: \"Réapprovisionner le stock\",\n    replenishmentHistory: \"Historique des réapprovisionnements\",\n    deleteProduct: \"Supprimer le produit\",\n    productNamePlaceholder: \"Attiéké complet\",\n    descriptionPlaceholder: \"Plat traditionnel ivoirien à base de manioc\",\n    selectCategory: \"Sélectionner une catégorie\",\n    stockAlertThreshold: \"Seuil d'alerte stock\",\n    stockManagedAutomatically: \"Le stock est géré automatiquement via les réapprovisionnements et les ventes\",\n    modify: \"Modifier\",\n    units: \"unités\",\n    \n    // Invoice Status\n    pending: \"En attente\",\n    paid: \"Payée\",\n    overdue: \"En retard\",\n    \n    // Settings\n    language: \"Langue\",\n    currency: \"Devise\",\n    profile: \"Profil\",\n    preferences: \"Préférences\",\n\n    personalInfo: \"Informations personnelles\",\n    updateProfile: \"Mettre à jour le profil\",\n    profileFirstName: \"Prénom\",\n    profileLastName: \"Nom\",\n    profilePhone: \"Téléphone\",\n    profileCompany: \"Entreprise\",\n    profilePosition: \"Poste\",\n    profileAddress: \"Adresse\",\n    profileBusinessType: \"Type d'activité\",\n    \n    // Messages\n    success: \"Succès\",\n    error: \"Erreur\",\n    confirmDelete: \"Êtes-vous sûr de vouloir supprimer cet élément ?\",\n    noData: \"Aucune donnée disponible\",\n    \n    // Accounting\n    accounting: \"Comptabilité\",\n    manageFinances: \"Gérez vos finances, dépenses et avances en toute sécurité\",\n    totalExpenses: \"Dépenses totales\",\n    pendingExpenses: \"Dépenses en attente\",\n    approvedExpenses: \"Dépenses approuvées\",\n    totalImprestFunds: \"Fonds d'avance totaux\",\n    activeImprestFunds: \"Fonds d'avance actifs\",\n    totalRevenues: \"Revenus totaux\",\n    monthlyRevenues: \"Revenus mensuels\",\n    recentRevenues: \"Revenus récents\",\n    netResult: \"Résultat net\",\n    filterByPeriod: \"Filtrer par période\",\n    from: \"Du\",\n    to: \"Au\",\n    clear: \"Effacer\",\n    \n    // Cartes et onglets comptabilité\n    awaiting: \"En attente\",\n    approved: \"Approuvées\",\n    imprestFunds: \"Fonds d'avance\",\n    expensesToApprove: \"Dépenses à approuver\",\n    validatedExpenses: \"Dépenses validées\",\n    activeFunds: \"fonds actifs\",\n    benefit: \"Bénéfice\",\n    revenuesMinusExpenses: \"Revenus - Dépenses\",\n    selectedPeriod: \"Période sélectionnée\",\n    displaying: \"Affichage des statistiques du\",\n    \n    // Onglets\n    expenses: \"Dépenses\",\n    revenues: \"Revenus\",\n    reports: \"Reports\",\n    \n    // Gestion des dépenses\n    expenseManagement: \"Gestion des dépenses\",\n    createManageExpenses: \"Créez et gérez toutes vos dépenses d'entreprise\",\n    expenseList: \"Liste des dépenses\",\n    manageBusinessExpenses: \"Gérez toutes vos dépenses d'entreprise\",\n    downloadCsv: \"Télécharger CSV\",\n    newExpense: \"Nouvelle dépense\",\n    \n    // Alerts\n    alerts: \"Alertes\",\n    criticalStock: \"Rupture de stock\",\n    overdueInvoice: \"Facture échue\",\n    paymentDue: \"Paiement dû\",\n    markAsRead: \"Marquer comme lu\",\n    markAllAsRead: \"Marquer toutes comme lues\",\n    deleteAlert: \"Supprimer l'alerte\",\n    severity: \"Sévérité\",\n    type: \"Type\",\n    message: \"Message\",\n    createdAt: \"Créé le\",\n    \n    // Landing page\n    appTitle: \"YGestion\",\n    appDescription: \"Application complète de gestion commerciale pour optimiser vos ventes, gérer vos clients et suivre votre activité en temps réel.\",\n    loginButton: \"Se connecter\",\n    createAccountButton: \"Créer un compte\",\n    newUserText: \"Nouveau sur YGestion ? Créez votre compte et complétez votre profil pour commencer.\",\n    clientManagement: \"Gestion des Clients\",\n    clientManagementDesc: \"Centralisez toutes les informations de vos clients et leur historique d'achat.\",\n    productCatalog: \"Catalogue Produits\",\n    productCatalogDesc: \"Organisez vos produits par catégories et suivez vos stocks en temps réel.\",\n    invoicing: \"Facturation\",\n    invoicingDesc: \"Créez et gérez vos factures facilement avec génération PDF automatique.\",\n    reporting: \"Reporting\",\n    reportingDesc: \"Analysez vos performances avec des rapports détaillés et des exports CSV.\",\n    whyChoose: \"Pourquoi choisir YGestion ?\",\n    modernInterface: \"Interface Moderne\",\n    modernInterfaceDesc: \"Interface intuitive et responsive, accessible depuis n'importe quel appareil.\",\n    secure: \"Sécurisé\",\n    secureDesc: \"Authentification sécurisée et données protégées avec chiffrement.\",\n    dashboardTitle: \"Tableau de Bord\",\n    dashboardDesc: \"Visualisez vos KPIs et suivez l'évolution de votre activité en temps réel.\",\n    readyToOptimize: \"Prêt à optimiser votre gestion commerciale ?\",\n    joinCompanies: \"Rejoignez les entreprises qui font confiance à YGestion pour leur croissance.\",\n    startNow: \"Démarrer maintenant\",\n  },\n  \n  en: {\n    // Navigation\n    dashboard: \"Dashboard\",\n    clients: \"Clients\",\n    products: \"Products\",\n    categories: \"Categories\",\n    invoices: \"Invoices\",\n    sales: \"Sales\",\n    settings: \"Settings\",\n    export: \"Export\",\n    logout: \"Logout\",\n\n    // Actions communes\n    create: \"Create\",\n    edit: \"Edit\",\n    delete: \"Delete\",\n    save: \"Save\",\n    cancel: \"Cancel\",\n    search: \"Search\",\n    loading: \"Loading...\",\n    \n    // Dashboard\n    revenue: \"Revenue\",\n    invoiceCount: \"Invoices\",\n    clientCount: \"Clients\",\n    productCount: \"Products\",\n    recentInvoices: \"Recent Invoices\",\n    topProducts: \"Top Products\",\n    quickActions: \"Quick Actions\",\n    generateReport: \"Generate Report\",\n    exportData: \"Export Data\",\n    viewAll: \"View All\",\n    amount: \"Amount\",\n    date: \"Date\",\n    actions: \"Actions\",\n    unknownClient: \"Unknown client\",\n    noSalesRecorded: \"No sales recorded\",\n    sold: \"sold\",\n    activeClients: \"Active Clients\",\n    newThisMonth: \"new this month\",\n    noNewClients: \"No new clients\",\n    stockAlerts: \"stock alerts\",\n    vsLastMonth: \"vs last month\",\n    noPreviousData: \"No previous data\",\n    thisWeek: \"this week\",\n    noRecentInvoices: \"No recent invoices\",\n    bestSellingProducts: \"Best Selling Products\",\n    \n    // Clients\n    clientName: \"Client Name\",\n    email: \"Email\",\n    phone: \"Phone\",\n    address: \"Address\",\n    company: \"Company\",\n    newClient: \"New Client\",\n    editClient: \"Edit Client\",\n    searchClient: \"Search client...\",\n    noClient: \"No clients\",\n    noClientFound: \"No client found\",\n    addFirstClient: \"Start by adding your first client.\",\n    tryModifySearch: \"Try modifying your search.\",\n    manageClients: \"Manage your clients and their information\",\n    clientCreated: \"Client created\",\n    clientCreatedDesc: \"The client has been created successfully.\",\n    clientModified: \"Client modified\",\n    clientModifiedDesc: \"The client has been modified successfully.\",\n    clientDeleted: \"Client deleted\",\n    clientDeletedDesc: \"The client has been deleted successfully.\",\n    confirmDeleteClient: \"Are you sure you want to delete this client?\",\n    errorCreateClient: \"Unable to create client.\",\n    errorUpdateClient: \"Unable to update client.\",\n    errorDeleteClient: \"Unable to delete client.\",\n    unauthorized: \"Unauthorized\",\n    unauthorizedDesc: \"You are logged out. Reconnecting...\",\n    lastSync: \"Last sync\",\n    minutesAgo: \"2 minutes ago\",\n    fullName: \"Full Name\",\n    createdOn: \"Created on\",\n\n    // Invoices\n    newInvoice: \"New Invoice\",\n    manageInvoices: \"Manage your invoices and payments\",\n    searchInvoice: \"Search invoice...\",\n    noInvoice: \"No invoices\",\n    noInvoiceFound: \"No invoice found\",\n    createFirstInvoice: \"Start by creating your first invoice.\",\n    tryModifyFilters: \"Try modifying your filters.\",\n    allStatuses: \"All statuses\",\n    invoiceNumber: \"Number\",\n    client: \"Client\",\n    dueDate: \"Due Date\",\n    createInvoice: \"Create Invoice\",\n    editInvoice: \"Edit Invoice\",\n    invoiceDetails: \"Invoice Details\",\n    product: \"Product\",\n    quantity: \"Quantity\",\n    unitPrice: \"Unit Price (excl. tax)\",\n    total: \"Total\",\n    addProduct: \"Add Product\",\n    taxRate: \"Tax Rate\",\n    subtotal: \"Subtotal\",\n    tax: \"Tax\",\n    totalAmount: \"Total Amount\",\n    paymentMethod: \"Payment Method\",\n    notes: \"Notes\",\n    searchOrCreateClient: \"Search or create a client...\",\n    selectStatus: \"Select status\",\n    selectTaxRate: \"Select tax rate\",\n    selectPaymentMethod: \"Select payment method\",\n    productsServices: \"Products/Services\",\n    priceHT: \"Price (excl. tax)\",\n    searchProduct: \"Search product...\",\n    productServiceName: \"Product/service name\",\n    addLine: \"Add line\",\n    additionalNotes: \"Additional notes\",\n    totalHT: \"Total (excl. tax)\",\n    tva: \"Tax\",\n    totalTTC: \"Total (incl. tax)\",\n    creating: \"Creating\",\n    invoiceCreated: \"Invoice created\",\n    invoiceCreatedDesc: \"The invoice has been created successfully.\",\n    invoiceModified: \"Invoice modified\",\n    invoiceModifiedDesc: \"The invoice has been modified successfully.\",\n    invoiceDeleted: \"Invoice deleted\",\n    invoiceDeletedDesc: \"The invoice has been deleted successfully.\",\n    confirmDeleteInvoice: \"Are you sure you want to delete this invoice?\",\n    errorCreateInvoice: \"Unable to create invoice.\",\n    errorUpdateInvoice: \"Unable to update invoice.\",\n    errorDeleteInvoice: \"Unable to delete invoice.\",\n    \n    // Products\n    manageProducts: \"Manage your product catalog\",\n    productName: \"Product Name\",\n    description: \"Description\",\n    price: \"Price\",\n    stock: \"Stock\",\n    category: \"Category\",\n    newProduct: \"New Product\",\n    editProduct: \"Edit Product\",\n    noProduct: \"No products\",\n    noProductFound: \"No product found\",\n    addFirstProduct: \"Start by adding your first product.\",\n    noCategory: \"No category\",\n    unknownCategory: \"Unknown category\",\n    outOfStock: \"Out of stock\",\n    lowStock: \"Low stock\",\n    inStock: \"In stock\",\n    productCreated: \"Product created\",\n    productCreatedDesc: \"The product has been created successfully.\",\n    productModified: \"Product modified\",\n    productModifiedDesc: \"The product has been modified successfully.\",\n    productDeleted: \"Product deleted\",\n    productDeletedDesc: \"The product has been deleted successfully.\",\n    errorCreateProduct: \"Unable to create product.\",\n    errorUpdateProduct: \"Unable to update product.\",\n    errorDeleteProduct: \"Unable to delete product.\",\n    replenishmentAdded: \"Replenishment added\",\n    replenishmentAddedDesc: \"Stock has been replenished successfully.\",\n    errorAddReplenishment: \"Unable to add replenishment.\",\n    replenishStock: \"Replenish stock\",\n    replenishmentHistory: \"Replenishment history\",\n    deleteProduct: \"Delete product\",\n    productNamePlaceholder: \"Complete attiéké\",\n    descriptionPlaceholder: \"Traditional Ivorian dish made from cassava\",\n    selectCategory: \"Select a category\",\n    stockAlertThreshold: \"Stock alert threshold\",\n    stockManagedAutomatically: \"Stock is managed automatically via replenishments and sales\",\n    modify: \"Modify\",\n    units: \"units\",\n    \n    // Invoice Status\n    pending: \"Pending\",\n    paid: \"Paid\",\n    overdue: \"Overdue\",\n    \n    // Settings\n    language: \"Language\",\n    currency: \"Currency\",\n    profile: \"Profile\",\n    preferences: \"Preferences\",\n\n    personalInfo: \"Personal Information\",\n    updateProfile: \"Update Profile\",\n    profileFirstName: \"First Name\",\n    profileLastName: \"Last Name\",\n    profilePhone: \"Phone\",\n    profileCompany: \"Company\",\n    profilePosition: \"Position\",\n    profileAddress: \"Address\",\n    profileBusinessType: \"Business Type\",\n    \n    // Messages\n    success: \"Success\",\n    error: \"Error\",\n    confirmDelete: \"Are you sure you want to delete this item?\",\n    noData: \"No data available\",\n    \n    // Accounting\n    accounting: \"Accounting\",\n    manageFinances: \"Manage your finances, expenses and advances securely\",\n    totalExpenses: \"Total Expenses\",\n    pendingExpenses: \"Pending Expenses\",\n    approvedExpenses: \"Approved Expenses\",\n    totalImprestFunds: \"Total Imprest Funds\",\n    activeImprestFunds: \"Active Imprest Funds\",\n    totalRevenues: \"Total Revenues\",\n    monthlyRevenues: \"Monthly Revenues\",\n    recentRevenues: \"Recent Revenues\",\n    netResult: \"Net Result\",\n    filterByPeriod: \"Filter by period\",\n    from: \"From\",\n    to: \"To\",\n    clear: \"Clear\",\n    \n    // Accounting cards and tabs\n    awaiting: \"Pending\",\n    approved: \"Approved\",\n    imprestFunds: \"Imprest Funds\",\n    expensesToApprove: \"Expenses to approve\",\n    validatedExpenses: \"Validated expenses\",\n    activeFunds: \"active funds\",\n    benefit: \"Benefit\",\n    revenuesMinusExpenses: \"Revenues - Expenses\",\n    selectedPeriod: \"Selected Period\",\n    displaying: \"Displaying statistics from\",\n    \n    // Tabs\n    expenses: \"Expenses\",\n    revenues: \"Revenues\",\n    reports: \"Reports\",\n    \n    // Expense Management\n    expenseManagement: \"Expense Management\",\n    createManageExpenses: \"Create and manage all your business expenses\",\n    expenseList: \"Expense List\",\n    manageBusinessExpenses: \"Manage all your business expenses\",\n    downloadCsv: \"Download CSV\",\n    newExpense: \"New Expense\",\n    \n    // Alerts\n    alerts: \"Alerts\",\n    criticalStock: \"Out of Stock\",\n    overdueInvoice: \"Overdue Invoice\",\n    paymentDue: \"Payment Due\",\n    markAsRead: \"Mark as read\",\n    markAllAsRead: \"Mark all as read\",\n    deleteAlert: \"Delete alert\",\n    severity: \"Severity\",\n    type: \"Type\",\n    message: \"Message\",\n    createdAt: \"Created at\",\n    \n    // Landing page\n    appTitle: \"YGestion\",\n    appDescription: \"Complete business management application to optimize your sales, manage your clients and track your activity in real time.\",\n    loginButton: \"Sign In\",\n    createAccountButton: \"Create Account\",\n    newUserText: \"New to YGestion? Create your account and complete your profile to get started.\",\n    clientManagement: \"Client Management\",\n    clientManagementDesc: \"Centralize all your client information and their purchase history.\",\n    productCatalog: \"Product Catalog\",\n    productCatalogDesc: \"Organize your products by categories and track your inventory in real time.\",\n    invoicing: \"Invoicing\",\n    invoicingDesc: \"Create and manage your invoices easily with automatic PDF generation.\",\n    reporting: \"Reporting\",\n    reportingDesc: \"Analyze your performance with detailed reports and CSV exports.\",\n    whyChoose: \"Why choose YGestion?\",\n    modernInterface: \"Modern Interface\",\n    modernInterfaceDesc: \"Intuitive and responsive interface, accessible from any device.\",\n    secure: \"Secure\",\n    secureDesc: \"Secure authentication and protected data with encryption.\",\n    dashboardTitle: \"Dashboard\",\n    dashboardDesc: \"Visualize your KPIs and track your business activity evolution in real time.\",\n    readyToOptimize: \"Ready to optimize your business management?\",\n    joinCompanies: \"Join the companies that trust YGestion for their growth.\",\n    startNow: \"Start Now\",\n  }\n};\n\nexport const taxRates = [\n  { value: \"3.00\", label: \"3%\" },\n  { value: \"5.00\", label: \"5%\" },\n  { value: \"10.00\", label: \"10%\" },\n  { value: \"15.00\", label: \"15%\" },\n  { value: \"18.00\", label: \"18%\" },\n  { value: \"21.00\", label: \"21%\" },\n];\n\nexport const currencies = [\n  { value: \"XOF\", label: \"XOF - Franc CFA\", symbol: \"XOF\" },\n  { value: \"GHS\", label: \"GHS - Cedi ghanéen\", symbol: \"GH₵\" },\n];\n\nexport const languages = [\n  { value: \"fr\", label: \"Français\" },\n  { value: \"en\", label: \"English\" },\n];\n\n// Hook pour utiliser les traductions avec support des paramètres utilisateur\nexport function useTranslation(language?: Language) {\n  // Si aucune langue n'est fournie, essayer de récupérer depuis le localStorage\n  const currentLanguage = language || \n    (typeof window !== 'undefined' ? localStorage.getItem('preferredLanguage') as Language : null) || \n    'fr';\n    \n  return {\n    t: (key: keyof Translations) => translations[currentLanguage][key] || translations['fr'][key] || key,\n    language: currentLanguage,\n  };\n}\n\n// Fonction pour formater les prix selon la devise\nexport function formatPrice(amount: number | string, currency: string = 'XOF'): string {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  \n  switch (currency) {\n    case 'XOF':\n      return `${numAmount.toLocaleString('fr-FR')} F CFA`;\n    case 'GHS':\n      return `GH₵ ${numAmount.toLocaleString('en-US', { minimumFractionDigits: 2 })}`;\n    default:\n      // Fallback pour XOF par défaut\n      return `${numAmount.toLocaleString('fr-FR')} F CFA`;\n  }\n}","size_bytes":27649},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/accounting.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { PlusCircle, TrendingUp, TrendingDown, DollarSign, FileText, Wallet, CreditCard, Calendar, Filter } from \"lucide-react\";\nimport { ExpenseManager } from \"../components/accounting/expense-manager\";\nimport { ImprestManager } from \"../components/accounting/imprest-manager\";\nimport { ReportsManager } from \"../components/accounting/reports-manager\";\nimport { RevenueManager } from \"../components/accounting/revenue-manager\";\nimport { useTranslation, formatPrice } from \"@/lib/i18n\";\nimport { useSettings } from \"@/hooks/useSettings\";\n\nimport { EXPENSE_STATUS, PAYMENT_METHODS, IMPREST_STATUS } from \"@shared/schema\";\n\ninterface AccountingStats {\n  totalExpenses: number;\n  pendingExpenses: number;\n  approvedExpenses: number;\n  totalImprestFunds: number;\n  activeImprestFunds: number;\n  totalRevenues: number;\n  monthlyRevenues: number;\n  recentRevenues: number;\n  netResult: number; // Résultat net (Revenus - Dépenses)\n  monthlyExpensesByCategory: { category: string; amount: number; allocatedAmount: number }[];\n  recentExpenses: any[];\n}\n\nexport default function AccountingPage() {\n  const [startDate, setStartDate] = useState<string>(\"\");\n  const [endDate, setEndDate] = useState<string>(\"\");\n  const [showDateFilter, setShowDateFilter] = useState(false);\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<AccountingStats>({\n    queryKey: [\"/api/accounting/stats\", startDate, endDate],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (startDate && endDate) {\n        params.append('startDate', startDate);\n        params.append('endDate', endDate);\n      }\n      return fetch(`/api/accounting/stats?${params.toString()}`, {\n        credentials: 'include'\n      }).then(res => res.json());\n    },\n  });\n\n  const { data: expenses } = useQuery({\n    queryKey: [\"/api/accounting/expenses\"],\n  });\n\n  const { data: imprestFunds } = useQuery({\n    queryKey: [\"/api/accounting/imprest-funds\"],\n  });\n\n  if (statsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">{t('accounting')}</h1>\n          <p className=\"text-muted-foreground\">\n            {t('manageFinances')}\n          </p>\n        </div>\n        <Button \n          variant=\"outline\" \n          onClick={() => setShowDateFilter(!showDateFilter)}\n          data-testid=\"button-toggle-stats-date-filter\"\n        >\n          <Filter className=\"mr-2 h-4 w-4\" />\n          {t('filterByPeriod')}\n        </Button>\n      </div>\n\n      {/* Filtre par période pour les statistiques */}\n      {showDateFilter && (\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4\" />\n                <Label htmlFor=\"stats-start-date\">{t('from')} :</Label>\n                <Input\n                  id=\"stats-start-date\"\n                  type=\"date\"\n                  value={startDate}\n                  onChange={(e) => setStartDate(e.target.value)}\n                  className=\"w-auto\"\n                  data-testid=\"input-stats-start-date\"\n                />\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Label htmlFor=\"stats-end-date\">{t('to')} :</Label>\n                <Input\n                  id=\"stats-end-date\"\n                  type=\"date\"\n                  value={endDate}\n                  onChange={(e) => setEndDate(e.target.value)}\n                  className=\"w-auto\"\n                  data-testid=\"input-stats-end-date\"\n                />\n              </div>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setStartDate(\"\");\n                  setEndDate(\"\");\n                }}\n                data-testid=\"button-clear-stats-filter\"\n              >\n                {t('clear')}\n              </Button>\n            </div>\n            {startDate && endDate && (\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                {t('displaying')} {new Date(startDate).toLocaleDateString(settings?.language === 'en' ? 'en-US' : 'fr-FR')} {settings?.language === 'en' ? 'to' : 'au'} {new Date(endDate).toLocaleDateString(settings?.language === 'en' ? 'en-US' : 'fr-FR')}\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">{t('totalRevenues')}</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-xl font-bold break-words\">\n              {formatPrice(stats?.totalRevenues || 0, settings?.currency)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats?.recentRevenues || 0} {t('recentRevenues').toLowerCase()}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">{t('totalExpenses')}</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-xl font-bold break-words\">\n              {formatPrice(stats?.totalExpenses || 0, settings?.currency)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats?.recentExpenses?.length || 0} {settings?.language === 'en' ? 'recent expenses' : 'dépenses récentes'}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">{t('awaiting')}</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-orange-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.pendingExpenses || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {t('expensesToApprove')}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">{t('approved')}</CardTitle>\n            <TrendingDown className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.approvedExpenses || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {t('validatedExpenses')}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">{t('imprestFunds')}</CardTitle>\n            <Wallet className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-xl font-bold break-words\">\n              {formatPrice(stats?.totalImprestFunds || 0, settings?.currency)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats?.activeImprestFunds || 0} {t('activeFunds')}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              {t('netResult')} {startDate && endDate && `(${t('selectedPeriod')})`}\n            </CardTitle>\n            {(stats?.netResult || 0) >= 0 ? (\n              <TrendingUp className=\"h-4 w-4 text-green-600\" />\n            ) : (\n              <TrendingDown className=\"h-4 w-4 text-red-600\" />\n            )}\n          </CardHeader>\n          <CardContent>\n            <div className={`text-xl font-bold break-words ${(stats?.netResult || 0) >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              {formatPrice(stats?.netResult || 0, settings?.currency)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {(stats?.netResult || 0) >= 0 ? (settings?.language === 'en' ? 'Profit' : 'Bénéfice') : (settings?.language === 'en' ? 'Loss' : 'Perte')} ({t('revenuesMinusExpenses')})\n              {startDate && endDate && (\n                <><br />{settings?.language === 'en' ? 'Period' : 'Période'} : {new Date(startDate).toLocaleDateString(settings?.language === 'en' ? 'en-US' : 'fr-FR')} {settings?.language === 'en' ? 'to' : 'au'} {new Date(endDate).toLocaleDateString(settings?.language === 'en' ? 'en-US' : 'fr-FR')}</>\n              )}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      {stats?.recentExpenses && stats.recentExpenses.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>{settings?.language === 'en' ? 'Recent Expenses' : 'Dépenses récentes'}</CardTitle>\n            <CardDescription>\n              {settings?.language === 'en' ? 'Overview of your latest transactions' : 'Aperçu de vos dernières transactions'}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {stats.recentExpenses.slice(0, 3).map((expense: any) => {\n                const status = EXPENSE_STATUS.find(s => s.value === expense.status);\n                const paymentMethod = PAYMENT_METHODS.find(p => p.value === expense.paymentMethod);\n                \n                return (\n                  <div key={expense.id} className=\"flex items-center justify-between space-x-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-2 h-2 rounded-full bg-primary\"></div>\n                      <div>\n                        <p className=\"text-sm font-medium\">{expense.description}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {expense.category?.name} • {paymentMethod?.label}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm font-medium\">\n                        {formatPrice(parseFloat(expense.amount), settings?.currency)}\n                      </span>\n                      <Badge variant=\"secondary\" className={status?.color}>\n                        {status?.icon} {status?.label}\n                      </Badge>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Category Breakdown */}\n      {stats?.monthlyExpensesByCategory && stats.monthlyExpensesByCategory.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>{settings?.language === 'en' ? 'Expense Overview by Category' : 'Aperçu des dépenses par catégorie'}</CardTitle>\n            <CardDescription>\n              {settings?.language === 'en' ? 'Breakdown of current month expenses' : 'Répartition des dépenses du mois en cours'}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {stats.monthlyExpensesByCategory.map((item: any, index: number) => {\n                const percentage = item.allocatedAmount > 0 ? (item.amount / item.allocatedAmount) * 100 : 0;\n                \n                return (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"font-medium\">{item.category}</span>\n                      <span className=\"text-muted-foreground\">\n                        {formatPrice(item.amount, settings?.currency)} / {formatPrice(item.allocatedAmount, settings?.currency)} ({percentage.toFixed(1)}%)\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div \n                        className=\"bg-primary h-2 rounded-full transition-all\" \n                        style={{ width: `${percentage}%` }}\n                      />\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Main Tabs */}\n      <Tabs defaultValue=\"expenses\" className=\"space-y-6\">\n        <div className=\"flex flex-col sm:flex-row gap-4 items-start\">\n          <TabsList className=\"flex flex-col sm:flex-row w-full sm:w-auto h-auto p-1 bg-gray-100 dark:bg-gray-800 rounded-lg shadow-sm\">\n            <TabsTrigger \n              value=\"expenses\" \n              className=\"flex items-center justify-start gap-3 w-full sm:w-auto px-6 py-3 text-sm font-medium rounded-md transition-all hover:bg-red-50 dark:hover:bg-red-900/20 data-[state=active]:bg-red-500 data-[state=active]:text-white data-[state=active]:shadow-md hover:shadow-sm\"\n            >\n              <CreditCard className=\"h-5 w-5\" />\n              <span className=\"whitespace-nowrap\">{t('expenses')}</span>\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"imprest\" \n              className=\"flex items-center justify-start gap-3 w-full sm:w-auto px-6 py-3 text-sm font-medium rounded-md transition-all hover:bg-blue-50 dark:hover:bg-blue-900/20 data-[state=active]:bg-blue-500 data-[state=active]:text-white data-[state=active]:shadow-md hover:shadow-sm\"\n            >\n              <Wallet className=\"h-5 w-5\" />\n              <span className=\"whitespace-nowrap\">{t('imprestFunds')}</span>\n            </TabsTrigger>\n\n            <TabsTrigger \n              value=\"revenues\" \n              className=\"flex items-center justify-start gap-3 w-full sm:w-auto px-6 py-3 text-sm font-medium rounded-md transition-all hover:bg-green-50 dark:hover:bg-green-900/20 data-[state=active]:bg-green-500 data-[state=active]:text-white data-[state=active]:shadow-md hover:shadow-sm\"\n            >\n              <TrendingUp className=\"h-5 w-5\" />\n              <span className=\"whitespace-nowrap\">{t('revenues')}</span>\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"reports\" \n              className=\"flex items-center justify-start gap-3 w-full sm:w-auto px-6 py-3 text-sm font-medium rounded-md transition-all hover:bg-purple-50 dark:hover:bg-purple-900/20 data-[state=active]:bg-purple-500 data-[state=active]:text-white data-[state=active]:shadow-md hover:shadow-sm\"\n            >\n              <FileText className=\"h-5 w-5\" />\n              <span className=\"whitespace-nowrap\">{t('reports')}</span>\n            </TabsTrigger>\n          </TabsList>\n        </div>\n\n        <TabsContent value=\"expenses\">\n          <ExpenseManager />\n        </TabsContent>\n\n        <TabsContent value=\"imprest\">\n          <ImprestManager />\n        </TabsContent>\n\n        <TabsContent value=\"revenues\">\n          <RevenueManager />\n        </TabsContent>\n\n        <TabsContent value=\"reports\">\n          <ReportsManager />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":16324},"client/src/pages/admin-licenses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Shield, Key, AlertCircle, Check, X, Ban } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport type { License } from \"@shared/schema\";\n\nexport default function AdminLicensesPage() {\n  const [adminToken, setAdminToken] = useState(\"\");\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [newLicense, setNewLicense] = useState({\n    key: \"\",\n    clientName: \"\",\n    createdBy: \"Youssouphafils\",\n  });\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n\n  const queryClient = useQueryClient();\n\n  // Query to fetch all licenses\n  const {\n    data: licenses,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"admin-licenses\"],\n    queryFn: async (): Promise<License[]> => {\n      const response = await fetch(\"/api/admin/licenses\", {\n        headers: {\n          \"x-admin-token\": adminToken,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Accès refusé ou erreur serveur\");\n      }\n      \n      return response.json();\n    },\n    enabled: isAuthenticated,\n  });\n\n  // Mutation to create a new license\n  const createLicenseMutation = useMutation({\n    mutationFn: async (licenseData: typeof newLicense) => {\n      const response = await fetch(\"/api/admin/licenses\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-admin-token\": adminToken,\n        },\n        body: JSON.stringify(licenseData),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur lors de la création\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin-licenses\"] });\n      setNewLicense({ key: \"\", clientName: \"\", createdBy: \"Youssouphafils\" });\n      setCreateDialogOpen(false);\n    },\n  });\n\n  // Mutation to revoke a license\n  const revokeLicenseMutation = useMutation({\n    mutationFn: async (key: string) => {\n      const response = await fetch(`/api/admin/licenses/${key}/revoke`, {\n        method: \"PATCH\",\n        headers: {\n          \"x-admin-token\": adminToken,\n        },\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur lors de la révocation\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin-licenses\"] });\n    },\n  });\n\n  const handleAuthenticate = () => {\n    if (adminToken.trim()) {\n      setIsAuthenticated(true);\n    }\n  };\n\n  const handleCreateLicense = () => {\n    if (!newLicense.key.trim()) return;\n    createLicenseMutation.mutate(newLicense);\n  };\n\n  const generateLicenseKey = () => {\n    const year = new Date().getFullYear();\n    const random = Math.random().toString(36).substr(2, 3).toUpperCase();\n    const sequence = String(Math.floor(Math.random() * 999) + 1).padStart(3, '0');\n    return `WENIBAC-${year}-${sequence}-${random}`;\n  };\n\n  const getStatusBadge = (license: License) => {\n    if (license.revokedAt) {\n      return <Badge variant=\"destructive\" className=\"flex items-center gap-1\"><Ban className=\"w-3 h-3\" />Révoquée</Badge>;\n    }\n    if (license.activated) {\n      return <Badge variant=\"default\" className=\"flex items-center gap-1 bg-green-500\"><Check className=\"w-3 h-3\" />Activée</Badge>;\n    }\n    return <Badge variant=\"secondary\" className=\"flex items-center gap-1\"><Key className=\"w-3 h-3\" />En attente</Badge>;\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-pink-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md shadow-xl\">\n          <CardHeader className=\"text-center pb-4\">\n            <div className=\"mx-auto w-12 h-12 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mb-4\">\n              <Shield className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Administration YGestion</CardTitle>\n            <CardDescription>\n              Accès réservé à l'administrateur\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"adminToken\">Token d'administration</Label>\n              <Input\n                id=\"adminToken\"\n                type=\"password\"\n                placeholder=\"Entrez votre token admin\"\n                value={adminToken}\n                onChange={(e) => setAdminToken(e.target.value)}\n                onKeyDown={(e) => e.key === \"Enter\" && handleAuthenticate()}\n                data-testid=\"input-admin-token\"\n              />\n            </div>\n\n            <Button \n              onClick={handleAuthenticate}\n              className=\"w-full\"\n              disabled={!adminToken.trim()}\n              data-testid=\"button-authenticate\"\n            >\n              Se connecter\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        {/* Header */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-2xl\">Administration des Licences</CardTitle>\n                <CardDescription>\n                  Gestion des clés d'activation YGestion\n                </CardDescription>\n              </div>\n              <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-new-license\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Nouvelle licence\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Créer une nouvelle licence</DialogTitle>\n                    <DialogDescription>\n                      Générez une nouvelle clé d'activation pour un client\n                    </DialogDescription>\n                  </DialogHeader>\n                  \n                  <div className=\"space-y-4 py-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"licenseKey\">Clé d'activation</Label>\n                      <div className=\"flex gap-2\">\n                        <Input\n                          id=\"licenseKey\"\n                          value={newLicense.key}\n                          onChange={(e) => setNewLicense(prev => ({ ...prev, key: e.target.value }))}\n                          className=\"font-mono\"\n                          placeholder=\"WENIBAC-2025-001-ABC\"\n                          data-testid=\"input-new-license-key\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => setNewLicense(prev => ({ ...prev, key: generateLicenseKey() }))}\n                          data-testid=\"button-generate-key\"\n                        >\n                          Générer\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"clientName\">Nom du client</Label>\n                      <Input\n                        id=\"clientName\"\n                        value={newLicense.clientName}\n                        onChange={(e) => setNewLicense(prev => ({ ...prev, clientName: e.target.value }))}\n                        placeholder=\"Nom du client\"\n                        data-testid=\"input-client-name-new\"\n                      />\n                    </div>\n                  </div>\n\n                  {createLicenseMutation.isError && (\n                    <Alert variant=\"destructive\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        {createLicenseMutation.error?.message || \"Erreur lors de la création\"}\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  <DialogFooter>\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setCreateDialogOpen(false)}\n                      data-testid=\"button-cancel\"\n                    >\n                      Annuler\n                    </Button>\n                    <Button \n                      onClick={handleCreateLicense}\n                      disabled={!newLicense.key.trim() || createLicenseMutation.isPending}\n                      data-testid=\"button-create-license\"\n                    >\n                      {createLicenseMutation.isPending ? \"Création...\" : \"Créer\"}\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Licenses Table */}\n        <Card>\n          <CardContent className=\"p-0\">\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <div className=\"text-center\">\n                  <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n                  <p className=\"text-muted-foreground\">Chargement des licences...</p>\n                </div>\n              </div>\n            ) : error ? (\n              <div className=\"p-6\">\n                <Alert variant=\"destructive\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Erreur lors du chargement des licences. Vérifiez votre token d'administration.\n                  </AlertDescription>\n                </Alert>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Clé</TableHead>\n                    <TableHead>Client</TableHead>\n                    <TableHead>Statut</TableHead>\n                    <TableHead>Activée le</TableHead>\n                    <TableHead>Créée le</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {licenses?.map((license) => (\n                    <TableRow key={license.id}>\n                      <TableCell>\n                        <code className=\"bg-muted px-2 py-1 rounded font-mono text-sm\">\n                          {license.key}\n                        </code>\n                      </TableCell>\n                      <TableCell>{license.clientName || \"Non spécifié\"}</TableCell>\n                      <TableCell>{getStatusBadge(license)}</TableCell>\n                      <TableCell>\n                        {license.activatedAt ? (\n                          format(new Date(license.activatedAt), \"dd/MM/yyyy à HH:mm\", { locale: fr })\n                        ) : (\n                          \"—\"\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {license.createdAt ? (\n                          format(new Date(license.createdAt), \"dd/MM/yyyy à HH:mm\", { locale: fr })\n                        ) : (\n                          \"—\"\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {license.activated && !license.revokedAt && (\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => revokeLicenseMutation.mutate(license.key)}\n                            disabled={revokeLicenseMutation.isPending}\n                            data-testid={`button-revoke-${license.key}`}\n                          >\n                            <X className=\"w-4 h-4 mr-1\" />\n                            Révoquer\n                          </Button>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  {licenses?.length === 0 && (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                        Aucune licence créée pour le moment\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Stats */}\n        {licenses && licenses.length > 0 && (\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold\">{licenses.length}</div>\n                  <p className=\"text-sm text-muted-foreground\">Total licences</p>\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {licenses.filter(l => l.activated && !l.revokedAt).length}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Actives</p>\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    {licenses.filter(l => l.revokedAt).length}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Révoquées</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":14959},"client/src/pages/alerts.tsx":{"content":"import { BusinessAlerts } from '@/components/business-alerts';\n\nexport default function AlertsPage() {\n  return (\n    <div className=\"container mx-auto py-6 px-4\">\n      <BusinessAlerts />\n    </div>\n  );\n}","size_bytes":206},"client/src/pages/auth.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Users, \n  Mail, \n  Lock, \n  User,\n  LogIn,\n  UserPlus,\n  AlertTriangle,\n  Clock,\n  Shield,\n  ShieldX\n} from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { z } from \"zod\";\nimport { useLocation } from \"wouter\";\n\n// Schémas de validation\nconst loginSchema = z.object({\n  email: z.string().email(\"Email invalide\"),\n  password: z.string().min(6, \"Le mot de passe doit contenir au moins 6 caractères\"),\n});\n\nconst registerSchema = z.object({\n  firstName: z.string().min(2, \"Le prénom doit contenir au moins 2 caractères\"),\n  lastName: z.string().min(2, \"Le nom doit contenir au moins 2 caractères\"),\n  email: z.string().email(\"Email invalide\"),\n  password: z.string().min(6, \"Le mot de passe doit contenir au moins 6 caractères\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Les mots de passe ne correspondent pas\",\n  path: [\"confirmPassword\"],\n});\n\ntype LoginData = z.infer<typeof loginSchema>;\ntype RegisterData = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const { toast } = useToast();\n  const { user, isLoading: authLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"login\");\n  const [consecutiveFailures, setConsecutiveFailures] = useState(0);\n\n  // Rediriger si déjà connecté\n  useEffect(() => {\n    if (!authLoading && user) {\n      setLocation(\"/\");\n    }\n  }, [user, authLoading, setLocation]);\n\n  const loginForm = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginData) => {\n      const response = await fetch(\"/api/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        const errorData = {\n          message: error.message || \"Erreur de connexion\",\n          status: response.status\n        };\n        throw errorData;\n      }\n      \n      return response.json();\n    },\n    onSuccess: async (user) => {\n      // Réinitialiser le compteur d'échecs à la connexion réussie\n      setConsecutiveFailures(0);\n      toast({\n        title: \"Connexion réussie !\",\n        description: `Bienvenue ${user.firstName} !`,\n      });\n      \n      // Attendre que les données utilisateur soient mises à jour avant la redirection\n      await queryClient.refetchQueries({ queryKey: [\"/api/user\"] });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      // Incrémenter le compteur d'échecs consécutifs\n      const newFailureCount = consecutiveFailures + 1;\n      setConsecutiveFailures(newFailureCount);\n      \n      // Détection des différents types d'erreurs de sécurité\n      let title = \"Erreur de connexion\";\n      let description = error.message || \"Email ou mot de passe incorrect\";\n      let variant: \"destructive\" | \"default\" = \"destructive\";\n      \n      if (error.status === 429) {\n        // Rate limiting\n        title = \"Trop de tentatives\";\n        description = \"Trop de tentatives de connexion depuis cette adresse IP. Réessayez dans 15 minutes.\";\n      } else if (error.status === 401) {\n        // Gestion générique des erreurs d'authentification avec hint de sécurité après plusieurs échecs\n        if (newFailureCount >= 3) {\n          title = \"Vérification de sécurité\";\n          description = \"Pour votre sécurité, vérifiez bien vos informations de connexion. En cas d'oubli, contactez votre administrateur.\";\n        } else {\n          title = \"Informations incorrectes\";\n          description = \"L'email ou le mot de passe saisi ne correspond pas à nos enregistrements.\";\n        }\n      }\n      \n      toast({\n        title,\n        description,\n        variant,\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterData) => {\n      const { confirmPassword, ...registerData } = data;\n      const response = await fetch(\"/api/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(registerData),\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur lors de l'inscription\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (user) => {\n      toast({\n        title: \"Compte créé avec succès !\",\n        description: `Bienvenue ${user.firstName} ! Vous pouvez maintenant compléter votre profil.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      setLocation(\"/complete-profile\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur lors de l'inscription\",\n        description: error.message || \"Une erreur s'est produite\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onLogin = (data: LoginData) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterData) => {\n    registerMutation.mutate(data);\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"animate-pulse\">\n          <div className=\"w-96 h-96 bg-white rounded-xl shadow-sm\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Users className=\"w-8 h-8 text-white\" />\n          </div>\n          <p className=\"text-gray-600\">\n            Connectez-vous à votre espace de gestion commerciale\n          </p>\n        </div>\n\n        {/* Auth Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center\">\n              {activeTab === \"login\" ? \"Connexion\" : \"Créer un compte\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\">\n                  <LogIn className=\"w-4 h-4 mr-2\" />\n                  Connexion\n                </TabsTrigger>\n                <TabsTrigger value=\"register\">\n                  <UserPlus className=\"w-4 h-4 mr-2\" />\n                  Inscription\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Login Tab */}\n              <TabsContent value=\"login\" className=\"space-y-4\">\n                <Form {...loginForm}>\n                  <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                    <FormField\n                      control={loginForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"email\"\n                              placeholder=\"kouame@exemple.ci\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={loginForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Mot de passe</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"password\"\n                              placeholder=\"••••••••\"\n                              data-testid=\"input-password\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={loginMutation.isPending}\n                      data-testid=\"button-login\"\n                    >\n                      {loginMutation.isPending ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                          Connexion...\n                        </>\n                      ) : (\n                        <>\n                          <LogIn className=\"w-4 h-4 mr-2\" />\n                          Se connecter\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </TabsContent>\n\n              {/* Register Tab */}\n              <TabsContent value=\"register\" className=\"space-y-4\">\n                <Form {...registerForm}>\n                  <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={registerForm.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Prénom</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Kouamé\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nom</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Yao\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={registerForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"email\"\n                              placeholder=\"kouame@exemple.ci\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={registerForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Mot de passe</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"password\"\n                              placeholder=\"••••••••\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={registerForm.control}\n                      name=\"confirmPassword\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Confirmer le mot de passe</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"password\"\n                              placeholder=\"••••••••\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={registerMutation.isPending}\n                    >\n                      {registerMutation.isPending ? \"Création...\" : \"Créer mon compte\"}\n                    </Button>\n                  </form>\n                </Form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center mt-8 text-sm text-gray-500\">\n          <p>\n            En vous connectant, vous acceptez nos conditions d'utilisation\n            et notre politique de confidentialité.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14466},"client/src/pages/categories.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { \n  Tags, \n  Edit, \n  Trash2, \n  Plus,\n  Search,\n  Package\n} from \"lucide-react\";\nimport { insertCategorySchema, insertProductSchema, type Category, type NewCategory, type NewProduct } from \"@shared/schema\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\nexport default function Categories() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const { t } = useTranslation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [isProductDialogOpen, setIsProductDialogOpen] = useState(false);\n  const [selectedCategoryForProduct, setSelectedCategoryForProduct] = useState<Category | null>(null);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: t('unauthorized'),\n        description: t('unauthorizedDesc'),\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n\n  const form = useForm<NewCategory>({\n    resolver: zodResolver(insertCategorySchema.omit({ userId: true })),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  const productForm = useForm<NewProduct>({\n    resolver: zodResolver(insertProductSchema.omit({ userId: true })),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      priceHT: \"\",\n      stock: 0,\n      alertStock: 10,\n      categoryId: undefined,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: NewCategory) => {\n      await apiRequest(\"POST\", \"/api/categories\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Catégorie créée\",\n        description: \"La catégorie a été créée avec succès.\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer la catégorie.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: NewCategory) => {\n      if (!editingCategory) throw new Error(\"No category to update\");\n      await apiRequest(\"PUT\", `/api/categories/${editingCategory.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Catégorie modifiée\",\n        description: \"La catégorie a été modifiée avec succès.\",\n      });\n      setIsDialogOpen(false);\n      setEditingCategory(null);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier la catégorie.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/categories/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Catégorie supprimée\",\n        description: \"La catégorie a été supprimée avec succès.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer la catégorie.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (data: NewProduct) => {\n      await apiRequest(\"POST\", \"/api/products\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Produit créé\",\n        description: \"Le produit a été créé avec succès dans cette catégorie.\",\n      });\n      setIsProductDialogOpen(false);\n      setSelectedCategoryForProduct(null);\n      productForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer le produit.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleOpenDialog = (category?: Category) => {\n    if (category) {\n      setEditingCategory(category);\n      form.reset({\n        name: category.name,\n        description: category.description || \"\",\n      });\n    } else {\n      setEditingCategory(null);\n      form.reset();\n    }\n    setIsDialogOpen(true);\n  };\n\n  const handleOpenProductDialog = (category: Category) => {\n    setSelectedCategoryForProduct(category);\n    productForm.reset({\n      name: \"\",\n      description: \"\",\n      priceHT: \"\",\n      stock: 0,\n      alertStock: 10,\n      categoryId: category.id,\n    });\n    setIsProductDialogOpen(true);\n  };\n\n  const onSubmit = (data: NewCategory) => {\n    if (editingCategory) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const onProductSubmit = (data: NewProduct) => {\n    createProductMutation.mutate(data);\n  };\n\n  const filteredCategories = (categories as Category[]).filter((category: Category) =>\n    category.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    category.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  if (isLoading || categoriesLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Catégories\" \n          subtitle=\"Organisez vos produits par catégories\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200 h-24\" />\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title={t('categories')} \n        subtitle={t('organizeProductsByCategories')}\n        action={{\n          label: t('newCategory'),\n          onClick: () => handleOpenDialog()\n        }}\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        {/* Search Bar */}\n        <div className=\"mb-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder={t('searchCategory')}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n\n        {/* Categories Grid */}\n        {filteredCategories.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <Tags className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {searchTerm ? t('noCategoryFound') : t('noCategory')}\n              </h3>\n              <p className=\"text-gray-500 mb-4\">\n                {searchTerm \n                  ? t('tryModifySearch')\n                  : t('createFirstCategory')\n                }\n              </p>\n              {!searchTerm && (\n                <Button onClick={() => handleOpenDialog()}>\n                  <Plus className=\"mr-2 h-4 w-4\" />\n{t('newCategory')}\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredCategories.map((category: Category) => (\n              <Card key={category.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\">{category.name}</CardTitle>\n                    </div>\n                    <div className=\"flex space-x-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleOpenDialog(category)}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => deleteMutation.mutate(category.id)}\n                        disabled={deleteMutation.isPending}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {category.description && (\n                    <p className=\"text-sm text-gray-600 line-clamp-3\">\n                      {category.description}\n                    </p>\n                  )}\n                  <div className=\"flex justify-between items-center pt-2\">\n                    <div className=\"text-xs text-gray-500\">\n{t('createdOn')} {category.createdAt && new Date(category.createdAt).toLocaleDateString()}\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleOpenProductDialog(category)}\n                      className=\"text-xs\"\n                      data-testid={`button-add-product-${category.id}`}\n                    >\n                      <Package className=\"w-3 h-3 mr-1\" />\n{t('addProduct')}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Create/Edit Dialog */}\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>\n{editingCategory ? t('editCategory') : t('newCategory')}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t('categoryName')} *</FormLabel>\n                      <FormControl>\n                        <Input placeholder={t('categoryNamePlaceholder')} {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t('description')}</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder={t('categoryDescriptionPlaceholder')}\n                          rows={4}\n                          {...field}\n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-4 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsDialogOpen(false)}\n                  >\n                    Annuler\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending || updateMutation.isPending}\n                  >\n                    {editingCategory ? \"Modifier\" : \"Créer\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Create Product Dialog */}\n        <Dialog open={isProductDialogOpen} onOpenChange={setIsProductDialogOpen}>\n          <DialogContent className=\"sm:max-w-[600px]\">\n            <DialogHeader>\n              <DialogTitle>\n                Nouveau Produit - {selectedCategoryForProduct?.name}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...productForm}>\n              <form onSubmit={productForm.handleSubmit(onProductSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={productForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nom du produit *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"iPhone 15\" {...field} data-testid=\"input-product-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={productForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Description du produit\"\n                          rows={3}\n                          {...field}\n                          value={field.value || \"\"}\n                          data-testid=\"input-product-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={productForm.control}\n                    name=\"priceHT\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Prix HT *</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\"\n                            min=\"0.01\"\n                            placeholder=\"500000\"\n                            {...field}\n                            data-testid=\"input-product-price\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={productForm.control}\n                    name=\"stock\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Stock initial</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            min=\"0\"\n                            placeholder=\"10\"\n                            {...field}\n                            onChange={(e) => field.onChange(Math.max(0, parseInt(e.target.value) || 0))}\n                            data-testid=\"input-product-stock\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={productForm.control}\n                  name=\"alertStock\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Seuil d'alerte stock</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\"\n                          min=\"1\"\n                          placeholder=\"5\"\n                          {...field}\n                          onChange={(e) => field.onChange(Math.max(1, parseInt(e.target.value) || 1))}\n                          data-testid=\"input-product-alert-stock\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-4 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsProductDialogOpen(false)}\n                    data-testid=\"button-cancel-product\"\n                  >\n                    Annuler\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createProductMutation.isPending}\n                    data-testid=\"button-create-product\"\n                  >\n                    Créer le Produit\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":19501},"client/src/pages/clients.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { ClientListSkeleton } from \"@/components/loading-skeletons\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Users, \n  Mail, \n  Phone, \n  Building, \n  MapPin, \n  Edit, \n  Trash2, \n  Plus,\n  Search\n} from \"lucide-react\";\nimport { insertClientSchema, type Client, type InsertClient } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Users as UsersIcon } from \"lucide-react\";\nimport { useTranslation } from \"@/lib/i18n\";\n\nexport default function Clients() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const { t } = useTranslation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingClient, setEditingClient] = useState<Client | null>(null);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: t('unauthorized'),\n        description: t('unauthorizedDesc'),\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: clients = [], isLoading: clientsLoading } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n    retry: false,\n    refetchInterval: 60000, // Rafraîchit toutes les 60 secondes\n    refetchIntervalInBackground: true,\n    staleTime: 30000,\n  });\n\n  const form = useForm<InsertClient>({\n    resolver: zodResolver(insertClientSchema.omit({ userId: true })),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      company: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertClient) => {\n      await apiRequest(\"POST\", \"/api/clients\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      toast({\n        title: t('clientCreated'),\n        description: t('clientCreatedDesc'),\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: t('error'),\n        description: t('errorCreateClient'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: InsertClient) => {\n      if (!editingClient) throw new Error(\"No client to update\");\n      await apiRequest(\"PUT\", `/api/clients/${editingClient.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      toast({\n        title: t('clientModified'),\n        description: t('clientModifiedDesc'),\n      });\n      setIsDialogOpen(false);\n      setEditingClient(null);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: t('unauthorized'),\n          description: t('unauthorizedDesc'),\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: t('error'),\n        description: t('errorUpdateClient'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/clients/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      toast({\n        title: t('clientDeleted'),\n        description: t('clientDeletedDesc'),\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: t('unauthorized'),\n          description: t('unauthorizedDesc'),\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: t('error'),\n        description: t('errorDeleteClient'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleOpenDialog = (client?: Client) => {\n    if (client) {\n      setEditingClient(client);\n      form.reset({\n        name: client.name,\n        email: client.email || \"\",\n        phone: client.phone || \"\",\n        address: client.address || \"\",\n        company: client.company || \"\",\n      });\n    } else {\n      setEditingClient(null);\n      form.reset();\n    }\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = (data: InsertClient) => {\n    if (editingClient) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const filteredClients = clients.filter((client) =>\n    client.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    client.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    client.company?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  if (isLoading || clientsLoading) {\n    return <ClientListSkeleton />;\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title={t('clients')} \n        subtitle={t('manageClients')}\n        action={{\n          label: t('newClient'),\n          onClick: () => handleOpenDialog()\n        }}\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        {/* Search Bar */}\n        <div className=\"mb-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder={t('searchClient')}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n\n        {/* Clients Grid */}\n        {filteredClients.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <Users className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {searchTerm ? t('noClientFound') : t('noClient')}\n              </h3>\n              <p className=\"text-gray-500 mb-4\">\n                {searchTerm \n                  ? t('tryModifySearch')\n                  : t('addFirstClient')\n                }\n              </p>\n              {!searchTerm && (\n                <Button onClick={() => handleOpenDialog()}>\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  {t('newClient')}\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredClients.map((client: Client) => (\n              <Card key={client.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg\">{client.name}</CardTitle>\n                      {client.company && (\n                        <Badge variant=\"secondary\" className=\"mt-1\">\n                          {client.company}\n                        </Badge>\n                      )}\n                    </div>\n                    <div className=\"flex space-x-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleOpenDialog(client)}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => deleteMutation.mutate(client.id)}\n                        disabled={deleteMutation.isPending}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {client.email && (\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                      <Mail className=\"w-4 h-4\" />\n                      <span>{client.email}</span>\n                    </div>\n                  )}\n                  {client.phone && (\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                      <Phone className=\"w-4 h-4\" />\n                      <span>{client.phone}</span>\n                    </div>\n                  )}\n                  {client.address && (\n                    <div className=\"flex items-start space-x-2 text-sm text-gray-600\">\n                      <MapPin className=\"w-4 h-4 mt-0.5\" />\n                      <span className=\"line-clamp-2\">{client.address}</span>\n                    </div>\n                  )}\n                  <div className=\"pt-2 text-xs text-gray-500\">\n                    {t('createdOn')} {client.createdAt && new Date(client.createdAt).toLocaleDateString()}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Create/Edit Dialog */}\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingClient ? t('editClient') : t('newClient')}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t('fullName')} *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Kouamé Yao\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"company\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t('company')}</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"SARL AKWABA\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{t('email')}</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"kouame@exemple.ci\" {...field} value={field.value || \"\"} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{t('phone')}</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"07 12 34 56 78\" {...field} value={field.value || \"\"} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t('address')}</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Cocody Riviera 3, Abidjan\"\n                          rows={3}\n                          {...field} \n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-4 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsDialogOpen(false)}\n                  >\n                    {t('cancel')}\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending || updateMutation.isPending}\n                  >\n                    {editingClient ? t('edit') : t('create')}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":14452},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { useSettings } from \"@/hooks/useSettings\";\nimport Header from \"@/components/header\";\nimport StatsCard from \"@/components/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  TrendingUp,\n  FileText, \n  Users, \n  Package, \n  Eye, \n  Download, \n  Edit,\n  UserPlus,\n  Plus,\n  BarChart3,\n  FolderOutput,\n  AlertTriangle,\n  CircleAlert,\n  RefreshCw\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport SyncStatus from \"@/components/sync-status\";\nimport { DashboardSkeleton } from \"@/components/loading-skeletons\";\nimport { DashboardAlertsWidget } from \"@/components/dashboard-alerts-widget\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [location, setLocation] = useLocation();\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats = {}, isLoading: statsLoading, isFetching: statsFetching } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n    refetchInterval: 30000, // Rafraîchit toutes les 30 secondes\n    refetchIntervalInBackground: true, // Continue même quand l'onglet n'est pas visible\n    staleTime: 0, // Les données sont considérées comme obsolètes immédiatement\n  });\n\n  const { data: userSettings } = useQuery({\n    queryKey: [\"/api/user/settings\"],\n    retry: false,\n    refetchInterval: 60000, // Rafraîchit toutes les 60 secondes pour les paramètres\n    staleTime: 30000, // Les paramètres restent valides 30 secondes\n  });\n\n  if (isLoading || statsLoading) {\n    return <DashboardSkeleton />;\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Tableau de Bord\" \n          subtitle=\"Vue d'ensemble de votre activité commerciale\"\n          action={{\n            label: \"Nouvelle Facture\",\n            onClick: () => {}\n          }}\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200 h-32\" />\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (!stats) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Tableau de Bord\" \n          subtitle=\"Vue d'ensemble de votre activité commerciale\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-500\">Impossible de charger les statistiques</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  const formatCurrency = (amount: number) => {\n    const currency = (userSettings as any)?.currency || 'XOF';\n    \n    if (currency === 'XOF') {\n      return new Intl.NumberFormat('fr-FR', {\n        style: 'decimal',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      }).format(amount) + ' F CFA';\n    } else if (currency === 'GHS') {\n      return 'GH₵ ' + new Intl.NumberFormat('en-US', {\n        style: 'decimal',\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n      }).format(amount);\n    } else {\n      // Fallback pour XOF par défaut\n      return new Intl.NumberFormat('fr-FR', {\n        style: 'decimal',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      }).format(amount) + ' F CFA';\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">{t('paid')}</Badge>;\n      case 'pending':\n        return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">{t('pending')}</Badge>;\n      case 'overdue':\n        return <Badge variant=\"secondary\" className=\"bg-red-100 text-red-800\">{t('overdue')}</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('fr-FR');\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title={t('dashboard')}\n        subtitle={settings?.language === 'en' ? \"Overview of your business activity\" : \"Vue d'ensemble de votre activité commerciale\"}\n        showBreadcrumbs={false}\n        action={{\n          label: t('newInvoice'),\n          onClick: () => setLocation(\"/invoices\")\n        }}\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n          <StatsCard\n            title={t('revenue')}\n            value={formatCurrency((stats as any)?.revenue || 0)}\n            change={\n              (stats as any)?.revenueGrowth !== undefined && (stats as any)?.revenueGrowth !== 0\n                ? `${(stats as any).revenueGrowth >= 0 ? '+' : ''}${(stats as any).revenueGrowth}% ${t('vsLastMonth')}`\n                : t('noPreviousData')\n            }\n            changeType={(stats as any)?.revenueGrowth >= 0 ? \"positive\" : \"negative\"}\n            icon={TrendingUp}\n            iconColor=\"bg-green-50 text-green-500\"\n          />\n          <StatsCard\n            title={t('invoiceCount')}\n            value={(stats as any)?.invoiceCount || 0}\n            change={\n              (stats as any)?.recentInvoiceCount !== undefined\n                ? `+${(stats as any).recentInvoiceCount} ${t('thisWeek')}`\n                : t('noRecentInvoices')\n            }\n            changeType=\"positive\"\n            icon={FileText}\n            iconColor=\"bg-blue-50 text-blue-500\"\n          />\n          <StatsCard\n            title={t('activeClients')}\n            value={(stats as any)?.clientCount || 0}\n            change={\n              (stats as any)?.recentClientCount !== undefined\n                ? `+${(stats as any).recentClientCount} ${t('newThisMonth')}`\n                : t('noNewClients')\n            }\n            changeType=\"positive\"\n            icon={Users}\n            iconColor=\"bg-purple-50 text-purple-500\"\n          />\n          <StatsCard\n            title={t('productCount')}\n            value={(stats as any)?.productCount || 0}\n            change={`${((stats as any)?.lowStockProducts || []).length} ${t('stockAlerts')}`}\n            changeType={((stats as any)?.lowStockProducts || []).length > 0 ? \"negative\" : \"neutral\"}\n            icon={Package}\n            iconColor=\"bg-orange-50 text-orange-500\"\n          />\n        </div>\n\n        {/* Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Recent Invoices */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>{t('recentInvoices')}</CardTitle>\n                  <Link href=\"/invoices\">\n                    <Button variant=\"ghost\" size=\"sm\">\n                      {t('viewAll')}\n                    </Button>\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-white/50 dark:bg-gray-800/50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          {t('invoiceNumber')}\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          {t('client')}\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          {t('amount')}\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          {t('status')}\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          {t('date')}\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          {t('actions')}\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {((stats as any)?.recentInvoices || []).length === 0 ? (\n                        <tr>\n                          <td colSpan={6} className=\"px-6 py-4 text-center text-gray-500\">\n                            {t('noData')}\n                          </td>\n                        </tr>\n                      ) : (\n                        ((stats as any)?.recentInvoices || []).map((invoice: any) => (\n                          <tr key={invoice.id} className=\"hover:bg-white/30 dark:hover:bg-gray-700/30\">\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                              {invoice.number}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                              {invoice.client?.name || t('unknownClient')}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                              {formatCurrency(parseFloat(invoice.totalTTC || invoice.total || \"0\"))}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              {getStatusBadge(invoice.status)}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                              {invoice.createdAt && formatDate(invoice.createdAt)}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                              <Link href={`/invoices/${invoice.id}`}>\n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <Eye className=\"w-4 h-4\" />\n                                </Button>\n                              </Link>\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <Download className=\"w-4 h-4\" />\n                              </Button>\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column */}\n          <div className=\"space-y-6\">\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('quickActions')}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Link href=\"/clients\">\n                  <Button variant=\"ghost\" className=\"w-full justify-start bg-gradient-to-r from-blue-50 to-indigo-50 hover:from-blue-100 hover:to-indigo-100 border border-blue-200 hover:border-blue-300 shadow-sm\">\n                    <UserPlus className=\"mr-3 w-4 h-4 text-blue-600\" />\n                    <span className=\"text-blue-800 font-medium\">{t('newClient')}</span>\n                  </Button>\n                </Link>\n                <Link href=\"/products\">\n                  <Button variant=\"ghost\" className=\"w-full justify-start bg-green-50 hover:bg-green-100\">\n                    <Plus className=\"mr-3 w-4 h-4 text-green-500\" />\n                    {t('newProduct')}\n                  </Button>\n                </Link>\n                <Link href=\"/sales\">\n                  <Button variant=\"ghost\" className=\"w-full justify-start bg-blue-50 hover:bg-blue-100\">\n                    <BarChart3 className=\"mr-3 w-4 h-4 text-blue-500\" />\n                    {t('generateReport')}\n                  </Button>\n                </Link>\n                <Link href=\"/export\">\n                  <Button variant=\"ghost\" className=\"w-full justify-start bg-purple-50 hover:bg-purple-100\">\n                    <FolderOutput className=\"mr-3 w-4 h-4 text-purple-500\" />\n                    {t('exportData')}\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Top Products */}\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('bestSellingProducts')}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {((stats as any)?.topProducts || []).length === 0 ? (\n                  <p className=\"text-center text-gray-500 py-4\">{t('noSalesRecorded')}</p>\n                ) : (\n                  ((stats as any)?.topProducts || []).map((product: any, index: number) => (\n                    <div key={product.id} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center\">\n                          <Package className=\"w-5 h-5 text-gray-500\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">{product.name}</p>\n                          <p className=\"text-xs text-gray-500\">#{index + 1}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-medium text-gray-900\">{product.salesCount}</p>\n                        <p className=\"text-xs text-gray-500\">{t('sold')}</p>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Business Alerts Widget */}\n            <DashboardAlertsWidget />\n          </div>\n        </div>\n      </main>\n      \n      {/* Sync Status Indicator */}\n      <SyncStatus \n        isOnline={true}\n        isSyncing={statsFetching}\n        lastSync={statsFetching ? undefined : new Date()}\n      />\n    </div>\n  );\n}\n","size_bytes":15720},"client/src/pages/export.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Download, \n  FileText, \n  Users, \n  Package, \n  Database,\n  Calendar,\n  CheckCircle,\n  AlertCircle\n} from \"lucide-react\";\n\nexport default function Export() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [exportStatus, setExportStatus] = useState<{ [key: string]: 'idle' | 'loading' | 'success' | 'error' }>({});\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const handleExport = async (type: 'clients' | 'products' | 'invoices') => {\n    setExportStatus(prev => ({ ...prev, [type]: 'loading' }));\n    \n    try {\n      const response = await fetch(`/api/export/${type}`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      // Create blob and download\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `${type}_${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n      \n      setExportStatus(prev => ({ ...prev, [type]: 'success' }));\n      toast({\n        title: \"Export réussi\",\n        description: `Les données ${type} ont été exportées avec succès.`,\n      });\n      \n      // Reset status after 3 seconds\n      setTimeout(() => {\n        setExportStatus(prev => ({ ...prev, [type]: 'idle' }));\n      }, 3000);\n      \n    } catch (error) {\n      console.error(`Error exporting ${type}:`, error);\n      setExportStatus(prev => ({ ...prev, [type]: 'error' }));\n      toast({\n        title: \"Erreur d'export\",\n        description: `Impossible d'exporter les données ${type}.`,\n        variant: \"destructive\",\n      });\n      \n      // Reset status after 3 seconds\n      setTimeout(() => {\n        setExportStatus(prev => ({ ...prev, [type]: 'idle' }));\n      }, 3000);\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'loading':\n        return <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\" />;\n      case 'success':\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'error':\n        return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n      default:\n        return <Download className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getButtonText = (type: string, status: string) => {\n    switch (status) {\n      case 'loading':\n        return 'Export en cours...';\n      case 'success':\n        return 'Exporté avec succès';\n      case 'error':\n        return 'Erreur - Réessayer';\n      default:\n        return `Exporter ${type}`;\n    }\n  };\n\n  const isButtonDisabled = (status: string) => {\n    return status === 'loading' || status === 'success';\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Export & Sauvegarde\" \n          subtitle=\"Exportez vos données en format CSV\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200 h-32\" />\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title=\"Export & Sauvegarde\" \n        subtitle=\"Exportez vos données en format CSV\"\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          {/* Info Card */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start space-x-3\">\n                <Database className=\"w-6 h-6 text-blue-600 mt-1\" />\n                <div>\n                  <h3 className=\"font-semibold text-blue-900 mb-2\">À propos des exports</h3>\n                  <p className=\"text-blue-700 text-sm mb-3\">\n                    Exportez vos données au format CSV pour les sauvegarder ou les importer dans d'autres applications.\n                    Les fichiers incluent toutes les informations disponibles pour chaque type de données.\n                  </p>\n                  <ul className=\"text-blue-700 text-sm space-y-1\">\n                    <li>• Les exports incluent toutes vos données</li>\n                    <li>• Format CSV compatible avec Excel et autres tableurs</li>\n                    <li>• Encodage UTF-8 pour les caractères spéciaux</li>\n                    <li>• Données à jour au moment de l'export</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Export Options */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Clients Export */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-purple-50 rounded-lg flex items-center justify-center\">\n                    <Users className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-lg\">Clients</CardTitle>\n                    <p className=\"text-sm text-gray-500\">Export de la base clients</p>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    Exporte tous vos clients avec leurs informations complètes : nom, email, téléphone, adresse, entreprise.\n                  </p>\n                  <Badge variant=\"outline\" className=\"mb-3\">\n                    <Calendar className=\"w-3 h-3 mr-1\" />\n                    Inclut les dates de création\n                  </Badge>\n                </div>\n                <Button \n                  className=\"w-full\"\n                  onClick={() => handleExport('clients')}\n                  disabled={isButtonDisabled(exportStatus.clients || 'idle')}\n                  variant={exportStatus.clients === 'error' ? 'destructive' : 'default'}\n                >\n                  {getStatusIcon(exportStatus.clients || 'idle')}\n                  <span className=\"ml-2\">\n                    {getButtonText('Clients', exportStatus.clients || 'idle')}\n                  </span>\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Products Export */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center\">\n                    <Package className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-lg\">Produits</CardTitle>\n                    <p className=\"text-sm text-gray-500\">Export du catalogue</p>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    Exporte tous vos produits avec les détails : nom, description, prix, stock, catégorie.\n                  </p>\n                  <Badge variant=\"outline\" className=\"mb-3\">\n                    <Calendar className=\"w-3 h-3 mr-1\" />\n                    Inclut les niveaux de stock\n                  </Badge>\n                </div>\n                <Button \n                  className=\"w-full\"\n                  onClick={() => handleExport('products')}\n                  disabled={isButtonDisabled(exportStatus.products || 'idle')}\n                  variant={exportStatus.products === 'error' ? 'destructive' : 'default'}\n                >\n                  {getStatusIcon(exportStatus.products || 'idle')}\n                  <span className=\"ml-2\">\n                    {getButtonText('Produits', exportStatus.products || 'idle')}\n                  </span>\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Invoices Export */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center\">\n                    <FileText className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-lg\">Factures</CardTitle>\n                    <p className=\"text-sm text-gray-500\">Export des factures</p>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    Exporte toutes vos factures avec les montants, statuts, clients et dates d'échéance.\n                  </p>\n                  <Badge variant=\"outline\" className=\"mb-3\">\n                    <Calendar className=\"w-3 h-3 mr-1\" />\n                    Inclut les statuts de paiement\n                  </Badge>\n                </div>\n                <Button \n                  className=\"w-full\"\n                  onClick={() => handleExport('invoices')}\n                  disabled={isButtonDisabled(exportStatus.invoices || 'idle')}\n                  variant={exportStatus.invoices === 'error' ? 'destructive' : 'default'}\n                >\n                  {getStatusIcon(exportStatus.invoices || 'idle')}\n                  <span className=\"ml-2\">\n                    {getButtonText('Factures', exportStatus.invoices || 'idle')}\n                  </span>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Export History */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recommandations de sauvegarde</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Fréquence recommandée</h4>\n                    <ul className=\"text-sm text-gray-600 space-y-1\">\n                      <li>• <strong>Quotidienne :</strong> Pour les données critiques</li>\n                      <li>• <strong>Hebdomadaire :</strong> Export complet de sécurité</li>\n                      <li>• <strong>Mensuelle :</strong> Archive de fin de mois</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Bonnes pratiques</h4>\n                    <ul className=\"text-sm text-gray-600 space-y-1\">\n                      <li>• Stockez les exports en lieu sûr</li>\n                      <li>• Vérifiez l'intégrité des fichiers</li>\n                      <li>• Conservez plusieurs versions</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":12213},"client/src/pages/invoice-detail.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useParams, useLocation } from \"wouter\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport InvoicePDF from \"@/components/invoice-pdf\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  ArrowLeft, \n  Download, \n  Edit, \n  Trash2,\n  CheckCircle,\n  Clock,\n  AlertCircle,\n  Printer\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { type Invoice, type Client, type InvoiceItem, INVOICE_STATUS } from \"@shared/schema\";\n\nexport default function InvoiceDetail() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const invoiceId = params.id;\n  \n  // Check if print parameter is in URL\n  const urlParams = new URLSearchParams(window.location.search);\n  const shouldPrint = urlParams.get('print') === 'true';\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n\n\n  const { data: invoice, isLoading: invoiceLoading } = useQuery<Invoice & { items: InvoiceItem[]; client: Client }>({\n    queryKey: [\"/api/invoices\", invoiceId, \"details\"],\n    retry: false,\n    enabled: !!invoiceId,\n  });\n\n  const { data: user } = useQuery({\n    queryKey: [\"/api/user\"],\n    retry: false,\n  });\n\n  const { data: userSettings } = useQuery({\n    queryKey: [\"/api/user/settings\"],\n    retry: false,\n  });\n\n  // Auto-print when invoice is loaded and print parameter is present\n  useEffect(() => {\n    if (shouldPrint && invoice && !invoiceLoading) {\n      // Clean URL by removing print parameter\n      const url = new URL(window.location.href);\n      url.searchParams.delete('print');\n      window.history.replaceState({}, '', url.toString());\n      \n      // Trigger print after a short delay to allow rendering\n      setTimeout(() => {\n        window.print();\n      }, 1000);\n    }\n  }, [shouldPrint, invoice, invoiceLoading]);\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      await apiRequest(\"PUT\", `/api/invoices/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\", invoiceId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Statut mis à jour\",\n        description: \"Le statut de la facture a été mis à jour.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de mettre à jour le statut.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/invoices/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Facture supprimée\",\n        description: \"La facture a été supprimée avec succès.\",\n      });\n      setLocation(\"/invoices\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer la facture.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const formatCurrency = (amount: string | number) => {\n    const currency = (userSettings as any)?.currency || 'XOF';\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    \n    if (currency === 'XOF') {\n      return new Intl.NumberFormat('fr-FR', {\n        style: 'decimal',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      }).format(numAmount) + ' F CFA';\n    } else if (currency === 'GHS') {\n      return 'GH₵ ' + new Intl.NumberFormat('en-US', {\n        style: 'decimal',\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n      }).format(numAmount);\n    } else {\n      // Fallback pour XOF par défaut\n      return new Intl.NumberFormat('fr-FR', {\n        style: 'decimal',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      }).format(numAmount) + ' F CFA';\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusInfo = INVOICE_STATUS.find(s => s.value === status);\n    if (statusInfo) {\n      return (\n        <Badge className={statusInfo.color}>\n          {statusInfo.icon} {statusInfo.label}\n        </Badge>\n      );\n    }\n    // Fallback for old statuses\n    switch (status) {\n      case 'paid':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle className=\"w-3 h-3 mr-1\" />Payée</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\"><Clock className=\"w-3 h-3 mr-1\" />En attente</Badge>;\n      case 'overdue':\n        return <Badge className=\"bg-red-100 text-red-800\"><AlertCircle className=\"w-3 h-3 mr-1\" />En retard</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('fr-FR');\n  };\n\n  const getPaymentMethodLabel = (paymentMethod: string) => {\n    const methods = {\n      cash: \"💰 Espèces\",\n      bank_transfer: \"🏦 Virement bancaire\", \n      check: \"💳 Chèque\",\n      card: \"💳 Carte bancaire\",\n      mobile_money: \"📱 Mobile Money\"\n    };\n    return methods[paymentMethod as keyof typeof methods] || paymentMethod;\n  };\n\n  const handleDownloadPDF = async () => {\n    try {\n      // Dynamically import jsPDF and html2canvas to avoid SSR issues\n      const { default: jsPDF } = await import('jspdf');\n      const { default: html2canvas } = await import('html2canvas');\n      \n      // Get the invoice content element\n      const element = document.querySelector('.invoice-content') as HTMLElement;\n      if (!element) {\n        console.error(\"Invoice content element not found\");\n        toast({\n          title: \"Erreur\",\n          description: \"Contenu de la facture non trouvé\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Hide action buttons temporarily for cleaner PDF\n      const actionButtons = document.querySelectorAll('.print\\\\:hidden');\n      const originalDisplays: string[] = [];\n      actionButtons.forEach((button, index) => {\n        const el = button as HTMLElement;\n        originalDisplays[index] = el.style.display;\n        el.style.display = 'none';\n      });\n      \n      // Wait a moment for styles to apply\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      // Generate canvas from HTML with better options\n      const canvas = await html2canvas(element, {\n        scale: 1.5,\n        useCORS: true,\n        allowTaint: true,\n        backgroundColor: '#ffffff',\n        logging: false,\n        removeContainer: true,\n        imageTimeout: 15000,\n        onclone: (clonedDoc) => {\n          // Remove any remaining print-hidden elements in the clone\n          const printHiddenElements = clonedDoc.querySelectorAll('.print\\\\:hidden');\n          printHiddenElements.forEach(el => el.remove());\n        }\n      });\n      \n      // Restore action buttons\n      actionButtons.forEach((button, index) => {\n        const el = button as HTMLElement;\n        el.style.display = originalDisplays[index] || '';\n      });\n      \n      // Create PDF with proper dimensions\n      const pdf = new jsPDF({\n        orientation: 'portrait',\n        unit: 'mm',\n        format: 'a4',\n      });\n      \n      const pageWidth = pdf.internal.pageSize.getWidth();\n      const pageHeight = pdf.internal.pageSize.getHeight();\n      const margin = 10;\n      const contentWidth = pageWidth - (2 * margin);\n      \n      // Calculate dimensions\n      const imgWidth = contentWidth;\n      const imgHeight = (canvas.height * imgWidth) / canvas.width;\n      \n      // Add the image to PDF\n      const imgData = canvas.toDataURL('image/png', 0.95);\n      \n      if (imgHeight <= pageHeight - (2 * margin)) {\n        // Single page\n        pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight);\n      } else {\n        // Multiple pages - use a simpler approach\n        pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight);\n      }\n      \n      // Generate filename with current date\n      const now = new Date();\n      const dateStr = now.toLocaleDateString('fr-FR').replace(/\\//g, '-');\n      const timeStr = now.toLocaleTimeString('fr-FR').replace(/:/g, '-');\n      const filename = `Facture_${invoice?.number || 'UNKNOWN'}_${dateStr}_${timeStr}.pdf`;\n      \n      // Save the PDF\n      pdf.save(filename);\n      \n      toast({\n        title: \"PDF téléchargé\",\n        description: `Facture ${invoice?.number || 'UNKNOWN'} téléchargée avec succès`,\n      });\n      \n    } catch (error) {\n      console.error('Erreur lors de la génération du PDF:', error);\n      toast({\n        title: \"Erreur\",\n        description: `Erreur lors de la génération du PDF: ${error instanceof Error ? error.message : 'Erreur inconnue'}`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePrint = () => {\n    // Store original styles\n    const originalTitle = document.title;\n    \n    // Change page title for print\n    document.title = `Facture ${invoice?.number || 'UNKNOWN'}`;\n    \n    // Open print dialog\n    window.print();\n    \n    // Restore original title after a short delay\n    setTimeout(() => {\n      document.title = originalTitle;\n    }, 100);\n  };\n\n  if (isLoading || invoiceLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Détail de la Facture\" \n          subtitle=\"Chargement...\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200 h-96\" />\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (!invoice) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Facture non trouvée\" \n          subtitle=\"Cette facture n'existe pas ou vous n'avez pas l'autorisation de la voir\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-500 mb-4\">Facture non trouvée</p>\n            <Link href=\"/invoices\">\n              <Button>\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Retour aux Factures\n              </Button>\n            </Link>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title={`Facture ${invoice.number}`}\n        subtitle={`Client: ${invoice.client?.name || 'Client inconnu'}`}\n        action={{\n          label: \"Retour\",\n          onClick: () => setLocation(\"/invoices\")\n        }}\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        {/* Status and Actions Bar */}\n        <div className=\"mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div>\n              <p className=\"text-sm text-gray-500\">Statut</p>\n              {getStatusBadge(invoice.status)}\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-500\">Total TTC</p>\n              <p className=\"text-lg font-semibold\">{formatCurrency(invoice.totalTTC)}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-500\">Date d'échéance</p>\n              <p className=\"text-sm\">{invoice.dueDate ? formatDate(invoice.dueDate) : 'Non définie'}</p>\n            </div>\n            {invoice.paymentMethod && (\n              <div>\n                <p className=\"text-sm text-gray-500\">Moyen de paiement</p>\n                <p className=\"text-sm font-medium\">{getPaymentMethodLabel(invoice.paymentMethod)}</p>\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {invoice.status !== 'payee' && (\n              <Button\n                onClick={() => updateStatusMutation.mutate({ id: invoice.id, status: 'payee' })}\n                disabled={updateStatusMutation.isPending}\n                className=\"bg-green-600 hover:bg-green-700\"\n              >\n                <CheckCircle className=\"mr-2 h-4 w-4\" />\n                Marquer comme Payée\n              </Button>\n            )}\n            \n            <Button variant=\"outline\" onClick={handlePrint}>\n              <Printer className=\"mr-2 h-4 w-4\" />\n              Imprimer\n            </Button>\n            \n            <Button variant=\"outline\" onClick={handleDownloadPDF}>\n              <Download className=\"mr-2 h-4 w-4\" />\n              Télécharger PDF\n            </Button>\n            \n            <Button variant=\"outline\">\n              <Edit className=\"mr-2 h-4 w-4\" />\n              Modifier\n            </Button>\n            \n            <Button \n              variant=\"destructive\"\n              onClick={() => {\n                if (confirm('Êtes-vous sûr de vouloir supprimer cette facture ?')) {\n                  deleteMutation.mutate(invoice.id);\n                }\n              }}\n              disabled={deleteMutation.isPending}\n            >\n              <Trash2 className=\"mr-2 h-4 w-4\" />\n              Supprimer\n            </Button>\n          </div>\n        </div>\n\n        {/* Invoice PDF Preview */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Aperçu de la Facture</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <InvoicePDF invoice={invoice} user={user} />\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":14436},"client/src/pages/invoices.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  FileText, \n  Edit, \n  Trash2, \n  Plus,\n  Search,\n  Eye,\n  Download,\n  Minus,\n  Printer\n} from \"lucide-react\";\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/components/ui/pagination\";\nimport { insertInvoiceSchema, insertInvoiceItemSchema, insertClientSchema, TAX_RATES, INVOICE_STATUS, type Invoice, type InsertInvoice, type Client, type Product, type User } from \"@shared/schema\";\nimport { SimpleProductSelect } from \"@/components/simple-product-select\";\nimport { ClientSearch } from \"@/components/client-search\";\nimport { SimpleProductSelectV2 } from \"@/components/simple-product-select-v2\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { z } from \"zod\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport InvoicePDF from \"@/components/invoice-pdf\";\nimport { InvoiceListSkeleton, InvoiceFormSkeleton } from \"@/components/loading-skeletons\";\n\n// Payment method options\nconst PAYMENT_METHODS = [\n  { value: \"cash\", label: \"💰 Espèces\", icon: \"💰\" },\n  { value: \"bank_transfer\", label: \"🏦 Virement bancaire\", icon: \"🏦\" },\n  { value: \"check\", label: \"💳 Chèque\", icon: \"💳\" },\n  { value: \"card\", label: \"💳 Carte bancaire\", icon: \"💳\" },\n  { value: \"mobile_money\", label: \"📱 Mobile Money\", icon: \"📱\" },\n];\n\nconst createInvoiceFormSchema = z.object({\n  clientId: z.number().min(1, \"Veuillez sélectionner un client\"),\n  status: z.string().min(1, \"Veuillez sélectionner un statut\"),\n  tvaRate: z.string().min(1, \"Veuillez sélectionner un taux de TVA\"),\n  paymentMethod: z.string().min(1, \"Veuillez sélectionner un moyen de paiement\"),\n  dueDate: z.string().optional(),\n  notes: z.string().optional(),\n  items: z.array(z.object({\n    productId: z.number().optional(),\n    productName: z.string().min(1, \"Nom du produit requis\"),\n    quantity: z.number().min(1, \"Quantité doit être supérieure à 0\"),\n    priceHT: z.string().min(1, \"Prix HT requis\"),\n  })).min(1, \"Au moins un article est requis\"),\n});\n\ntype CreateInvoiceForm = z.infer<typeof createInvoiceFormSchema>;\n\nexport default function Invoices() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const { t } = useTranslation();\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [viewingInvoice, setViewingInvoice] = useState<any>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: invoices = [], isLoading: invoicesLoading } = useQuery<Invoice[]>({\n    queryKey: [\"/api/invoices\"],\n    retry: false,\n    refetchInterval: 45000, // Rafraîchit toutes les 45 secondes\n    refetchIntervalInBackground: true,\n    staleTime: 0,\n  });\n\n  const { data: clients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n    retry: false,\n    refetchInterval: 60000, // Rafraîchit toutes les 60 secondes\n    staleTime: 30000,\n  });\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n    retry: false,\n    refetchInterval: 60000, // Rafraîchit toutes les 60 secondes\n    staleTime: 30000,\n  });\n\n  // Get user data for invoice header\n  const { data: user } = useQuery<User>({\n    queryKey: [\"/api/user\"],\n    retry: false,\n    refetchInterval: 120000, // Rafraîchit toutes les 2 minutes\n    staleTime: 60000,\n  });\n\n  const form = useForm<CreateInvoiceForm>({\n    resolver: zodResolver(createInvoiceFormSchema),\n    defaultValues: {\n      clientId: undefined as any,\n      status: \"en_attente\",\n      tvaRate: \"18.00\",\n      paymentMethod: \"cash\",\n      dueDate: \"\",\n      notes: \"\",\n      items: [{ productId: undefined, productName: \"\", quantity: 1, priceHT: \"\" }],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"items\",\n  });\n\n  const generateInvoiceNumber = () => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const invoiceCount = invoices.length + 1;\n    return `FAC-${year}-${invoiceCount.toString().padStart(3, '0')}`;\n  };\n\n  const createMutation = useMutation({\n    mutationFn: async (data: CreateInvoiceForm) => {\n      // Calculate totals with new tax logic\n      const totalHT = data.items.reduce((sum, item) => \n        sum + (item.quantity * parseFloat(item.priceHT)), 0\n      );\n      const tvaRateNum = parseFloat(data.tvaRate);\n      const totalTVA = totalHT * (tvaRateNum / 100);\n      const totalTTC = totalHT + totalTVA;\n\n      const invoiceData: InsertInvoice = {\n        number: generateInvoiceNumber(),\n        clientId: data.clientId,\n        status: data.status,\n        totalHT: totalHT.toFixed(2),\n        tvaRate: data.tvaRate,\n        totalTVA: totalTVA.toFixed(2),\n        totalTTC: totalTTC.toFixed(2),\n        paymentMethod: data.paymentMethod,\n        dueDate: data.dueDate ? new Date(data.dueDate) : null,\n        notes: data.notes,\n        userId: \"\", // Will be set by backend\n      };\n\n      const items = data.items.map(item => ({\n        productId: item.productId || null,\n        productName: item.productName,\n        quantity: item.quantity,\n        priceHT: item.priceHT,\n        totalHT: (item.quantity * parseFloat(item.priceHT)).toFixed(2),\n      }));\n\n      await apiRequest(\"POST\", \"/api/invoices\", { invoice: invoiceData, items });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      toast({\n        title: \"Facture créée\",\n        description: \"La facture a été créée avec succès.\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      console.error(\"Invoice creation error:\", error);\n      toast({\n        title: \"Erreur\",\n        description: (error as any)?.message || \"Impossible de créer la facture.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      await apiRequest(\"PUT\", `/api/invoices/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Statut mis à jour\",\n        description: \"Le statut de la facture a été mis à jour.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de mettre à jour le statut.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/invoices/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      toast({\n        title: \"Facture supprimée\",\n        description: \"La facture a été supprimée avec succès.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer la facture.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Client creation mutation\n  const createClientMutation = useMutation({\n    mutationFn: async (name: string) => {\n      const clientData = { name: name.trim() };\n      const response = await apiRequest(\"POST\", \"/api/clients\", clientData);\n      return await response.json();\n    },\n    onSuccess: (newClient: Client) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      form.setValue(\"clientId\", newClient.id);\n      toast({\n        title: \"Client créé\",\n        description: `Le client \"${newClient.name}\" a été créé avec succès.`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: `Impossible de créer le client: ${error.message || error}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateInvoiceForm) => {\n    createMutation.mutate(data);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusInfo = INVOICE_STATUS.find(s => s.value === status);\n    if (statusInfo) {\n      return (\n        <Badge className={statusInfo.color}>\n          {statusInfo.icon} {statusInfo.label}\n        </Badge>\n      );\n    }\n    // Fallback for old statuses\n    switch (status) {\n      case 'paid':\n        return <Badge className=\"bg-green-100 text-green-800\">✅ Payée</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">⏳ En attente</Badge>;\n      case 'overdue':\n        return <Badge className=\"bg-red-100 text-red-800\">⚠️ En retard</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return new Intl.NumberFormat('fr-FR', {\n      style: 'decimal',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(numAmount) + ' F CFA';\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('fr-FR');\n  };\n\n  const getClientName = (clientId: number) => {\n    const client = clients.find((c: Client) => c.id === clientId);\n    return client?.name || 'Client inconnu';\n  };\n\n  const getPaymentMethodLabel = (paymentMethod: string) => {\n    const method = PAYMENT_METHODS.find(m => m.value === paymentMethod);\n    return method ? method.label : paymentMethod || '-';\n  };\n\n  const getProductPrice = (productId: number) => {\n    const product = products.find((p: Product) => p.id === productId);\n    return product?.priceHT || \"0\";\n  };\n\n  const getProductName = (productId: number) => {\n    const product = products.find((p: Product) => p.id === productId);\n    return product?.name || \"\";\n  };\n\n  const filteredInvoices = invoices.filter((invoice: Invoice) => {\n    const matchesSearch = invoice.number.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      getClientName(invoice.clientId).toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || invoice.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  // Pagination calculations\n  const totalItems = filteredInvoices.length;\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedInvoices = filteredInvoices.slice(startIndex, endIndex);\n\n  // Reset to first page when filters change\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [searchTerm, statusFilter]);\n\n  const watchedItems = form.watch(\"items\");\n  const watchedStatus = form.watch(\"status\");\n  \n  // Tax rates for the selector (use the one from shared schema)\n  // TAX_RATES is already imported from shared/schema.ts\n  const watchedTvaRate = form.watch(\"tvaRate\");\n  const subtotal = watchedItems.reduce((sum, item) => \n    sum + (item.quantity * parseFloat(item.priceHT || \"0\")), 0\n  );\n  const tvaRateNum = parseFloat(watchedTvaRate || \"18.00\");\n  const tax = subtotal * (tvaRateNum / 100);\n  const total = subtotal + tax;\n\n  if (isLoading || invoicesLoading) {\n    return <InvoiceListSkeleton />;\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title={t('invoices')} \n        subtitle={t('manageInvoices')}\n        action={{\n          label: t('newInvoice'),\n          onClick: () => setIsDialogOpen(true)\n        }}\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        {/* Filters */}\n        <div className=\"mb-6 flex gap-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder={t('searchInvoice')}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">{t('allStatuses')}</SelectItem>\n              {INVOICE_STATUS.map((status) => (\n                <SelectItem key={status.value} value={status.value}>\n                  {status.icon} {status.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Invoices Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>{t('invoices')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {filteredInvoices.length === 0 ? (\n              <div className=\"py-12 text-center\">\n                <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  {searchTerm || statusFilter !== \"all\" ? t('noInvoiceFound') : t('noInvoice')}\n                </h3>\n                <p className=\"text-gray-500 mb-4\">\n                  {searchTerm || statusFilter !== \"all\"\n                    ? t('tryModifyFilters')\n                    : t('createFirstInvoice')\n                  }\n                </p>\n                {!searchTerm && statusFilter === \"all\" && (\n                  <Button onClick={() => setIsDialogOpen(true)}>\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    {t('newInvoice')}\n                  </Button>\n                )}\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        {t('invoiceNumber')}\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        {t('client')}\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        {t('amount')}\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        {t('status')}\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Date\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        {t('dueDate')}\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        {t('paymentMethod')}\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        {t('actions')}\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {paginatedInvoices.map((invoice: Invoice) => (\n                      <tr key={invoice.id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                          {invoice.number}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {getClientName(invoice.clientId)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {formatCurrency(invoice.totalTTC)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Select\n                            value={invoice.status}\n                            onValueChange={(status) => updateStatusMutation.mutate({ id: invoice.id, status })}\n                          >\n                            <SelectTrigger className=\"w-44\">\n                              {getStatusBadge(invoice.status)}\n                            </SelectTrigger>\n                            <SelectContent>\n                              {INVOICE_STATUS.map((status) => (\n                                <SelectItem key={status.value} value={status.value}>\n                                  {status.icon} {status.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {invoice.createdAt && formatDate(invoice.createdAt)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {invoice.dueDate ? formatDate(invoice.dueDate) : \"-\"}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {getPaymentMethodLabel(invoice.paymentMethod)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              // Fetch full invoice with items\n                              fetch(`/api/invoices/${invoice.id}`, {\n                                credentials: 'include'\n                              })\n                              .then(res => res.json())\n                              .then(data => setViewingInvoice(data))\n                              .catch(() => toast({\n                                title: \"Erreur\",\n                                description: \"Impossible de charger la facture.\",\n                                variant: \"destructive\",\n                              }));\n                            }}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={async () => {\n                              try {\n                                // Fetch full invoice with items for PDF generation\n                                const response = await fetch(`/api/invoices/${invoice.id}`, {\n                                  credentials: 'include'\n                                });\n                                const fullInvoice = await response.json();\n                                \n                                // Generate PDF using the same logic as invoice-detail page\n                                const { default: jsPDF } = await import('jspdf');\n                                const { default: html2canvas } = await import('html2canvas');\n                                \n                                // Create a temporary hidden div with the invoice content\n                                const tempDiv = document.createElement('div');\n                                tempDiv.style.position = 'absolute';\n                                tempDiv.style.left = '-9999px';\n                                tempDiv.style.top = '0';\n                                tempDiv.style.width = '210mm';\n                                tempDiv.style.background = 'white';\n                                tempDiv.style.padding = '20px';\n                                \n                                // Add invoice HTML content to temp div\n                                tempDiv.innerHTML = `\n                                  <div style=\"font-family: Arial, sans-serif; color: black; line-height: 1.6;\">\n                                    <div style=\"display: flex; justify-content: space-between; margin-bottom: 40px;\">\n                                      <div style=\"display: flex; align-items: flex-start; gap: 16px;\">\n\n                                        <div>\n                                          <h1 style=\"font-size: 36px; font-weight: bold; margin: 0;\">FACTURE</h1>\n                                          <p style=\"font-size: 18px; color: #666; margin: 8px 0;\">${fullInvoice.number}</p>\n                                        </div>\n                                      </div>\n                                      <div style=\"text-align: right;\">\n                                        <div style=\"font-size: 24px; font-weight: bold; color: #3b82f6; margin-bottom: 8px;\">\n                                          ${user?.company || `${user?.firstName || ''} ${user?.lastName || ''}`.trim() || 'Mon Entreprise'}\n                                        </div>\n                                        <div style=\"font-size: 14px; color: #666;\">\n                                          ${user?.address ? `<p>${user.address}</p>` : ''}\n                                          ${user?.email ? `<p>Email: ${user.email}</p>` : ''}\n                                          ${user?.phone ? `<p>Tél: ${user.phone}</p>` : ''}\n                                          ${user?.businessType ? `<p>Activité: ${user.businessType}</p>` : ''}\n                                        </div>\n                                      </div>\n                                    </div>\n                                    \n                                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 40px; margin-bottom: 40px;\">\n                                      <div>\n                                        <h3 style=\"font-weight: bold; margin-bottom: 12px;\">Facturé à :</h3>\n                                        <div style=\"color: #333;\">\n                                          <p style=\"font-weight: 500; margin: 4px 0;\">${fullInvoice.client?.name || 'Client inconnu'}</p>\n                                          ${fullInvoice.client?.company ? `<p style=\"margin: 4px 0;\">${fullInvoice.client.company}</p>` : ''}\n                                          ${fullInvoice.client?.email ? `<p style=\"margin: 4px 0;\">${fullInvoice.client.email}</p>` : ''}\n                                          ${fullInvoice.client?.phone ? `<p style=\"margin: 4px 0;\">${fullInvoice.client.phone}</p>` : ''}\n                                          ${fullInvoice.client?.address ? `<p style=\"margin: 4px 0; white-space: pre-line;\">${fullInvoice.client.address}</p>` : ''}\n                                        </div>\n                                      </div>\n                                      \n                                      <div>\n                                        <h3 style=\"font-weight: bold; margin-bottom: 12px;\">Détails de la facture :</h3>\n                                        <div style=\"color: #333;\">\n                                          <div style=\"display: flex; justify-content: space-between; margin: 8px 0;\">\n                                            <span>Date d'émission :</span>\n                                            <span>${new Date(fullInvoice.issueDate).toLocaleDateString('fr-FR')}</span>\n                                          </div>\n                                          <div style=\"display: flex; justify-content: space-between; margin: 8px 0;\">\n                                            <span>Date d'échéance :</span>\n                                            <span>${fullInvoice.dueDate ? new Date(fullInvoice.dueDate).toLocaleDateString('fr-FR') : 'Non définie'}</span>\n                                          </div>\n                                          <div style=\"display: flex; justify-content: space-between; margin: 8px 0;\">\n                                            <span>Statut :</span>\n                                            <span style=\"color: #f59e0b; font-weight: 500;\">En attente</span>\n                                          </div>\n                                        </div>\n                                      </div>\n                                    </div>\n                                    \n                                    <h3 style=\"font-weight: bold; margin-bottom: 16px;\">Articles</h3>\n                                    <table style=\"width: 100%; border-collapse: collapse; margin-bottom: 32px;\">\n                                      <thead>\n                                        <tr style=\"background-color: #f9fafb;\">\n                                          <th style=\"padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb;\">Description</th>\n                                          <th style=\"padding: 12px; text-align: right; border-bottom: 1px solid #e5e7eb;\">Qté</th>\n                                          <th style=\"padding: 12px; text-align: right; border-bottom: 1px solid #e5e7eb;\">Prix HT</th>\n                                          <th style=\"padding: 12px; text-align: right; border-bottom: 1px solid #e5e7eb;\">Total HT</th>\n                                        </tr>\n                                      </thead>\n                                      <tbody>\n                                        ${fullInvoice.items?.map((item: any) => `\n                                          <tr>\n                                            <td style=\"padding: 12px; border-bottom: 1px solid #e5e7eb;\">${item.productName}</td>\n                                            <td style=\"padding: 12px; text-align: right; border-bottom: 1px solid #e5e7eb;\">${item.quantity}</td>\n                                            <td style=\"padding: 12px; text-align: right; border-bottom: 1px solid #e5e7eb;\">${formatCurrency(item.priceHT)}</td>\n                                            <td style=\"padding: 12px; text-align: right; border-bottom: 1px solid #e5e7eb;\">${formatCurrency(item.quantity * parseFloat(item.priceHT))}</td>\n                                          </tr>\n                                        `).join('') || ''}\n                                      </tbody>\n                                    </table>\n                                    \n                                    <div style=\"display: flex; justify-content: flex-end;\">\n                                      <div style=\"width: 300px;\">\n                                        <div style=\"display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #e5e7eb;\">\n                                          <span>Total HT:</span>\n                                          <span style=\"font-weight: 500;\">${formatCurrency(fullInvoice.totalHT)}</span>\n                                        </div>\n                                        <div style=\"display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #e5e7eb;\">\n                                          <span>TVA (${fullInvoice.tvaRate}%):</span>\n                                          <span style=\"font-weight: 500;\">${formatCurrency(fullInvoice.totalTTC - fullInvoice.totalHT)}</span>\n                                        </div>\n                                        <div style=\"display: flex; justify-content: space-between; padding: 12px 0; border-top: 2px solid #374151; font-weight: bold; font-size: 18px;\">\n                                          <span>Total TTC:</span>\n                                          <span>${formatCurrency(fullInvoice.totalTTC)}</span>\n                                        </div>\n                                      </div>\n                                    </div>\n                                    \n                                    ${fullInvoice.notes ? `\n                                      <div style=\"margin-top: 32px;\">\n                                        <h3 style=\"font-weight: bold; margin-bottom: 8px;\">Notes</h3>\n                                        <p style=\"color: #666; white-space: pre-line;\">${fullInvoice.notes}</p>\n                                      </div>\n                                    ` : ''}\n                                    \n                                    <!-- Footer -->\n                                    <div style=\"margin-top: 32px; padding-top: 24px; border-top: 1px solid #e5e7eb; text-align: center; color: #666; font-size: 14px;\">\n                                      <p style=\"margin-bottom: 8px;\">Merci pour votre confiance !</p>\n                                      ${(user?.email || user?.phone) ? `\n                                        <p style=\"margin: 0;\">\n                                          Pour toute question concernant cette facture, contactez-nous :\n                                          ${user?.email ? `<br>Email : ${user.email}` : ''}\n                                          ${user?.phone ? `<br>Téléphone : ${user.phone}` : ''}\n                                        </p>\n                                      ` : ''}\n                                    </div>\n                                  </div>\n                                `;\n                                \n                                document.body.appendChild(tempDiv);\n                                \n                                // Generate canvas from the temp div\n                                const canvas = await html2canvas(tempDiv, {\n                                  scale: 1.5,\n                                  useCORS: true,\n                                  allowTaint: true,\n                                  backgroundColor: '#ffffff',\n                                  logging: false,\n                                  width: tempDiv.scrollWidth,\n                                  height: tempDiv.scrollHeight\n                                });\n                                \n                                // Remove temp div\n                                document.body.removeChild(tempDiv);\n                                \n                                // Create and save PDF\n                                const pdf = new jsPDF({\n                                  orientation: 'portrait',\n                                  unit: 'mm',\n                                  format: 'a4',\n                                });\n                                \n                                const pageWidth = pdf.internal.pageSize.getWidth();\n                                const pageHeight = pdf.internal.pageSize.getHeight();\n                                const margin = 10;\n                                const contentWidth = pageWidth - (2 * margin);\n                                \n                                const imgWidth = contentWidth;\n                                const imgHeight = (canvas.height * imgWidth) / canvas.width;\n                                \n                                const imgData = canvas.toDataURL('image/png', 0.95);\n                                pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight);\n                                \n                                const now = new Date();\n                                const dateStr = now.toLocaleDateString('fr-FR').replace(/\\//g, '-');\n                                const timeStr = now.toLocaleTimeString('fr-FR').replace(/:/g, '-');\n                                const filename = `Facture_${fullInvoice.number}_${dateStr}_${timeStr}.pdf`;\n                                \n                                pdf.save(filename);\n                                \n                                toast({\n                                  title: \"PDF téléchargé\",\n                                  description: `Facture ${fullInvoice.number} téléchargée avec succès`,\n                                });\n                                \n                              } catch (error) {\n                                console.error('Erreur lors de la génération du PDF:', error);\n                                toast({\n                                  title: \"Erreur\",\n                                  description: \"Impossible de générer le PDF\",\n                                  variant: \"destructive\",\n                                });\n                              }\n                            }}\n                          >\n                            <Download className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              // Navigate to invoice detail page and trigger print\n                              setLocation(`/invoices/${invoice.id}?print=true`);\n                            }}\n                          >\n                            <Printer className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => deleteMutation.mutate(invoice.id)}\n                            disabled={deleteMutation.isPending}\n                            className={deleteMutation.isPending ? \"opacity-50\" : \"\"}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n            \n            {/* Pagination */}\n            {totalPages > 1 && (\n              <div className=\"mt-6 flex items-center justify-between\">\n                <div className=\"text-sm text-gray-500\">\n                  Affichage de {startIndex + 1} à {Math.min(endIndex, totalItems)} sur {totalItems} factures\n                </div>\n                <Pagination>\n                  <PaginationContent>\n                    {/* Première page */}\n                    <PaginationItem>\n                      <PaginationLink\n                        href=\"#\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          setCurrentPage(1);\n                        }}\n                        className={currentPage <= 1 ? \"pointer-events-none opacity-50\" : \"\"}\n                        size=\"sm\"\n                      >\n                        ««\n                      </PaginationLink>\n                    </PaginationItem>\n                    \n                    <PaginationItem>\n                      <PaginationPrevious \n                        href=\"#\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          if (currentPage > 1) {\n                            setCurrentPage(currentPage - 1);\n                          }\n                        }}\n                        className={currentPage <= 1 ? \"pointer-events-none opacity-50\" : \"\"}\n                      />\n                    </PaginationItem>\n                    \n                    {/* Page numbers */}\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <PaginationItem key={page}>\n                        <PaginationLink\n                          href=\"#\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            setCurrentPage(page);\n                          }}\n                          isActive={currentPage === page}\n                        >\n                          {page}\n                        </PaginationLink>\n                      </PaginationItem>\n                    ))}\n                    \n                    <PaginationItem>\n                      <PaginationNext \n                        href=\"#\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          if (currentPage < totalPages) {\n                            setCurrentPage(currentPage + 1);\n                          }\n                        }}\n                        className={currentPage >= totalPages ? \"pointer-events-none opacity-50\" : \"\"}\n                      />\n                    </PaginationItem>\n                    \n                    {/* Dernière page */}\n                    <PaginationItem>\n                      <PaginationLink\n                        href=\"#\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          setCurrentPage(totalPages);\n                        }}\n                        className={currentPage >= totalPages ? \"pointer-events-none opacity-50\" : \"\"}\n                        size=\"sm\"\n                      >\n                        »»\n                      </PaginationLink>\n                    </PaginationItem>\n                  </PaginationContent>\n                </Pagination>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Create Invoice Dialog */}\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{t('newInvoice')}</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"clientId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{t('client')} *</FormLabel>\n                        <FormControl>\n                          <ClientSearch\n                            value={field.value}\n                            onChange={field.onChange}\n                            placeholder={t('searchOrCreateClient')}\n                            onCreateNew={(name) => createClientMutation.mutate(name)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"status\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{t('status')} *</FormLabel>\n                        <Select \n                          onValueChange={field.onChange}\n                          value={field.value || \"en_attente\"}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder={t('selectStatus')} />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {INVOICE_STATUS.map((status) => (\n                              <SelectItem key={status.value} value={status.value}>\n                                {status.icon} {status.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"tvaRate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{t('taxRate')} *</FormLabel>\n                        <Select \n                          onValueChange={field.onChange}\n                          value={field.value || \"18.00\"}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder={t('selectTaxRate')} />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {TAX_RATES.map((rate) => (\n                              <SelectItem key={rate.value} value={rate.value}>\n                                {rate.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"paymentMethod\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{t('paymentMethod')} *</FormLabel>\n                        <Select \n                          onValueChange={field.onChange}\n                          value={field.value || \"cash\"}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder={t('selectPaymentMethod')} />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {PAYMENT_METHODS.map((method) => (\n                              <SelectItem key={method.value} value={method.value}>\n                                {method.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Afficher le champ de date d'échéance pour \"en attente\" et \"partiellement réglée\" */}\n                  {(watchedStatus === \"en_attente\" || watchedStatus === \"partiellement_reglee\") && (\n                    <FormField\n                      control={form.control}\n                      name=\"dueDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('dueDate')}</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n                </div>\n\n                {/* Items */}\n                <div>\n                  <FormLabel className=\"text-base font-medium\">{t('products')} *</FormLabel>\n                  <div className=\"border border-gray-200 rounded-lg mt-2\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead className=\"bg-gray-50\">\n                          <tr>\n                            <th className=\"px-4 py-2 text-left text-sm font-medium text-gray-700\">{t('product')}</th>\n                            <th className=\"px-4 py-2 text-left text-sm font-medium text-gray-700\">{t('quantity')}</th>\n                            <th className=\"px-4 py-2 text-left text-sm font-medium text-gray-700\">{t('priceHT')}</th>\n                            <th className=\"px-4 py-2 text-left text-sm font-medium text-gray-700\">{t('total')}</th>\n                            <th className=\"px-4 py-2\"></th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {fields.map((field, index) => (\n                            <tr key={field.id}>\n                              <td className=\"px-4 py-2\">\n                                <div className=\"space-y-2\">\n                                  <SimpleProductSelectV2\n                                    value={form.watch(`items.${index}.productId`)}\n                                    onChange={(productId) => {\n                                      form.setValue(`items.${index}.productId`, productId);\n                                    }}\n                                    onProductSelect={(product) => {\n                                      form.setValue(`items.${index}.productName`, product.name);\n                                      form.setValue(`items.${index}.priceHT`, product.priceHT);\n                                      form.trigger([`items.${index}.productName`, `items.${index}.priceHT`]);\n                                    }}\n                                    placeholder={t('searchProduct')}\n                                  />\n                                  <FormField\n                                    control={form.control}\n                                    name={`items.${index}.productName`}\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormControl>\n                                          <Input placeholder={t('productServiceName')} {...field} />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n                                </div>\n                              </td>\n                              <td className=\"px-4 py-2\">\n                                <FormField\n                                  control={form.control}\n                                  name={`items.${index}.quantity`}\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormControl>\n                                        <Input \n                                          type=\"number\" \n                                          min=\"1\"\n                                          {...field}\n                                          onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                              </td>\n                              <td className=\"px-4 py-2\">\n                                <FormField\n                                  control={form.control}\n                                  name={`items.${index}.priceHT`}\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormControl>\n                                        <Input \n                                          type=\"number\" \n                                          step=\"0.01\"\n                                          min=\"0\"\n                                          placeholder=\"0.00\"\n                                          {...field}\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                              </td>\n                              <td className=\"px-4 py-2 text-gray-900\">\n                                {formatCurrency(\n                                  watchedItems[index]?.quantity * parseFloat(watchedItems[index]?.priceHT || \"0\") || 0\n                                )}\n                              </td>\n                              <td className=\"px-4 py-2\">\n                                {fields.length > 1 && (\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => remove(index)}\n                                  >\n                                    <Minus className=\"w-4 h-4\" />\n                                  </Button>\n                                )}\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                    <div className=\"p-4 border-t\">\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        onClick={() => append({ productId: undefined, productName: \"\", quantity: 1, priceHT: \"\" })}\n                      >\n                        <Plus className=\"mr-1 w-4 h-4\" />\n                        {t('addLine')}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t('notes')}</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder={t('additionalNotes')}\n                          rows={3}\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Totals */}\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div></div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">{t('totalHT')}:</span>\n                      <span className=\"text-sm font-medium\">{formatCurrency(subtotal)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">{t('tva')} ({tvaRateNum}%):</span>\n                      <span className=\"text-sm font-medium\">{formatCurrency(tax)}</span>\n                    </div>\n                    <div className=\"flex justify-between border-t pt-2\">\n                      <span className=\"text-base font-semibold\">{t('totalTTC')}:</span>\n                      <span className=\"text-base font-semibold\">{formatCurrency(total)}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-4 pt-6 border-t\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsDialogOpen(false)}\n                  >\n                    {t('cancel')}\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending}\n                  >\n                    {createMutation.isPending ? (\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current\"></div>\n                        <span>{t('creating')}...</span>\n                      </div>\n                    ) : (\n                      t('createInvoice')\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* View Invoice Dialog */}\n        {viewingInvoice && (\n          <Dialog open={!!viewingInvoice} onOpenChange={() => setViewingInvoice(null)}>\n            <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-y-auto print:max-w-none print:max-h-none print:overflow-visible\">\n              <DialogHeader className=\"print:hidden\">\n                <DialogTitle>Facture {viewingInvoice.number}</DialogTitle>\n              </DialogHeader>\n              <InvoicePDF invoice={viewingInvoice} user={user} />\n            </DialogContent>\n          </Dialog>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":54937},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { BarChart3, Users, Package, FileText, TrendingUp } from \"lucide-react\";\nimport { useTranslation } from \"@/lib/i18n\";\n\nexport default function Landing() {\n  const { t } = useTranslation();\n  \n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"container mx-auto px-4 py-16\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <div className=\"flex items-center justify-center mb-8\">\n            <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center\">\n              <BarChart3 className=\"w-8 h-8 text-white\" />\n            </div>\n          </div>\n          <h1 className=\"text-5xl font-bold text-gray-900 mb-6\">\n            {t('appTitle')}\n          </h1>\n          <p className=\"text-xl text-gray-600 mb-8 max-w-2xl mx-auto\">\n            {t('appDescription')}\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              className=\"text-lg px-8 py-4\"\n              onClick={() => window.location.href = '/auth'}\n            >\n              {t('loginButton')}\n            </Button>\n            <Button \n              size=\"lg\" \n              variant=\"outline\"\n              className=\"text-lg px-8 py-4\"\n              onClick={() => window.location.href = '/auth'}\n            >\n              {t('createAccountButton')}\n            </Button>\n          </div>\n          <p className=\"text-sm text-gray-500 mt-4\">\n            {t('newUserText')}\n          </p>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16\">\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-6\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">{t('clientManagement')}</h3>\n              <p className=\"text-sm text-gray-600\">\n                {t('clientManagementDesc')}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-6\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Package className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">{t('productCatalog')}</h3>\n              <p className=\"text-sm text-gray-600\">\n                {t('productCatalogDesc')}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-6\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <FileText className=\"w-6 h-6 text-purple-600\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">{t('invoicing')}</h3>\n              <p className=\"text-sm text-gray-600\">\n                {t('invoicingDesc')}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-6\">\n              <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <TrendingUp className=\"w-6 h-6 text-orange-600\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">{t('reporting')}</h3>\n              <p className=\"text-sm text-gray-600\">\n                {t('reportingDesc')}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Benefits Section */}\n        <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n          <h2 className=\"text-3xl font-bold text-center text-gray-900 mb-8\">\n            {t('whyChoose')}\n          </h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl mb-4\">🚀</div>\n              <h3 className=\"text-xl font-semibold mb-2\">{t('modernInterface')}</h3>\n              <p className=\"text-gray-600\">\n                {t('modernInterfaceDesc')}\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl mb-4\">🔒</div>\n              <h3 className=\"text-xl font-semibold mb-2\">{t('secure')}</h3>\n              <p className=\"text-gray-600\">\n                {t('secureDesc')}\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl mb-4\">📊</div>\n              <h3 className=\"text-xl font-semibold mb-2\">{t('dashboardTitle')}</h3>\n              <p className=\"text-gray-600\">\n                {t('dashboardDesc')}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center mt-16\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n            {t('readyToOptimize')}\n          </h2>\n          <p className=\"text-gray-600 mb-8\">\n            {t('joinCompanies')}\n          </p>\n          <Button \n            size=\"lg\"\n            onClick={() => window.location.href = '/api/login'}\n          >\n            {t('startNow')}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5615},"client/src/pages/license-activation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Check, Key, AlertCircle } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\n\ninterface ActivationResponse {\n  message: string;\n  license: {\n    key: string;\n    clientName: string;\n    activatedAt: string;\n  };\n}\n\nexport default function LicenseActivationPage() {\n  const [formData, setFormData] = useState({\n    key: \"\",\n    clientName: \"\",\n    deviceId: \"\",\n  });\n  \n  const [isRedirecting, setIsRedirecting] = useState(false);\n  const queryClient = useQueryClient();\n\n  // Vérifier automatiquement si l'utilisateur est déjà activé\n  useEffect(() => {\n    const checkUserStatus = async () => {\n      const currentUser = queryClient.getQueryData([\"/api/user\"]) as any;\n      if (currentUser?.licenseActivated) {\n        setIsRedirecting(true);\n        setTimeout(() => {\n          window.location.href = \"/\";\n        }, 1000);\n      }\n    };\n    \n    checkUserStatus();\n  }, [queryClient]);\n\n  const activationMutation = useMutation({\n    mutationFn: async (data: typeof formData): Promise<ActivationResponse> => {\n      const response = await fetch(\"/api/activate\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur d'activation\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: async () => {\n      // Supprimer tous les caches pour éviter les données obsolètes\n      queryClient.clear();\n      \n      // Attendre un peu et rediriger avec rechargement complet\n      setTimeout(() => {\n        window.location.replace(\"/\");\n      }, 1500);\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.key.trim()) return;\n    \n    activationMutation.mutate({\n      ...formData,\n      deviceId: formData.deviceId || `device-${Date.now()}`, // Generate device ID if not provided\n    });\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  // Afficher un message de redirection si nécessaire\n  if (isRedirecting) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n        <div className=\"w-full max-w-md\">\n          <Card className=\"shadow-xl\">\n            <CardContent className=\"text-center space-y-4 pt-6\">\n              <div className=\"mx-auto w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n                <Check className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n              </div>\n              <h3 className=\"font-semibold text-lg text-green-800 dark:text-green-200\">\n                Redirection en cours...\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Accès au tableau de bord en cours\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-xl\">\n          <CardHeader className=\"text-center pb-4\">\n            <div className=\"mx-auto w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mb-4\">\n              <Key className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">YGestion</CardTitle>\n            <CardDescription>\n              Activation de licence\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent>\n            {activationMutation.isSuccess ? (\n              <div className=\"text-center space-y-4\">\n                <div className=\"mx-auto w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n                  <Check className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg text-green-800 dark:text-green-200\">\n                    Licence activée avec succès !\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Votre licence a été activée pour {activationMutation.data?.license.clientName || \"votre appareil\"}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Clé: {activationMutation.data?.license.key}\n                  </p>\n                </div>\n                <Button \n                  onClick={async () => {\n                    // Vider tous les caches\n                    queryClient.clear();\n                    \n                    // Rediriger avec rechargement complet\n                    window.location.replace(\"/\");\n                  }} \n                  className=\"w-full\"\n                  data-testid=\"button-continue\"\n                >\n                  Accéder à l'application\n                </Button>\n              </div>\n            ) : (\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"key\">Clé d'activation *</Label>\n                  <Input\n                    id=\"key\"\n                    name=\"key\"\n                    type=\"text\"\n                    placeholder=\"WENIBAC-2025-001\"\n                    value={formData.key}\n                    onChange={handleChange}\n                    required\n                    className=\"font-mono text-center\"\n                    data-testid=\"input-license-key\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"clientName\">Nom du client</Label>\n                  <Input\n                    id=\"clientName\"\n                    name=\"clientName\"\n                    type=\"text\"\n                    placeholder=\"H Hasan\"\n                    value={formData.clientName}\n                    onChange={handleChange}\n                    data-testid=\"input-client-name\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"deviceId\">ID de l'appareil (optionnel)</Label>\n                  <Input\n                    id=\"deviceId\"\n                    name=\"deviceId\"\n                    type=\"text\"\n                    placeholder=\"ABC123XYZ\"\n                    value={formData.deviceId}\n                    onChange={handleChange}\n                    className=\"font-mono\"\n                    data-testid=\"input-device-id\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Laissez vide pour générer automatiquement\n                  </p>\n                </div>\n\n                {activationMutation.isError && (\n                  <Alert variant=\"destructive\" data-testid=\"alert-error\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      {activationMutation.error?.message || \"Erreur lors de l'activation\"}\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={!formData.key.trim() || activationMutation.isPending}\n                  data-testid=\"button-activate\"\n                >\n                  {activationMutation.isPending ? \"Activation en cours...\" : \"Activer la licence\"}\n                </Button>\n              </form>\n            )}\n          </CardContent>\n        </Card>\n\n        <p className=\"text-center text-sm text-muted-foreground mt-6\">\n          Besoin d'une clé d'activation ? Contactez votre administrateur.\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":8492},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/products.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { ProductListSkeleton } from \"@/components/loading-skeletons\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Package, \n  Edit, \n  Trash2, \n  Plus,\n  Search,\n  AlertTriangle,\n  TrendingUp,\n  History\n} from \"lucide-react\";\nimport { insertProductSchema, insertStockReplenishmentSchema, type Product, type InsertProduct, type Category, type StockReplenishment, type InsertStockReplenishment } from \"@shared/schema\";\nimport { formatPrice, useTranslation } from \"@/lib/i18n\";\nimport { useSettings } from \"@/hooks/useSettings\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Package as PackageIcon } from \"lucide-react\";\n\nexport default function Products() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const { settings } = useSettings();\n  const { t } = useTranslation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [isReplenishmentDialogOpen, setIsReplenishmentDialogOpen] = useState(false);\n  const [selectedProductForReplenishment, setSelectedProductForReplenishment] = useState<Product | null>(null);\n  const [isHistoryDialogOpen, setIsHistoryDialogOpen] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: t('unauthorized'),\n        description: t('unauthorizedDesc'),\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: products = [], isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n    retry: false,\n    refetchInterval: 60000, // Refresh every 60 seconds\n    refetchIntervalInBackground: true,\n    staleTime: 30000,\n  });\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n    refetchInterval: 120000, // Refresh every 2 minutes\n    staleTime: 60000,\n  });\n\n  // Query for stock replenishments\n  const { data: stockReplenishments = [] } = useQuery<StockReplenishment[]>({\n    queryKey: [\"/api/stock-replenishments\"],\n    retry: false,\n    refetchInterval: 60000,\n    staleTime: 30000,\n  });\n\n  // Query for specific product replenishments (conditional)\n  const { data: productReplenishments = [], isLoading: productReplenishmentsLoading } = useQuery<StockReplenishment[]>({\n    queryKey: [\"/api/products\", selectedProductForReplenishment?.id, \"replenishments\"],\n    queryFn: async () => {\n      if (!selectedProductForReplenishment) return [];\n      const response = await apiRequest(\"GET\", `/api/products/${selectedProductForReplenishment.id}/replenishments`);\n      const jsonData = await response.json();\n      return Array.isArray(jsonData) ? jsonData as StockReplenishment[] : [];\n    },\n    enabled: !!selectedProductForReplenishment && isHistoryDialogOpen,\n    retry: false,\n  });\n\n  const form = useForm<InsertProduct>({\n    resolver: zodResolver(insertProductSchema.omit({ userId: true })),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      priceHT: \"\",\n      alertStock: 10,\n      categoryId: undefined,\n    },\n  });\n\n  const replenishmentForm = useForm({\n    defaultValues: {\n      quantity: 0,\n      costPerUnit: \"\",\n      totalCost: \"\",\n      supplier: \"\",\n      reference: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Calcul automatique du coût total\n  const watchedQuantity = replenishmentForm.watch(\"quantity\");\n  const watchedCostPerUnit = replenishmentForm.watch(\"costPerUnit\");\n\n  useEffect(() => {\n    const quantity = Number(watchedQuantity) || 0;\n    const costPerUnit = Number(watchedCostPerUnit) || 0;\n    const totalCost = quantity * costPerUnit;\n    \n    if (quantity > 0 && costPerUnit > 0) {\n      replenishmentForm.setValue(\"totalCost\", totalCost.toFixed(2));\n    } else {\n      replenishmentForm.setValue(\"totalCost\", \"\");\n    }\n  }, [watchedQuantity, watchedCostPerUnit, replenishmentForm]);\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertProduct) => {\n      await apiRequest(\"POST\", \"/api/products\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: t('productCreated'),\n        description: t('productCreatedDesc'),\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: t('error'),\n        description: t('errorCreateProduct'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: InsertProduct) => {\n      if (!editingProduct) throw new Error(\"No product to update\");\n      await apiRequest(\"PUT\", `/api/products/${editingProduct.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: t('productModified'),\n        description: t('productModifiedDesc'),\n      });\n      setIsDialogOpen(false);\n      setEditingProduct(null);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: t('error'),\n        description: t('errorUpdateProduct'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/products/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: t('productDeleted'),\n        description: t('productDeletedDesc'),\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: t('error'),\n        description: t('errorDeleteProduct'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Stock replenishment mutations\n  const createReplenishmentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (!selectedProductForReplenishment) throw new Error(\"No product selected\");\n      await apiRequest(\"POST\", \"/api/stock-replenishments\", { \n        ...data, \n        productId: selectedProductForReplenishment.id \n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stock-replenishments\"] });\n      // Also invalidate the specific product history\n      if (selectedProductForReplenishment) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/products\", selectedProductForReplenishment.id, \"replenishments\"] });\n      }\n      toast({\n        title: t('replenishmentAdded'),\n        description: t('replenishmentAddedDesc'),\n      });\n      setIsReplenishmentDialogOpen(false);\n      setSelectedProductForReplenishment(null);\n      replenishmentForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: t('error'),\n        description: t('errorAddReplenishment'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleOpenDialog = (product?: Product) => {\n    if (product) {\n      setEditingProduct(product);\n      form.reset({\n        name: product.name,\n        description: product.description || \"\",\n        priceHT: product.priceHT,\n        alertStock: product.alertStock || 10,\n        categoryId: product.categoryId || undefined,\n      });\n    } else {\n      setEditingProduct(null);\n      form.reset({\n        name: \"\",\n        description: \"\",\n        priceHT: \"\",\n        alertStock: 10,\n        categoryId: undefined,\n      });\n    }\n    setIsDialogOpen(true);\n  };\n\n  const handleOpenReplenishmentDialog = (product: Product) => {\n    setSelectedProductForReplenishment(product);\n    replenishmentForm.reset({\n      quantity: 0,\n      costPerUnit: \"\",\n      totalCost: \"\",\n      supplier: \"\",\n      reference: \"\",\n      notes: \"\",\n    });\n    setIsReplenishmentDialogOpen(true);\n  };\n\n  const handleOpenHistoryDialog = (product: Product) => {\n    setSelectedProductForReplenishment(product);\n    setIsHistoryDialogOpen(true);\n  };\n\n  const onSubmit = (data: InsertProduct) => {\n    if (editingProduct) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const onReplenishmentSubmit = (data: any) => {\n    createReplenishmentMutation.mutate(data);\n  };\n\n  const filteredProducts = products.filter((product: Product) =>\n    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    product.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getCategoryName = (categoryId: number | null) => {\n    if (!categoryId) return t('noCategory');\n    const category = categories.find((cat: Category) => cat.id === categoryId);\n    return category?.name || t('unknownCategory');\n  };\n\n  const formatProductPrice = (price: string) => {\n    const currency = settings?.currency || 'XOF';\n    return formatPrice(parseFloat(price), currency);\n  };\n\n  const getStockStatus = (stock: number | null, alertStock: number | null = 10) => {\n    const stockValue = stock || 0;\n    const alertValue = alertStock || 10;\n    if (stockValue === 0) {\n      return { label: t('outOfStock'), variant: \"destructive\" as const, icon: AlertTriangle };\n    } else if (stockValue <= alertValue) {\n      return { label: t('lowStock'), variant: \"secondary\" as const, icon: AlertTriangle };\n    }\n    return { label: t('inStock'), variant: \"secondary\" as const, icon: null };\n  };\n\n  if (isLoading || productsLoading) {\n    return <ProductListSkeleton />;\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title={t('products')} \n        subtitle={t('manageProducts')}\n        action={{\n          label: t('newProduct'),\n          onClick: () => handleOpenDialog()\n        }}\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        {/* Search Bar */}\n        <div className=\"mb-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder={t('searchProduct')}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n\n        {/* Products Grid */}\n        {filteredProducts.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <Package className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {searchTerm ? t('noProductFound') : t('noProduct')}\n              </h3>\n              <p className=\"text-gray-500 mb-4\">\n                {searchTerm \n                  ? t('tryModifySearch')\n                  : t('addFirstProduct')\n                }\n              </p>\n              {!searchTerm && (\n                <Button onClick={() => handleOpenDialog()}>\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  {t('newProduct')}\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredProducts.map((product: Product) => {\n              const stockStatus = getStockStatus(product.stock, product.alertStock);\n              const StockIcon = stockStatus.icon;\n              \n              return (\n                <Card key={product.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg\">{product.name}</CardTitle>\n                        <div className=\"flex items-center gap-2 mt-2\">\n                          <Badge variant=\"outline\">\n                            {getCategoryName(product.categoryId)}\n                          </Badge>\n                          <Badge variant={stockStatus.variant} className=\"flex items-center gap-1\">\n                            {StockIcon && <StockIcon className=\"w-3 h-3\" />}\n                            {stockStatus.label}\n                          </Badge>\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col space-y-1\">\n                        <div className=\"flex space-x-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleOpenReplenishmentDialog(product)}\n                            title={t('replenishStock')}\n                          >\n                            <TrendingUp className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleOpenHistoryDialog(product)}\n                            title={t('replenishmentHistory')}\n                          >\n                            <History className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                        <div className=\"flex space-x-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleOpenDialog(product)}\n                            title={t('editProduct')}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => deleteMutation.mutate(product.id)}\n                            disabled={deleteMutation.isPending}\n                            className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                            title={t('deleteProduct')}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {product.description && (\n                      <p className=\"text-sm text-gray-600 line-clamp-2\">\n                        {product.description}\n                      </p>\n                    )}\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-lg font-semibold text-gray-900\">\n                          {formatProductPrice(product.priceHT)} HT\n                        </p>\n                        <div className=\"text-sm text-gray-500 space-y-1\">\n                          <p>{t('stock')}: {product.stock || 0} {t('units')}</p>\n                          <p>{t('stockAlertThreshold')}: {product.alertStock || 10} {t('units')}</p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"pt-2 text-xs text-gray-500\">\n                      {t('createdOn')} {product.createdAt && new Date(product.createdAt).toLocaleDateString()}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Create/Edit Dialog */}\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingProduct ? t('editProduct') : t('newProduct')}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t('productName')} *</FormLabel>\n                      <FormControl>\n                        <Input placeholder={t('productNamePlaceholder')} {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t('description')}</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder={t('descriptionPlaceholder')}\n                          rows={3}\n                          {...field}\n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"priceHT\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{t('priceHT')} ({settings?.currency === 'GHS' ? 'GH₵' : 'XOF'}) *</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\" \n                            min=\"0.01\"\n                            placeholder=\"0.00\" \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"categoryId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{t('category')}</FormLabel>\n                        <Select \n                          onValueChange={(value) => field.onChange(value === \"none\" ? undefined : value ? parseInt(value) : undefined)}\n                          value={field.value?.toString() || \"none\"}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder={t('selectCategory')} />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"none\">{t('noCategory')}</SelectItem>\n                            {categories.map((category: Category) => (\n                              <SelectItem key={category.id} value={category.id.toString()}>\n                                {category.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"alertStock\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t('stockAlertThreshold')}</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"1\"\n                          placeholder=\"10\" \n                          {...field}\n                          value={field.value || 10}\n                          onChange={(e) => field.onChange(Math.max(1, parseInt(e.target.value) || 10))}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-gray-500 mt-1\">\n{t('stockManagedAutomatically')}\n                      </p>\n                    </FormItem>\n                  )}\n                />\n\n\n\n\n\n                <div className=\"flex justify-end space-x-4 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsDialogOpen(false)}\n                  >\n                    {t('cancel')}\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending || updateMutation.isPending}\n                  >\n                    {editingProduct ? t('modify') : t('create')}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Stock Replenishment Dialog */}\n        <Dialog open={isReplenishmentDialogOpen} onOpenChange={setIsReplenishmentDialogOpen}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>\n                Réapprovisionner le stock - {selectedProductForReplenishment?.name}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...replenishmentForm}>\n              <form onSubmit={replenishmentForm.handleSubmit(onReplenishmentSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={replenishmentForm.control}\n                    name=\"quantity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Quantité *</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            min=\"1\"\n                            placeholder=\"100\" \n                            {...field}\n                            onChange={(e) => {\n                              const value = Math.max(1, parseInt(e.target.value) || 0);\n                              field.onChange(value);\n                            }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={replenishmentForm.control}\n                    name=\"costPerUnit\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Coût unitaire ({settings?.currency === 'GHS' ? 'GH₵' : 'XOF'})</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\" \n                            min=\"0\"\n                            placeholder=\"0.00\" \n                            {...field} \n                            value={field.value || \"\"}\n                            onChange={(e) => {\n                              field.onChange(e.target.value);\n                            }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={replenishmentForm.control}\n                  name=\"totalCost\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Coût total ({settings?.currency === 'GHS' ? 'GH₵' : 'XOF'})</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          min=\"0\"\n                          placeholder=\"0.00\" \n                          {...field} \n                          value={field.value || \"\"}\n                          readOnly\n                          className=\"bg-white/50 dark:bg-gray-800/50 cursor-not-allowed\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={replenishmentForm.control}\n                    name=\"supplier\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Fournisseur</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Nom du fournisseur\" {...field} value={field.value || \"\"} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={replenishmentForm.control}\n                    name=\"reference\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Référence/Facture</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"REF-2024-001\" {...field} value={field.value || \"\"} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={replenishmentForm.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Notes sur ce réapprovisionnement...\"\n                          rows={3}\n                          {...field}\n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-4 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsReplenishmentDialogOpen(false)}\n                  >\n                    Annuler\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createReplenishmentMutation.isPending}\n                  >\n                    Réapprovisionner\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Stock Replenishment History Dialog */}\n        <Dialog open={isHistoryDialogOpen} onOpenChange={setIsHistoryDialogOpen}>\n          <DialogContent className=\"sm:max-w-[700px]\">\n            <DialogHeader>\n              <DialogTitle>\n                Historique des réapprovisionnements - {selectedProductForReplenishment?.name}\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              {productReplenishmentsLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto\"></div>\n                  <p className=\"mt-2 text-sm text-gray-500\">Chargement de l'historique...</p>\n                </div>\n              ) : !Array.isArray(productReplenishments) || productReplenishments.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Package className=\"mx-auto h-12 w-12 text-gray-400\" />\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\n                    Aucun réapprovisionnement\n                  </h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">\n                    Ce produit n'a pas encore été réapprovisionné.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"max-h-96 overflow-y-auto\">\n                  <div className=\"space-y-3\">\n                    {Array.isArray(productReplenishments) && productReplenishments.map((replenishment: StockReplenishment) => (\n                      <Card key={replenishment.id} className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-4\">\n                              <div>\n                                <p className=\"font-medium\">+{replenishment.quantity} unités</p>\n                                <p className=\"text-sm text-gray-500\">\n                                  {replenishment.createdAt && new Date(replenishment.createdAt).toLocaleDateString('fr-FR')}\n                                </p>\n                              </div>\n                              {replenishment.supplier && (\n                                <div>\n                                  <p className=\"text-sm font-medium\">Fournisseur:</p>\n                                  <p className=\"text-sm text-gray-600\">{replenishment.supplier}</p>\n                                </div>\n                              )}\n                              {replenishment.totalCost && (\n                                <div>\n                                  <p className=\"text-sm font-medium\">Coût total:</p>\n                                  <p className=\"text-sm text-gray-600\">\n                                    {formatPrice(parseFloat(replenishment.totalCost), settings?.currency || 'XOF')}\n                                  </p>\n                                </div>\n                              )}\n                            </div>\n                            {replenishment.notes && (\n                              <p className=\"text-sm text-gray-500 mt-2\">{replenishment.notes}</p>\n                            )}\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              )}\n              <div className=\"flex justify-end pt-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setIsHistoryDialogOpen(false)}\n                >\n                  Fermer\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":33098},"client/src/pages/sales.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  TrendingUp, \n  Calendar,\n  Package,\n  Users,\n  BarChart3\n} from \"lucide-react\";\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/components/ui/pagination\";\nimport { type Sale } from \"@shared/schema\";\nimport { SalesListSkeleton } from \"@/components/loading-skeletons\";\n\nexport default function Sales() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: sales = [], isLoading: salesLoading } = useQuery<Sale[]>({\n    queryKey: [\"/api/sales\"],\n    retry: false,\n    refetchInterval: 45000, // Rafraîchit toutes les 45 secondes\n    refetchIntervalInBackground: true,\n    staleTime: 0,\n  });\n\n  const { data: stats } = useQuery<{\n    revenue: number;\n    invoiceCount: number;\n    clientCount: number;\n    productCount: number;\n    recentInvoices: any[];\n    topProducts: any[];\n    lowStockProducts: any[];\n  }>({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n    refetchInterval: 30000, // Rafraîchit toutes les 30 secondes\n    refetchIntervalInBackground: true,\n    staleTime: 0,\n  });\n\n  const formatCurrency = (amount: string | number) => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    // Utilise XOF par défaut pour les ventes\n    return new Intl.NumberFormat('fr-FR', {\n      style: 'decimal',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(numAmount) + ' F CFA';\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('fr-FR');\n  };\n\n  // Pagination calculations\n  const totalItems = sales.length;\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedSales = sales.slice(startIndex, endIndex);\n\n  // Calculate sales statistics\n  const totalSales = sales.reduce((sum: number, sale: Sale) => sum + parseFloat(sale.total), 0);\n  const averageSale = sales.length > 0 ? totalSales / sales.length : 0;\n  const totalQuantity = sales.reduce((sum: number, sale: Sale) => sum + sale.quantity, 0);\n\n  // Group sales by month for chart data\n  const salesByMonth = sales.reduce((acc: any, sale: Sale) => {\n    const month = new Date(sale.createdAt!).toLocaleString('fr-FR', { month: 'long', year: 'numeric' });\n    if (!acc[month]) {\n      acc[month] = { total: 0, count: 0 };\n    }\n    acc[month].total += parseFloat(sale.total);\n    acc[month].count += 1;\n    return acc;\n  }, {});\n\n  if (isLoading || salesLoading) {\n    return <SalesListSkeleton />;\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title=\"Historique des Ventes\" \n        subtitle=\"Analysez vos performances de vente\"\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        {/* Sales Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Ventes Totales</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(totalSales)}</p>\n                  <p className=\"text-sm text-green-600 mt-1\">\n                    {sales.length} transactions\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"text-green-500 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Vente Moyenne</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(averageSale)}</p>\n                  <p className=\"text-sm text-blue-600 mt-1\">\n                    par transaction\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center\">\n                  <BarChart3 className=\"text-blue-500 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Articles Vendus</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{totalQuantity}</p>\n                  <p className=\"text-sm text-purple-600 mt-1\">\n                    unités au total\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-purple-50 rounded-lg flex items-center justify-center\">\n                  <Package className=\"text-purple-500 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Clients Actifs</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats?.clientCount || 0}</p>\n                  <p className=\"text-sm text-orange-600 mt-1\">\n                    clients totaux\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-orange-50 rounded-lg flex items-center justify-center\">\n                  <Users className=\"text-orange-500 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Sales by Month */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Ventes par Mois</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {Object.keys(salesByMonth).length === 0 ? (\n                <div className=\"py-12 text-center\">\n                  <Calendar className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">Aucune donnée de vente disponible</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {Object.entries(salesByMonth).map(([month, data]: [string, any]) => (\n                    <div key={month} className=\"flex items-center justify-between p-3 bg-white/30 dark:bg-gray-800/30 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-900\">{month}</p>\n                        <p className=\"text-sm text-gray-500\">{data.count} ventes</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-gray-900\">{formatCurrency(data.total)}</p>\n                        <p className=\"text-sm text-gray-500\">\n                          {formatCurrency(data.total / data.count)} moy.\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Top Products */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Produits les Plus Vendus</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!stats?.topProducts || stats.topProducts.length === 0 ? (\n                <div className=\"py-12 text-center\">\n                  <TrendingUp className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">Aucun produit vendu</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {stats.topProducts.map((product: any, index: number) => (\n                    <div key={product.id} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-sm font-semibold text-primary\">\n                            #{index + 1}\n                          </span>\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-gray-900\">{product.name}</p>\n                          <p className=\"text-sm text-gray-500\">{formatCurrency(product.price)}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge variant=\"secondary\">\n                          {product.salesCount} vendus\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Sales */}\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle>Ventes Récentes</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {sales.length === 0 ? (\n              <div className=\"py-12 text-center\">\n                <TrendingUp className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Aucune vente</h3>\n                <p className=\"text-gray-500\">Les ventes apparaîtront ici une fois que vous aurez créé des factures payées.</p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-white/50 dark:bg-gray-800/50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Date\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Produit\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Quantité\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Prix Unitaire\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Total\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {paginatedSales.map((sale: Sale) => (\n                      <tr key={sale.id} className=\"hover:bg-white/30 dark:hover:bg-gray-700/30\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {sale.createdAt && formatDate(sale.createdAt)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                          Produit #{sale.productId}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {sale.quantity}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {formatCurrency(sale.unitPrice)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-semibold text-gray-900\">\n                          {formatCurrency(sale.total)}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n            \n            {/* Pagination */}\n            {totalPages > 1 && (\n              <div className=\"mt-6 flex items-center justify-between\">\n                <div className=\"text-sm text-gray-500\">\n                  Affichage de {startIndex + 1} à {Math.min(endIndex, totalItems)} sur {totalItems} ventes\n                </div>\n                <Pagination>\n                  <PaginationContent>\n                    {/* Première page */}\n                    <PaginationItem>\n                      <PaginationLink\n                        href=\"#\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          setCurrentPage(1);\n                        }}\n                        className={currentPage <= 1 ? \"pointer-events-none opacity-50\" : \"\"}\n                        size=\"sm\"\n                      >\n                        ««\n                      </PaginationLink>\n                    </PaginationItem>\n                    \n                    <PaginationItem>\n                      <PaginationPrevious \n                        href=\"#\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          if (currentPage > 1) {\n                            setCurrentPage(currentPage - 1);\n                          }\n                        }}\n                        className={currentPage <= 1 ? \"pointer-events-none opacity-50\" : \"\"}\n                      />\n                    </PaginationItem>\n                    \n                    {/* Page numbers */}\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <PaginationItem key={page}>\n                        <PaginationLink\n                          href=\"#\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            setCurrentPage(page);\n                          }}\n                          isActive={currentPage === page}\n                        >\n                          {page}\n                        </PaginationLink>\n                      </PaginationItem>\n                    ))}\n                    \n                    <PaginationItem>\n                      <PaginationNext \n                        href=\"#\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          if (currentPage < totalPages) {\n                            setCurrentPage(currentPage + 1);\n                          }\n                        }}\n                        className={currentPage >= totalPages ? \"pointer-events-none opacity-50\" : \"\"}\n                      />\n                    </PaginationItem>\n                    \n                    {/* Dernière page */}\n                    <PaginationItem>\n                      <PaginationLink\n                        href=\"#\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          setCurrentPage(totalPages);\n                        }}\n                        className={currentPage >= totalPages ? \"pointer-events-none opacity-50\" : \"\"}\n                        size=\"sm\"\n                      >\n                        »»\n                      </PaginationLink>\n                    </PaginationItem>\n                  </PaginationContent>\n                </Pagination>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":16602},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useSettings } from \"@/hooks/useSettings\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Settings as SettingsIcon, \n  Globe, \n  DollarSign,\n  Save,\n  Mail,\n  HelpCircle,\n  ExternalLink,\n  Book,\n\n  User\n} from \"lucide-react\";\nimport { currencies, languages, useTranslation } from \"@/lib/i18n\";\n\nimport ProfileEditor from \"@/components/profile-editor\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const { settings, updateSettings, isUpdating } = useSettings();\n  const [localCurrency, setLocalCurrency] = useState(\"\");\n  const [localLanguage, setLocalLanguage] = useState(\"\");\n  \n  const { t } = useTranslation(settings?.language);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Initialize local state with settings\n  useEffect(() => {\n    if (settings) {\n      setLocalCurrency(settings.currency);\n      setLocalLanguage(settings.language);\n    }\n  }, [settings]);\n\n  const handleSave = async () => {\n    try {\n      updateSettings({\n        currency: localCurrency,\n        language: localLanguage as \"fr\" | \"en\",\n      });\n      \n      toast({\n        title: \"Paramètres sauvegardés\",\n        description: \"Vos préférences ont été mises à jour avec succès.\",\n      });\n      \n      // Reload page to apply language changes\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    } catch (error: any) {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de sauvegarder les paramètres.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const hasChanges = \n    localCurrency !== settings?.currency || \n    localLanguage !== settings?.language;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">Chargement...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col\">\n      <Header \n        title={t('settings')}\n        subtitle=\"Configurez vos préférences d'application\"\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        <div className=\"max-w-2xl mx-auto space-y-6\">\n          {/* Language Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Globe className=\"w-5 h-5\" />\n                {t('language')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"language\">Langue de l'interface</Label>\n                <Select \n                  value={localLanguage} \n                  onValueChange={setLocalLanguage}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Sélectionner une langue\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {languages.map((lang) => (\n                      <SelectItem key={lang.value} value={lang.value}>\n                        {lang.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-sm text-gray-500\">\n                  La langue sélectionnée sera appliquée à toute l'interface.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Personal Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"w-5 h-5\" />\n                {t('personalInfo')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <ProfileEditor />\n              <p className=\"text-sm text-gray-500\">\n                {settings?.language === 'en' \n                  ? 'Update your personal and business information. This information will appear on your invoices.'\n                  : 'Mettez à jour vos informations personnelles et d\\'entreprise. Ces informations apparaîtront sur vos factures.'\n                }\n              </p>\n            </CardContent>\n          </Card>\n\n\n\n          {/* Currency Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <DollarSign className=\"w-5 h-5\" />\n                {t('currency')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"currency\">Devise par défaut</Label>\n                <Select \n                  value={localCurrency} \n                  onValueChange={setLocalCurrency}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Sélectionner une devise\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {currencies.map((currency) => (\n                      <SelectItem key={currency.value} value={currency.value}>\n                        {currency.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-sm text-gray-500\">\n                  Cette devise sera utilisée pour afficher tous les prix.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Developer Contact */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Mail className=\"w-5 h-5\" />\n                {settings?.language === 'en' ? 'Contact Developer' : 'Contacter le Développeur'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                <div>\n                  <h3 className=\"font-medium text-blue-900\">\n                    {settings?.language === 'en' ? 'Need help or have suggestions?' : 'Besoin d\\'aide ou des suggestions ?'}\n                  </h3>\n                  <p className=\"text-sm text-blue-700 mt-1\">\n                    {settings?.language === 'en' \n                      ? 'Contact the developer for support, feature requests, or bug reports.'\n                      : 'Contactez le développeur pour du support, demandes de fonctionnalités ou signaler des bugs.'\n                    }\n                  </p>\n                </div>\n                <Button \n                  onClick={() => window.open('mailto:youssouphafils@gmail.com?subject=YGestion - Support', '_blank')}\n                  variant=\"outline\"\n                  className=\"flex items-center gap-2 border-blue-300 text-blue-700 hover:bg-blue-100\"\n                >\n                  <Mail className=\"w-4 h-4\" />\n                  {settings?.language === 'en' ? 'Send Email' : 'Envoyer Email'}\n                  <ExternalLink className=\"w-3 h-3\" />\n                </Button>\n              </div>\n              <p className=\"text-xs text-gray-500\">\n                youssouphafils@gmail.com\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* User Guide */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Book className=\"w-5 h-5\" />\n                {settings?.language === 'en' ? 'User Guide' : 'Guide d\\'Utilisation'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <div className=\"border rounded-lg p-4\">\n                  <h3 className=\"font-medium flex items-center gap-2 mb-2\">\n                    <HelpCircle className=\"w-4 h-4 text-blue-500\" />\n                    {settings?.language === 'en' ? 'Getting Started' : 'Premiers Pas'}\n                  </h3>\n                  <ul className=\"text-sm text-gray-600 space-y-1 list-disc list-inside\">\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Start by adding your first clients in the Clients section'\n                        : 'Commencez par ajouter vos premiers clients dans la section Clients'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Create product categories and add your products with prices'\n                        : 'Créez des catégories de produits et ajoutez vos produits avec leurs prix'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Generate professional invoices and track your sales'\n                        : 'Générez des factures professionnelles et suivez vos ventes'\n                      }\n                    </li>\n                  </ul>\n                </div>\n\n                <div className=\"border rounded-lg p-4\">\n                  <h3 className=\"font-medium flex items-center gap-2 mb-2\">\n                    <HelpCircle className=\"w-4 h-4 text-green-500\" />\n                    {settings?.language === 'en' ? 'Key Features' : 'Fonctionnalités Principales'}\n                  </h3>\n                  <ul className=\"text-sm text-gray-600 space-y-1 list-disc list-inside\">\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Real-time dashboard with business analytics'\n                        : 'Tableau de bord en temps réel avec analyses commerciales'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'PDF invoice generation and printing'\n                        : 'Génération et impression de factures PDF'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Automatic stock management and alerts'\n                        : 'Gestion automatique des stocks et alertes'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Multi-currency support (XOF, GHS)'\n                        : 'Support multi-devises (XOF, GHS)'\n                      }\n                    </li>\n                  </ul>\n                </div>\n\n                <div className=\"border rounded-lg p-4\">\n                  <h3 className=\"font-medium flex items-center gap-2 mb-2\">\n                    <HelpCircle className=\"w-4 h-4 text-orange-500\" />\n                    {settings?.language === 'en' ? 'Tips & Tricks' : 'Conseils & Astuces'}\n                  </h3>\n                  <ul className=\"text-sm text-gray-600 space-y-1 list-disc list-inside\">\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Set custom stock alert levels for each product'\n                        : 'Définissez des seuils d\\'alerte stock personnalisés pour chaque produit'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Use the export feature to backup your business data'\n                        : 'Utilisez la fonction export pour sauvegarder vos données commerciales'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Print directly from invoice preview or download as PDF'\n                        : 'Imprimez directement depuis l\\'aperçu facture ou téléchargez en PDF'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Monitor your top-selling products in the dashboard'\n                        : 'Surveillez vos produits les plus vendus dans le tableau de bord'\n                      }\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Reset Language Selector */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Globe className=\"w-5 h-5\" />\n                {settings?.language === 'en' ? 'Language Setup' : 'Configuration de Langue'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                <div>\n                  <h3 className=\"font-medium text-gray-900\">\n                    {settings?.language === 'en' ? 'Reset Language Selector' : 'Réinitialiser le Sélecteur de Langue'}\n                  </h3>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    {settings?.language === 'en' \n                      ? 'Show the language selection screen again on next app startup.'\n                      : 'Afficher à nouveau l\\'écran de sélection de langue au prochain démarrage.'\n                    }\n                  </p>\n                </div>\n                <Button \n                  onClick={() => {\n                    localStorage.removeItem('initialLanguageSelected');\n                    localStorage.removeItem('preferredLanguage');\n                    localStorage.removeItem('languageSynced');\n                    window.location.reload();\n                  }}\n                  variant=\"outline\"\n                  className=\"flex items-center gap-2\"\n                >\n                  <Globe className=\"w-4 h-4\" />\n                  {settings?.language === 'en' ? 'Reset' : 'Réinitialiser'}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Save Button */}\n          <div className=\"flex justify-end\">\n            <Button \n              onClick={handleSave}\n              disabled={!hasChanges || isUpdating}\n              className=\"flex items-center gap-2\"\n            >\n              <Save className=\"w-4 h-4\" />\n              {isUpdating ? \"Sauvegarde...\" : \"Sauvegarder\"}\n            </Button>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":15613},"client/src/pages/user-registration.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Users, \n  Mail, \n  Phone, \n  Building, \n  User,\n  Camera,\n  CheckCircle,\n  ArrowRight\n} from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { z } from \"zod\";\nimport { useLocation } from \"wouter\";\n\n// Schema pour l'inscription utilisateur étendue\nconst userRegistrationSchema = z.object({\n  firstName: z.string().min(2, \"Le prénom doit contenir au moins 2 caractères\"),\n  lastName: z.string().min(2, \"Le nom doit contenir au moins 2 caractères\"),\n  phone: z.string().optional(),\n  company: z.string().optional(),\n  position: z.string().optional(),\n  address: z.string().optional(),\n  businessType: z.string().optional(),\n});\n\ntype UserRegistrationData = z.infer<typeof userRegistrationSchema>;\n\nexport default function UserRegistration() {\n  const { toast } = useToast();\n  const { user, isLoading: authLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [step, setStep] = useState(1);\n\n  const form = useForm<UserRegistrationData>({\n    resolver: zodResolver(userRegistrationSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      phone: \"\",\n      company: \"\",\n      position: \"\",\n      address: \"\",\n      businessType: \"\",\n    },\n  });\n\n  // Initialiser le formulaire avec les données existantes de l'utilisateur\n  useEffect(() => {\n    if (user) {\n      form.reset({\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        phone: \"\",\n        company: \"\",\n        position: \"\",\n        address: \"\",\n        businessType: \"\",\n      });\n    }\n  }, [user, form]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: UserRegistrationData) => {\n      const response = await fetch(\"/api/auth/complete-profile\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur de mise à jour du profil\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profil complété !\",\n        description: \"Votre profil a été mis à jour avec succès.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      // Rediriger vers le tableau de bord\n      setTimeout(() => {\n        setLocation(\"/\");\n      }, 1500);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Une erreur s'est produite lors de la mise à jour de votre profil.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Erreur de mise à jour du profil:\", error);\n    },\n  });\n\n  const onSubmit = (data: UserRegistrationData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const nextStep = () => {\n    if (step < 3) setStep(step + 1);\n  };\n\n  const prevStep = () => {\n    if (step > 1) setStep(step - 1);\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-pulse\">\n          <div className=\"w-96 h-96 bg-white rounded-xl shadow-sm\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CardTitle>Connexion requise</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-gray-600 text-center mb-4\">\n              Vous devez être connecté pour compléter votre profil.\n            </p>\n            <Button \n              onClick={() => window.location.href = \"/api/login\"}\n              className=\"w-full\"\n            >\n              Se connecter\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-12 px-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Users className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Bienvenue dans YGestion !\n          </h1>\n          <p className=\"text-gray-600\">\n            Complétez votre profil pour profiter pleinement de toutes les fonctionnalités\n          </p>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"flex items-center\">\n                <div className={`\n                  w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium\n                  ${step >= i \n                    ? 'bg-primary text-white' \n                    : 'bg-gray-200 text-gray-500'\n                  }\n                `}>\n                  {step > i ? <CheckCircle className=\"w-5 h-5\" /> : i}\n                </div>\n                {i < 3 && (\n                  <div className={`\n                    w-full h-2 mx-4 rounded-full\n                    ${step > i ? 'bg-primary' : 'bg-gray-200'}\n                  `} />\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex justify-between text-sm text-gray-600\">\n            <span>Informations personnelles</span>\n            <span>Entreprise</span>\n            <span>Confirmation</span>\n          </div>\n        </div>\n\n        {/* Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              {step === 1 && \"Informations personnelles\"}\n              {step === 2 && \"Informations professionnelles\"}\n              {step === 3 && \"Confirmation\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Étape 1: Informations personnelles */}\n                {step === 1 && (\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Prénom *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Kouamé\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nom *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Yao\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"phone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Téléphone</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"07 12 34 56 78\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"address\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Adresse</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Cocody Riviera 3, Abidjan\"\n                              rows={3}\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-gray-500 mb-4\">\n                        Email: <span className=\"font-medium\">{user.email}</span>\n                      </p>\n                    </div>\n                  </div>\n                )}\n\n                {/* Étape 2: Informations professionnelles */}\n                {step === 2 && (\n                  <div className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"company\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Nom de l'entreprise</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"SARL AKWABA\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"position\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Poste/Fonction</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Gérant\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"businessType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Secteur d'activité</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Commerce général, Restauration, etc.\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                )}\n\n                {/* Étape 3: Confirmation */}\n                {step === 3 && (\n                  <div className=\"space-y-6\">\n                    <div className=\"bg-green-50 border border-green-200 rounded-lg p-6\">\n                      <div className=\"flex items-center mb-4\">\n                        <CheckCircle className=\"w-6 h-6 text-green-500 mr-2\" />\n                        <h3 className=\"text-lg font-medium text-green-900\">\n                          Profil prêt à être complété !\n                        </h3>\n                      </div>\n                      \n                      <div className=\"space-y-3 text-sm\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <span className=\"font-medium text-gray-700\">Nom complet:</span>\n                            <p className=\"text-gray-900\">\n                              {form.watch(\"firstName\")} {form.watch(\"lastName\")}\n                            </p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium text-gray-700\">Email:</span>\n                            <p className=\"text-gray-900\">{user.email}</p>\n                          </div>\n                        </div>\n                        \n                        {form.watch(\"company\") && (\n                          <div>\n                            <span className=\"font-medium text-gray-700\">Entreprise:</span>\n                            <p className=\"text-gray-900\">{form.watch(\"company\")}</p>\n                          </div>\n                        )}\n                        \n                        {form.watch(\"phone\") && (\n                          <div>\n                            <span className=\"font-medium text-gray-700\">Téléphone:</span>\n                            <p className=\"text-gray-900\">{form.watch(\"phone\")}</p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                      <h4 className=\"font-medium text-blue-900 mb-2\">\n                        Fonctionnalités disponibles après completion :\n                      </h4>\n                      <ul className=\"text-sm text-blue-800 space-y-1\">\n                        <li>• Gestion complète des clients et produits</li>\n                        <li>• Création et envoi de factures professionnelles</li>\n                        <li>• Tableau de bord avec analytics en temps réel</li>\n                        <li>• Export et sauvegarde de vos données</li>\n                      </ul>\n                    </div>\n                  </div>\n                )}\n\n                {/* Navigation Buttons */}\n                <div className=\"flex justify-between pt-6\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={prevStep}\n                    disabled={step === 1}\n                  >\n                    Précédent\n                  </Button>\n\n                  {step < 3 ? (\n                    <Button\n                      type=\"button\"\n                      onClick={nextStep}\n                      disabled={\n                        (step === 1 && (!form.watch(\"firstName\") || !form.watch(\"lastName\")))\n                      }\n                    >\n                      Suivant\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  ) : (\n                    <Button\n                      type=\"submit\"\n                      disabled={updateProfileMutation.isPending}\n                      className=\"bg-green-600 hover:bg-green-700\"\n                    >\n                      {updateProfileMutation.isPending ? \"Enregistrement...\" : \"Terminer\"}\n                      <CheckCircle className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  )}\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":15685},"client/src/components/accounting/expense-manager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from \"@/components/ui/pagination\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, Edit, Trash2, Check, X, Eye, DollarSign, Printer, Download, Calendar, Filter, FileDown } from \"lucide-react\";\nimport { ExpensePDF } from \"./expense-pdf\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useTranslation, formatPrice } from \"@/lib/i18n\";\nimport { useSettings } from \"@/hooks/useSettings\";\nimport { \n  insertExpenseSchema, \n  insertExpenseCategorySchema, \n  EXPENSE_STATUS, \n  PAYMENT_METHODS,\n  type NewExpense,\n  type NewExpenseCategory \n} from \"@shared/schema\";\n\nexport function ExpenseManager() {\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n  const [selectedExpense, setSelectedExpense] = useState<any>(null);\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\n  const [isCategoryDialogOpen, setIsCategoryDialogOpen] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage] = useState(3);\n  const [startDate, setStartDate] = useState<string>(\"\");\n  const [endDate, setEndDate] = useState<string>(\"\");\n  const [showDateFilter, setShowDateFilter] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Queries\n  const { data: expenses = [], isLoading: expensesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/accounting/expenses\", startDate, endDate],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (startDate && endDate) {\n        params.append('startDate', startDate);\n        params.append('endDate', endDate);\n      }\n      return fetch(`/api/accounting/expenses?${params.toString()}`, {\n        credentials: 'include'\n      }).then(res => res.json());\n    },\n  });\n\n  const { data: categories = [] } = useQuery<any[]>({\n    queryKey: [\"/api/accounting/expense-categories\"],\n  });\n\n  const { data: imprestFunds = [] } = useQuery<any[]>({\n    queryKey: [\"/api/accounting/imprest-funds\"],\n  });\n\n  const { data: chartOfAccounts = [] } = useQuery<any[]>({\n    queryKey: [\"/api/accounting/chart-of-accounts\"],\n  });\n\n  const { data: user } = useQuery<any>({\n    queryKey: [\"/api/user\"],\n  });\n\n  // Forms\n  const expenseForm = useForm({\n    resolver: zodResolver(insertExpenseSchema),\n    defaultValues: {\n      description: \"\",\n      amount: \"\",\n      paymentMethod: \"cash\",\n      status: \"pending\",\n      expenseDate: new Date().toISOString().split('T')[0],\n      categoryId: undefined,\n      accountId: undefined,\n      notes: \"\",\n      imprestId: undefined,\n    },\n  });\n\n  const categoryForm = useForm({\n    resolver: zodResolver(insertExpenseCategorySchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      isMajor: false,\n    },\n  });\n\n  // Mutations\n  const createExpenseMutation = useMutation({\n    mutationFn: (data: InsertExpense) => apiRequest(\"POST\", \"/api/accounting/expenses\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/imprest-funds\"] });\n      setIsExpenseDialogOpen(false);\n      expenseForm.reset();\n      toast({ title: \"Dépense créée avec succès\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Erreur\", \n        description: error.message || \"Erreur lors de la création de la dépense\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: (data: InsertExpenseCategory) => apiRequest(\"POST\", \"/api/accounting/expense-categories\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/expense-categories\"] });\n      setIsCategoryDialogOpen(false);\n      categoryForm.reset();\n      toast({ title: \"Catégorie créée avec succès\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Erreur\", \n        description: error.message || \"Erreur lors de la création de la catégorie\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const approveExpenseMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"PATCH\", `/api/accounting/expenses/${id}/approve`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/imprest-funds\"] });\n      toast({ title: \"Dépense approuvée avec succès\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Erreur\", \n        description: error.message || \"Erreur lors de l'approbation\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const rejectExpenseMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"PATCH\", `/api/accounting/expenses/${id}/reject`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/imprest-funds\"] });\n      toast({ title: \"Dépense rejetée\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Erreur\", \n        description: error.message || \"Erreur lors du rejet\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const handleCreateExpense = (data: any) => {\n    console.log(\"Creating expense:\", data);\n    createExpenseMutation.mutate(data);\n  };\n\n  const handleCreateCategory = (data: any) => {\n    console.log(\"Creating category:\", data);\n    createCategoryMutation.mutate(data);\n  };\n\n  // Bulk print/download functions\n  const handleBulkPrint = () => {\n    // Filtrer seulement les dépenses approuvées\n    const approvedExpenses = expenses.filter((expense: any) => expense.status === 'approved');\n    \n    if (!approvedExpenses || approvedExpenses.length === 0) {\n      toast({\n        title: \"Aucune dépense approuvée\",\n        description: \"Il n'y a aucune dépense approuvée à imprimer\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n\n    const totalAmount = approvedExpenses.reduce((sum: number, expense: any) => sum + parseFloat(expense.amount), 0);\n    \n    printWindow.document.write(`\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Liste des dépenses</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 20px; }\n            .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }\n            .expenses-table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n            .expenses-table th, .expenses-table td { \n              border: 1px solid #ddd; \n              padding: 12px; \n              text-align: left; \n            }\n            .expenses-table th { \n              background-color: #f5f5f5; \n              font-weight: bold; \n            }\n            .expenses-table tbody tr:nth-child(even) { \n              background-color: #f9f9f9; \n            }\n            .amount { text-align: right; font-weight: bold; }\n            .summary { margin-top: 30px; padding-top: 20px; border-top: 2px solid #333; }\n            .total { font-size: 1.2em; font-weight: bold; text-align: right; }\n            @media print { \n              body { margin: 0; }\n              .no-print { display: none; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <h1>LISTE DES DÉPENSES APPROUVÉES</h1>\n            <p>Généré le ${new Date().toLocaleDateString('fr-FR')}</p>\n          </div>\n\n          <table class=\"expenses-table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Description</th>\n                <th>Montant ({settings?.currency === 'GHS' ? 'GHS' : 'FCFA'})</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${approvedExpenses.map((expense: any) => `\n                <tr>\n                  <td>${new Date(expense.expenseDate).toLocaleDateString('fr-FR')}</td>\n                  <td>${expense.description}</td>\n                  <td class=\"amount\">${parseFloat(expense.amount).toLocaleString('fr-FR', { useGrouping: true }).replace(/\\s/g, ' ')}</td>\n                </tr>\n              `).join('')}\n            </tbody>\n          </table>\n\n          <div class=\"summary\">\n            <div class=\"total\">\n              <p>TOTAL: {formatPrice(totalAmount, settings?.currency)}</p>\n            </div>\n            <p><em>Nombre de dépenses approuvées: ${approvedExpenses.length}</em></p>\n          </div>\n        </body>\n      </html>\n    `);\n    \n    printWindow.document.close();\n    printWindow.focus();\n    printWindow.print();\n  };\n\n  const handleBulkDownload = async () => {\n    // Filtrer seulement les dépenses approuvées\n    const approvedExpenses = expenses.filter((expense: any) => expense.status === 'approved');\n    \n    if (!approvedExpenses || approvedExpenses.length === 0) {\n      toast({\n        title: \"Aucune dépense approuvée\",\n        description: \"Il n'y a aucune dépense approuvée à télécharger\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      const { jsPDF } = await import('jspdf');\n      const html2canvas = (await import('html2canvas')).default;\n\n      const pdf = new jsPDF('p', 'mm', 'a4');\n      const pageWidth = pdf.internal.pageSize.getWidth();\n      const pageHeight = pdf.internal.pageSize.getHeight();\n      const margin = 20;\n      const totalAmount = approvedExpenses.reduce((sum: number, expense: any) => sum + parseFloat(expense.amount), 0);\n\n      // Header\n      pdf.setFontSize(18);\n      pdf.setFont('helvetica', 'bold');\n      pdf.text('RAPPORT DE DÉPENSES APPROUVÉES - AUDIT', pageWidth / 2, 30, { align: 'center' });\n      \n      pdf.setFontSize(12);\n      pdf.setFont('helvetica', 'normal');\n      pdf.text(`Généré le ${new Date().toLocaleDateString('fr-FR')}`, pageWidth / 2, 40, { align: 'center' });\n\n      // Company info\n      let yPos = 60;\n      pdf.setFontSize(14);\n      pdf.setFont('helvetica', 'bold');\n      pdf.text('Informations de l\\'entreprise', margin, yPos);\n      \n      yPos += 10;\n      pdf.setFontSize(10);\n      pdf.setFont('helvetica', 'normal');\n      pdf.text(`Entreprise: ${user?.company || 'N/A'}`, margin, yPos);\n      yPos += 7;\n      pdf.text(`Responsable: ${user?.firstName} ${user?.lastName}`, margin, yPos);\n      yPos += 7;\n      pdf.text(`Email: ${user?.email}`, margin, yPos);\n\n      // Expenses list\n      yPos += 20;\n      pdf.setFontSize(14);\n      pdf.setFont('helvetica', 'bold');\n      pdf.text(`Détail des dépenses approuvées (${approvedExpenses.length} dépense(s))`, margin, yPos);\n\n      yPos += 15;\n      pdf.setFontSize(10);\n      pdf.setFont('helvetica', 'normal');\n\n      for (const expense of approvedExpenses) {\n        if (yPos > pageHeight - 40) {\n          pdf.addPage();\n          yPos = 30;\n        }\n\n        pdf.setFont('helvetica', 'bold');\n        pdf.text(expense.description, margin, yPos);\n        pdf.text(`${formatPrice(parseFloat(expense.amount), settings?.currency)}`, pageWidth - margin, yPos, { align: 'right' });\n        \n        yPos += 7;\n        pdf.setFont('helvetica', 'normal');\n        pdf.text(`Référence: ${expense.reference}`, margin + 5, yPos);\n        yPos += 5;\n        pdf.text(`Catégorie: ${expense.category?.name || 'N/A'}`, margin + 5, yPos);\n        yPos += 5;\n        pdf.text(`Date: ${new Date(expense.expenseDate).toLocaleDateString('fr-FR')}`, margin + 5, yPos);\n        yPos += 5;\n        pdf.text(`Statut: ${expense.status === 'approved' ? 'Approuvée' : expense.status === 'pending' ? 'En attente' : 'Rejetée'}`, margin + 5, yPos);\n        yPos += 5;\n        pdf.text(`Mode: ${PAYMENT_METHODS.find(p => p.value === expense.paymentMethod)?.label || expense.paymentMethod}`, margin + 5, yPos);\n        \n        if (expense.notes) {\n          yPos += 5;\n          pdf.text(`Notes: ${expense.notes}`, margin + 5, yPos);\n        }\n        \n        yPos += 10;\n      }\n\n      // Summary\n      if (yPos > pageHeight - 60) {\n        pdf.addPage();\n        yPos = 30;\n      }\n\n      yPos += 10;\n      pdf.setFont('helvetica', 'bold');\n      pdf.text('Résumé', margin, yPos);\n      yPos += 10;\n      pdf.setFontSize(12);\n      pdf.text(`Total général: ${formatPrice(totalAmount, settings?.currency)}`, margin, yPos);\n      yPos += 8;\n      pdf.setFontSize(10);\n      pdf.text(`Dépenses approuvées: ${expenses.filter((e: any) => e.status === 'approved').length}`, margin, yPos);\n      yPos += 6;\n      pdf.text(`Dépenses en attente: ${expenses.filter((e: any) => e.status === 'pending').length}`, margin, yPos);\n      yPos += 6;\n      pdf.text(`Dépenses rejetées: ${expenses.filter((e: any) => e.status === 'rejected').length}`, margin, yPos);\n\n      pdf.save(`rapport-depenses-audit-${new Date().toISOString().split('T')[0]}.pdf`);\n      \n      toast({\n        title: \"PDF téléchargé\",\n        description: \"Le rapport de dépenses a été téléchargé avec succès\"\n      });\n    } catch (error) {\n      console.error('Erreur lors de la génération du PDF:', error);\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la génération du PDF\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Télécharger toutes les dépenses en CSV\n  const handleDownloadCSV = () => {\n    if (expenses.length === 0) {\n      toast({\n        title: \"Aucune dépense\",\n        description: \"Il n'y a aucune dépense à exporter.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // En-têtes CSV\n    const headers = [\n      'Référence',\n      'Date',\n      'Description', \n      'Catégorie',\n      'Mode de paiement',\n      `Montant (${settings?.currency === 'GHS' ? 'GHS' : 'FCFA'})`,\n      'Statut',\n      'Notes'\n    ];\n\n    // Convertir les données en CSV\n    const csvData = expenses.map((expense: any) => {\n      const paymentMethod = PAYMENT_METHODS.find(p => p.value === expense.paymentMethod);\n      const status = EXPENSE_STATUS.find(s => s.value === expense.status);\n      return [\n        expense.reference || '',\n        new Date(expense.expenseDate).toLocaleDateString('fr-FR'),\n        expense.description || '',\n        expense.category?.name || 'Sans catégorie',\n        paymentMethod?.label || expense.paymentMethod,\n        parseFloat(expense.amount).toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' '),\n        status?.label || expense.status,\n        expense.notes || ''\n      ];\n    });\n\n    // Créer le contenu CSV avec BOM pour Windows\n    const csvContent = [\n      headers.join(','),\n      ...csvData.map(row => row.map(field => `\"${field}\"`).join(','))\n    ].join('\\n');\n\n    // Télécharger le fichier avec BOM UTF-8\n    const BOM = '\\uFEFF';\n    const blob = new Blob([BOM + csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `depenses_${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    toast({\n      title: \"Export réussi\",\n      description: `${expenses.length} dépenses exportées en CSV.`\n    });\n  };\n\n  if (expensesLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-32\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold tracking-tight\">Gestion des dépenses</h2>\n          <p className=\"text-muted-foreground\">\n            Suivez et gérez toutes vos dépenses d'entreprise\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            onClick={() => setShowDateFilter(!showDateFilter)}\n            data-testid=\"button-toggle-date-filter\"\n          >\n            <Filter className=\"mr-2 h-4 w-4\" />\n            Filtrer par période\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={handleDownloadCSV}\n            disabled={expenses.length === 0}\n            data-testid=\"button-download-expenses-csv\"\n          >\n            <FileDown className=\"mr-2 h-4 w-4\" />\n            Télécharger CSV\n          </Button>\n          <Dialog open={isCategoryDialogOpen} onOpenChange={setIsCategoryDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Catégorie\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Nouvelle catégorie de dépense</DialogTitle>\n                <DialogDescription>\n                  Créez une nouvelle catégorie pour organiser vos dépenses\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...categoryForm}>\n                <form \n                  onSubmit={(e) => {\n                    e.preventDefault();\n                    console.log(\"Form submitted\");\n                    const values = categoryForm.getValues();\n                    console.log(\"Form values:\", values);\n                    if (values.name && values.name.trim()) {\n                      handleCreateCategory(values);\n                    } else {\n                      toast({\n                        title: \"Erreur\",\n                        description: \"Le nom de la catégorie est requis\",\n                        variant: \"destructive\"\n                      });\n                    }\n                  }} \n                  className=\"space-y-4\"\n                >\n                  <FormField\n                    control={categoryForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nom de la catégorie</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Frais de déplacement\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={categoryForm.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Description de la catégorie...\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <DialogFooter className=\"flex flex-col sm:flex-row gap-2 sm:gap-0 sm:space-x-2\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\"\n                      onClick={() => {\n                        setIsCategoryDialogOpen(false);\n                        categoryForm.reset();\n                      }}\n                      disabled={createCategoryMutation.isPending}\n                    >\n                      Annuler\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createCategoryMutation.isPending}\n                      onClick={() => console.log(\"Button clicked directly\")}\n                    >\n                      {createCategoryMutation.isPending ? \"Création...\" : \"Créer\"}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n\n          <Dialog open={isExpenseDialogOpen} onOpenChange={setIsExpenseDialogOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Nouvelle dépense\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Nouvelle dépense</DialogTitle>\n                <DialogDescription>\n                  Enregistrez une nouvelle dépense d'entreprise\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...expenseForm}>\n                <form \n                  onSubmit={(e) => {\n                    e.preventDefault();\n                    console.log(\"Expense form submitted\");\n                    const values = expenseForm.getValues();\n                    console.log(\"Expense form values:\", values);\n                    console.log(\"Form errors:\", expenseForm.formState.errors);\n                    if (values.description && values.amount && values.categoryId) {\n                      // Ajouter la référence automatiquement\n                      const expenseData = {\n                        ...values,\n                        reference: `EXP-${Date.now()}`\n                      };\n                      console.log(\"Sending expense data:\", expenseData);\n                      handleCreateExpense(expenseData);\n                    } else {\n                      toast({\n                        title: \"Erreur\",\n                        description: \"Description, montant et catégorie sont requis\",\n                        variant: \"destructive\"\n                      });\n                    }\n                  }}\n                  className=\"space-y-4\"\n                >\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={expenseForm.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem className=\"col-span-2\">\n                          <FormLabel>Description</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Déjeuner d'affaires avec client\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={expenseForm.control}\n                      name=\"amount\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Montant ({settings?.currency === 'GHS' ? 'GHS' : 'FCFA'})</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" min=\"0\" step=\"0.01\" placeholder=\"25000\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={expenseForm.control}\n                      name=\"expenseDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Date de la dépense</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={expenseForm.control}\n                      name=\"categoryId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Catégorie</FormLabel>\n                          <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value ? String(field.value) : \"\"}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Sélectionnez une catégorie\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {categories.map((category: any) => (\n                                <SelectItem key={category.id} value={category.id.toString()}>\n                                  {category.name}\n                                  {category.isMajor && <Badge variant=\"secondary\" className=\"ml-2\">Majeure</Badge>}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={expenseForm.control}\n                      name=\"accountId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Compte Comptable</FormLabel>\n                          <Select onValueChange={(value) => field.onChange(value === \"none\" ? undefined : parseInt(value))} value={field.value ? String(field.value) : \"none\"}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Sélectionnez un compte\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"none\">Aucun compte</SelectItem>\n                              {chartOfAccounts\n                                .filter((account: any) => account.accountType === 'expense')\n                                .map((account: any) => (\n                                <SelectItem key={account.id} value={account.id.toString()}>\n                                  {account.accountCode} - {account.accountName}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={expenseForm.control}\n                      name=\"paymentMethod\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Méthode de paiement</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Sélectionnez\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {PAYMENT_METHODS.map((method) => (\n                                <SelectItem key={method.value} value={method.value}>\n                                  {method.icon} {method.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={expenseForm.control}\n                      name=\"imprestId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Fonds d'avance (optionnel)</FormLabel>\n                          <Select onValueChange={(value) => field.onChange(value === \"none\" ? undefined : parseInt(value))} value={field.value ? String(field.value) : \"none\"}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Aucun fonds\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"none\">Aucun fonds</SelectItem>\n                              {imprestFunds.map((fund: any) => (\n                                <SelectItem key={fund.id} value={fund.id.toString()}>\n                                  {fund.accountHolder} - {formatPrice(parseFloat(fund.currentBalance), settings?.currency)}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={expenseForm.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Notes (optionnel)</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Informations supplémentaires...\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <DialogFooter className=\"flex flex-col sm:flex-row gap-2 sm:gap-0 sm:space-x-2\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\"\n                      onClick={() => {\n                        setIsExpenseDialogOpen(false);\n                        expenseForm.reset();\n                      }}\n                      disabled={createExpenseMutation.isPending}\n                    >\n                      Annuler\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createExpenseMutation.isPending}\n                      onClick={() => console.log(\"Expense button clicked!\")}\n                    >\n                      {createExpenseMutation.isPending ? \"Création...\" : \"Créer la dépense\"}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Filtre par période */}\n      {showDateFilter && (\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4\" />\n                <Label htmlFor=\"start-date\">Du :</Label>\n                <Input\n                  id=\"start-date\"\n                  type=\"date\"\n                  value={startDate}\n                  onChange={(e) => setStartDate(e.target.value)}\n                  className=\"w-auto\"\n                  data-testid=\"input-start-date\"\n                />\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Label htmlFor=\"end-date\">Au :</Label>\n                <Input\n                  id=\"end-date\"\n                  type=\"date\"\n                  value={endDate}\n                  onChange={(e) => setEndDate(e.target.value)}\n                  className=\"w-auto\"\n                  data-testid=\"input-end-date\"\n                />\n              </div>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setStartDate(\"\");\n                  setEndDate(\"\");\n                }}\n                data-testid=\"button-clear-filter\"\n              >\n                Effacer\n              </Button>\n            </div>\n            {startDate && endDate && (\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Affichage des dépenses du {new Date(startDate).toLocaleDateString('fr-FR')} au {new Date(endDate).toLocaleDateString('fr-FR')}\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Expenses List */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <CardTitle>Liste des dépenses</CardTitle>\n              <CardDescription>\n                Toutes vos dépenses d'entreprise\n              </CardDescription>\n            </div>\n            {expenses && expenses.length > 0 && (\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" size=\"sm\" onClick={handleBulkPrint}>\n                  <Printer className=\"mr-2 h-4 w-4\" />\n                  Imprimer tout\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" onClick={handleBulkDownload}>\n                  <Download className=\"mr-2 h-4 w-4\" />\n                  PDF Audit\n                </Button>\n              </div>\n            )}\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {expenses?.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <DollarSign className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                <h3 className=\"mt-2 text-sm font-semibold\">Aucune dépense</h3>\n                <p className=\"mt-1 text-sm text-muted-foreground\">\n                  Commencez par créer votre première dépense.\n                </p>\n              </div>\n            ) : (\n              (() => {\n                const startIndex = (currentPage - 1) * itemsPerPage;\n                const endIndex = startIndex + itemsPerPage;\n                const paginatedExpenses = expenses?.slice(startIndex, endIndex) || [];\n                const totalPages = Math.ceil((expenses?.length || 0) / itemsPerPage);\n\n                return (\n                  <>\n                    <div className=\"space-y-4\">\n                      {paginatedExpenses.map((expense: any) => {\n                const status = EXPENSE_STATUS.find(s => s.value === expense.status);\n                const paymentMethod = PAYMENT_METHODS.find(p => p.value === expense.paymentMethod);\n                \n                return (\n                  <div key={expense.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3\">\n                        <div>\n                          <h4 className=\"font-medium\">{expense.description}</h4>\n                          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <span>{expense.category?.name}</span>\n                            {expense.account && (\n                              <>\n                                <span>•</span>\n                                <span className=\"text-blue-600\">{expense.account.accountCode}</span>\n                              </>\n                            )}\n                            <span>•</span>\n                            <span>{paymentMethod?.icon} {paymentMethod?.label}</span>\n                            <span>•</span>\n                            <span>{new Date(expense.expenseDate).toLocaleDateString('fr-FR')}</span>\n                            {expense.category?.isMajor && (\n                              <>\n                                <span>•</span>\n                                <Badge variant=\"outline\" className=\"text-xs\">Majeure</Badge>\n                              </>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"text-right\">\n                        <p className=\"font-medium\">\n                          {formatPrice(parseFloat(expense.amount), settings?.currency)}\n                        </p>\n                        <Badge variant=\"secondary\" className={status?.color}>\n                          {status?.icon} {status?.label}\n                        </Badge>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        {expense.status === 'pending' && (\n                          <>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => approveExpenseMutation.mutate(expense.id)}\n                              disabled={approveExpenseMutation.isPending}\n                            >\n                              <Check className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => rejectExpenseMutation.mutate(expense.id)}\n                              disabled={rejectExpenseMutation.isPending}\n                            >\n                              <X className=\"h-4 w-4\" />\n                            </Button>\n                          </>\n                        )}\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-md\">\n                            <DialogHeader>\n                              <DialogTitle>Détails de la dépense</DialogTitle>\n                              <DialogDescription>\n                                Informations complètes sur cette dépense\n                              </DialogDescription>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Référence</Label>\n                                  <p className=\"text-sm\">{expense.reference}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Montant</Label>\n                                  <p className=\"text-sm font-semibold\">{formatPrice(parseFloat(expense.amount), settings?.currency)}</p>\n                                </div>\n                              </div>\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Catégorie</Label>\n                                  <p className=\"text-sm\">{expense.category?.name || 'Non définie'}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Date</Label>\n                                  <p className=\"text-sm\">{new Date(expense.expenseDate).toLocaleDateString('fr-FR')}</p>\n                                </div>\n                              </div>\n                              {expense.account && (\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Compte Comptable</Label>\n                                  <p className=\"text-sm\">{expense.account.accountCode} - {expense.account.accountName}</p>\n                                </div>\n                              )}\n                              <div>\n                                <Label className=\"text-sm font-medium text-muted-foreground\">Description</Label>\n                                <p className=\"text-sm\">{expense.description}</p>\n                              </div>\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Méthode de paiement</Label>\n                                  <p className=\"text-sm\">\n                                    {PAYMENT_METHODS.find(m => m.value === expense.paymentMethod)?.label || expense.paymentMethod}\n                                  </p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Statut</Label>\n                                  <Badge variant=\"secondary\" className={EXPENSE_STATUS.find(s => s.value === expense.status)?.color}>\n                                    {EXPENSE_STATUS.find(s => s.value === expense.status)?.icon} {EXPENSE_STATUS.find(s => s.value === expense.status)?.label}\n                                  </Badge>\n                                </div>\n                              </div>\n                              {expense.notes && (\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Notes</Label>\n                                  <p className=\"text-sm\">{expense.notes}</p>\n                                </div>\n                              )}\n                              {expense.approvedBy && (\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                  <div>\n                                    <Label className=\"text-sm font-medium text-muted-foreground\">Approuvé par</Label>\n                                    <p className=\"text-sm\">{expense.approvedBy}</p>\n                                  </div>\n                                  <div>\n                                    <Label className=\"text-sm font-medium text-muted-foreground\">Date d'approbation</Label>\n                                    <p className=\"text-sm\">{new Date(expense.approvedAt).toLocaleDateString('fr-FR')}</p>\n                                  </div>\n                                </div>\n                              )}\n                              <div>\n                                <Label className=\"text-sm font-medium text-muted-foreground\">Créé le</Label>\n                                <p className=\"text-sm\">{new Date(expense.createdAt).toLocaleDateString('fr-FR')} à {new Date(expense.createdAt).toLocaleTimeString('fr-FR')}</p>\n                              </div>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n                      </div>\n                    </div>\n                    <div className=\"mt-4 flex justify-end\">\n                      <ExpensePDF expense={expense} user={user} />\n                    </div>\n                  </div>\n                        );\n                      })}\n                    </div>\n                    \n                    {totalPages > 1 && (\n                      <Pagination className=\"mt-6\">\n                        <PaginationContent>\n                          <PaginationItem>\n                            <PaginationPrevious \n                              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                              className={currentPage === 1 ? \"pointer-events-none opacity-50\" : \"cursor-pointer\"}\n                            >\n                              Précédent\n                            </PaginationPrevious>\n                          </PaginationItem>\n                          \n                          {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                            <PaginationItem key={page}>\n                              <PaginationLink\n                                onClick={() => setCurrentPage(page)}\n                                isActive={currentPage === page}\n                                className=\"cursor-pointer\"\n                              >\n                                {page}\n                              </PaginationLink>\n                            </PaginationItem>\n                          ))}\n                          \n                          <PaginationItem>\n                            <PaginationNext\n                              onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                              className={currentPage === totalPages ? \"pointer-events-none opacity-50\" : \"cursor-pointer\"}\n                            >\n                              Suivant\n                            </PaginationNext>\n                          </PaginationItem>\n                        </PaginationContent>\n                      </Pagination>\n                    )}\n                  </>\n                );\n              })()\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":46594},"client/src/components/accounting/expense-pdf.tsx":{"content":"import { Download, Printer } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ExpensePDFProps {\n  expense: any;\n  user?: any;\n}\n\nexport function ExpensePDF({ expense, user }: ExpensePDFProps) {\n  const handlePrint = () => {\n    const originalTitle = document.title;\n    document.title = `Dépense ${expense.reference}`;\n    \n    // Create a new window for printing\n    const printWindow = window.open('', '_blank', 'width=800,height=600');\n    if (!printWindow) {\n      alert('Veuillez autoriser les popups pour imprimer');\n      return;\n    }\n\n    const statusMap = {\n      'pending': { label: 'En attente', color: '#f59e0b', icon: '⏳' },\n      'approved': { label: 'Approuvée', color: '#10b981', icon: '✅' },\n      'rejected': { label: 'Rejetée', color: '#ef4444', icon: '❌' }\n    } as const;\n    \n    const statusInfo = statusMap[expense.status as keyof typeof statusMap] || { label: expense.status, color: '#6b7280', icon: '📄' };\n\n    printWindow.document.write(`\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Dépense ${expense.reference}</title>\n        <style>\n          body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            color: black;\n            line-height: 1.6;\n          }\n          .header {\n            text-align: center;\n            margin-bottom: 40px;\n            border-bottom: 3px solid #3b82f6;\n            padding-bottom: 20px;\n          }\n          .header h1 {\n            font-size: 36px;\n            font-weight: bold;\n            margin: 0;\n            color: #3b82f6;\n          }\n          .header p {\n            font-size: 18px;\n            color: #666;\n            margin: 8px 0;\n          }\n          .grid {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 40px;\n            margin-bottom: 30px;\n          }\n          .section h3 {\n            font-size: 18px;\n            font-weight: bold;\n            margin-bottom: 15px;\n            color: #374151;\n            border-bottom: 2px solid #e5e7eb;\n            padding-bottom: 5px;\n          }\n          .section div {\n            font-size: 14px;\n            line-height: 1.8;\n          }\n          .description {\n            margin-bottom: 30px;\n          }\n          .description-content {\n            background-color: #f9fafb;\n            padding: 15px;\n            border-radius: 8px;\n            border-left: 4px solid #3b82f6;\n          }\n          .amount-box {\n            background-color: #f0f9ff;\n            padding: 20px;\n            border-radius: 8px;\n            border: 2px solid #3b82f6;\n            text-align: center;\n            margin-bottom: 30px;\n          }\n          .amount-box h3 {\n            font-size: 24px;\n            font-weight: bold;\n            margin: 0;\n            color: #1e40af;\n          }\n          .amount-box p {\n            font-size: 36px;\n            font-weight: bold;\n            margin: 10px 0;\n            color: #1e40af;\n          }\n          .footer {\n            border-top: 2px solid #e5e7eb;\n            padding-top: 20px;\n            margin-top: 40px;\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 40px;\n            font-size: 12px;\n            color: #6b7280;\n          }\n          .footer-right {\n            text-align: right;\n          }\n          @media print {\n            body { margin: 0; }\n            .no-print { display: none; }\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>JUSTIFICATIF DE DÉPENSE</h1>\n          <p>${expense.reference}</p>\n        </div>\n\n        <div class=\"grid\">\n          <div class=\"section\">\n            <h3>Informations de l'entreprise</h3>\n            <div>\n              <strong>${user?.company || `${user?.firstName || ''} ${user?.lastName || ''}`.trim() || 'Mon Entreprise'}</strong><br>\n              ${user?.address ? `${user?.address}<br>` : ''}\n              ${user?.phone ? `Tél: ${user?.phone}<br>` : ''}\n              ${user?.email ? `Email: ${user?.email}` : ''}\n            </div>\n          </div>\n          <div class=\"section\">\n            <h3>Détails de la dépense</h3>\n            <div>\n              <strong>Date:</strong> ${new Date(expense.expenseDate).toLocaleDateString('fr-FR')}<br>\n              <strong>Statut:</strong> <span style=\"color: ${statusInfo.color};\">${statusInfo.icon} ${statusInfo.label}</span><br>\n              <strong>Méthode:</strong> ${expense.paymentMethod === 'cash' ? 'Espèces' : expense.paymentMethod === 'check' ? 'Chèque' : expense.paymentMethod === 'transfer' ? 'Virement' : expense.paymentMethod}<br>\n              <strong>Catégorie:</strong> ${expense.category?.name || 'Non définie'}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"description\">\n          <div class=\"section\">\n            <h3>Description</h3>\n            <div class=\"description-content\">\n              <p style=\"margin: 0; font-size: 14px; line-height: 1.6;\">${expense.description}</p>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"amount-box\">\n          <h3>MONTANT TOTAL</h3>\n          <p>${parseFloat(expense.amount).toLocaleString('fr-FR')} FCFA</p>\n        </div>\n\n        ${expense.notes ? `\n        <div class=\"description\">\n          <div class=\"section\">\n            <h3>Notes</h3>\n            <div style=\"background-color: #fffbeb; padding: 15px; border-radius: 8px; border-left: 4px solid #f59e0b;\">\n              <p style=\"margin: 0; font-size: 14px; line-height: 1.6;\">${expense.notes}</p>\n            </div>\n          </div>\n        </div>\n        ` : ''}\n\n        ${expense.approvedBy ? `\n        <div class=\"description\">\n          <div class=\"section\">\n            <h3>Approbation</h3>\n            <div style=\"background-color: #f0fdf4; padding: 15px; border-radius: 8px; border-left: 4px solid #10b981;\">\n              <p style=\"margin: 0; font-size: 14px; line-height: 1.6;\">\n                <strong>Approuvé par:</strong> ${expense.approvedBy}<br>\n                <strong>Date d'approbation:</strong> ${new Date(expense.approvedAt).toLocaleDateString('fr-FR')} à ${new Date(expense.approvedAt).toLocaleTimeString('fr-FR')}\n              </p>\n            </div>\n          </div>\n        </div>\n        ` : ''}\n\n        <div class=\"footer\">\n          <div>\n            <strong>Document généré le:</strong><br>\n            ${new Date().toLocaleDateString('fr-FR')} à ${new Date().toLocaleTimeString('fr-FR')}\n          </div>\n          <div class=\"footer-right\">\n            <strong>YGestion</strong><br>\n            Système de gestion d'entreprise\n          </div>\n        </div>\n\n        <script>\n          window.onload = function() {\n            window.print();\n            window.onafterprint = function() {\n              window.close();\n            };\n          };\n        </script>\n      </body>\n      </html>\n    `);\n    \n    printWindow.document.close();\n    \n    setTimeout(() => {\n      document.title = originalTitle;\n    }, 100);\n  };\n\n  const handleDownloadPDF = async () => {\n    try {\n      const { default: jsPDF } = await import('jspdf');\n      const { default: html2canvas } = await import('html2canvas');\n\n      // Create a temporary hidden div with the expense content\n      const tempDiv = document.createElement('div');\n      tempDiv.style.position = 'absolute';\n      tempDiv.style.left = '-9999px';\n      tempDiv.style.top = '0';\n      tempDiv.style.width = '210mm';\n      tempDiv.style.background = 'white';\n      tempDiv.style.padding = '20px';\n      tempDiv.className = 'expense-pdf-content';\n\n      const statusMap = {\n        'pending': { label: 'En attente', color: '#f59e0b', icon: '⏳' },\n        'approved': { label: 'Approuvée', color: '#10b981', icon: '✅' },\n        'rejected': { label: 'Rejetée', color: '#ef4444', icon: '❌' }\n      } as const;\n      \n      const statusInfo = statusMap[expense.status as keyof typeof statusMap] || { label: expense.status, color: '#6b7280', icon: '📄' };\n\n      // Add expense HTML content to temp div\n      tempDiv.innerHTML = `\n        <div style=\"font-family: Arial, sans-serif; color: black; line-height: 1.6; max-width: 100%;\">\n          <div style=\"text-align: center; margin-bottom: 40px; border-bottom: 3px solid #3b82f6; padding-bottom: 20px;\">\n            <h1 style=\"font-size: 36px; font-weight: bold; margin: 0; color: #3b82f6;\">JUSTIFICATIF DE DÉPENSE</h1>\n            <p style=\"font-size: 18px; color: #666; margin: 8px 0;\">${expense.reference}</p>\n          </div>\n\n          <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 40px; margin-bottom: 30px;\">\n            <div>\n              <h3 style=\"font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 5px;\">Informations de l'entreprise</h3>\n              <div style=\"font-size: 14px; line-height: 1.8;\">\n                <strong>${user?.company || `${user?.firstName || ''} ${user?.lastName || ''}`.trim() || 'Mon Entreprise'}</strong><br>\n                ${user?.address ? `${user?.address}<br>` : ''}\n                ${user?.phone ? `Tél: ${user?.phone}<br>` : ''}\n                ${user?.email ? `Email: ${user?.email}` : ''}\n              </div>\n            </div>\n            <div>\n              <h3 style=\"font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 5px;\">Détails de la dépense</h3>\n              <div style=\"font-size: 14px; line-height: 1.8;\">\n                <strong>Date:</strong> ${new Date(expense.expenseDate).toLocaleDateString('fr-FR')}<br>\n                <strong>Statut:</strong> <span style=\"color: ${statusInfo.color};\">${statusInfo.icon} ${statusInfo.label}</span><br>\n                <strong>Méthode:</strong> ${expense.paymentMethod === 'cash' ? 'Espèces' : expense.paymentMethod === 'check' ? 'Chèque' : expense.paymentMethod === 'transfer' ? 'Virement' : expense.paymentMethod}<br>\n                <strong>Catégorie:</strong> ${expense.category?.name || 'Non définie'}\n              </div>\n            </div>\n          </div>\n\n          <div style=\"margin-bottom: 30px;\">\n            <h3 style=\"font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 5px;\">Description</h3>\n            <div style=\"background-color: #f9fafb; padding: 15px; border-radius: 8px; border-left: 4px solid #3b82f6;\">\n              <p style=\"margin: 0; font-size: 14px; line-height: 1.6;\">${expense.description}</p>\n            </div>\n          </div>\n\n          ${expense.notes ? `\n          <div style=\"margin-bottom: 30px;\">\n            <h3 style=\"font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 5px;\">Notes</h3>\n            <div style=\"background-color: #fffbeb; padding: 15px; border-radius: 8px; border-left: 4px solid #f59e0b;\">\n              <p style=\"margin: 0; font-size: 14px; line-height: 1.6;\">${expense.notes}</p>\n            </div>\n          </div>\n          ` : ''}\n\n          <div style=\"background-color: #f0f9ff; padding: 20px; border-radius: 8px; border: 2px solid #3b82f6; text-align: center; margin-bottom: 30px;\">\n            <h3 style=\"font-size: 24px; font-weight: bold; margin: 0; color: #1e40af;\">MONTANT TOTAL</h3>\n            <p style=\"font-size: 36px; font-weight: bold; margin: 10px 0; color: #1e40af;\">${parseFloat(expense.amount).toLocaleString('fr-FR')} FCFA</p>\n          </div>\n\n          ${expense.approvedBy ? `\n          <div style=\"margin-bottom: 30px;\">\n            <h3 style=\"font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 5px;\">Approbation</h3>\n            <div style=\"background-color: #f0fdf4; padding: 15px; border-radius: 8px; border-left: 4px solid #10b981;\">\n              <p style=\"margin: 0; font-size: 14px; line-height: 1.6;\">\n                <strong>Approuvé par:</strong> ${expense.approvedBy}<br>\n                <strong>Date d'approbation:</strong> ${new Date(expense.approvedAt).toLocaleDateString('fr-FR')} à ${new Date(expense.approvedAt).toLocaleTimeString('fr-FR')}\n              </p>\n            </div>\n          </div>\n          ` : ''}\n\n          <div style=\"border-top: 2px solid #e5e7eb; padding-top: 20px; margin-top: 40px;\">\n            <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 40px; font-size: 12px; color: #6b7280;\">\n              <div>\n                <strong>Document généré le:</strong><br>\n                ${new Date().toLocaleDateString('fr-FR')} à ${new Date().toLocaleTimeString('fr-FR')}\n              </div>\n              <div style=\"text-align: right;\">\n                <strong>YGestion</strong><br>\n                Système de gestion d'entreprise\n              </div>\n            </div>\n          </div>\n        </div>\n      `;\n\n      document.body.appendChild(tempDiv);\n\n      // Wait for content to render\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      // Generate canvas from HTML\n      const canvas = await html2canvas(tempDiv, {\n        scale: 1.5,\n        useCORS: true,\n        allowTaint: true,\n        backgroundColor: '#ffffff',\n        logging: false,\n        removeContainer: true,\n        imageTimeout: 15000,\n        width: tempDiv.scrollWidth,\n        height: tempDiv.scrollHeight\n      });\n\n      // Remove temp div\n      document.body.removeChild(tempDiv);\n\n      // Create PDF\n      const pdf = new jsPDF({\n        orientation: 'portrait',\n        unit: 'mm',\n        format: 'a4',\n      });\n\n      const pageWidth = pdf.internal.pageSize.getWidth();\n      const pageHeight = pdf.internal.pageSize.getHeight();\n      const margin = 10;\n      const contentWidth = pageWidth - (2 * margin);\n\n      // Calculate dimensions\n      const imgWidth = contentWidth;\n      const imgHeight = (canvas.height * imgWidth) / canvas.width;\n\n      // Add the image to PDF\n      const imgData = canvas.toDataURL('image/png', 0.95);\n\n      if (imgHeight <= pageHeight - (2 * margin)) {\n        // Single page\n        pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight);\n      } else {\n        // Multiple pages\n        let yPosition = 0;\n        const pageContentHeight = pageHeight - (2 * margin);\n\n        while (yPosition < imgHeight) {\n          const remainingHeight = imgHeight - yPosition;\n          const currentPageHeight = Math.min(pageContentHeight, remainingHeight);\n\n          if (yPosition > 0) {\n            pdf.addPage();\n          }\n\n          pdf.addImage(\n            imgData,\n            'PNG',\n            margin,\n            margin,\n            imgWidth,\n            currentPageHeight\n          );\n\n          yPosition += currentPageHeight;\n        }\n      }\n\n      // Save the PDF\n      pdf.save(`Depense_${expense.reference}.pdf`);\n\n    } catch (error) {\n      console.error('Erreur lors de la génération du PDF:', error);\n      alert(`Erreur lors de la génération du PDF: ${error instanceof Error ? error.message : 'Erreur inconnue'}. Veuillez réessayer.`);\n    }\n  };\n\n  return (\n    <div className=\"flex gap-2\">\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={handlePrint}\n        className=\"print:hidden\"\n      >\n        <Printer className=\"h-4 w-4 mr-2\" />\n        Imprimer\n      </Button>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={handleDownloadPDF}\n        className=\"print:hidden\"\n      >\n        <Download className=\"h-4 w-4 mr-2\" />\n        PDF\n      </Button>\n    </div>\n  );\n}","size_bytes":15701},"client/src/components/accounting/imprest-fund-pdf.tsx":{"content":"import { Download, Printer } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ImprestFundPDFProps {\n  imprestFund: any;\n  user?: any;\n}\n\nexport function ImprestFundPDF({ imprestFund, user }: ImprestFundPDFProps) {\n  const handlePrint = () => {\n    const originalTitle = document.title;\n    document.title = `Fonds d'avance ${imprestFund.reference}`;\n    \n    // Create a new window for printing\n    const printWindow = window.open('', '_blank', 'width=800,height=600');\n    if (!printWindow) {\n      alert('Veuillez autoriser les popups pour imprimer');\n      return;\n    }\n\n    const statusMap = {\n      'active': { label: 'Actif', color: '#10b981', icon: '✅' },\n      'depleted': { label: 'Épuisé', color: '#ef4444', icon: '⚠️' },\n      'closed': { label: 'Fermé', color: '#6b7280', icon: '🔒' }\n    } as const;\n    \n    const statusInfo = statusMap[imprestFund.status as keyof typeof statusMap] || { label: imprestFund.status, color: '#6b7280', icon: '📄' };\n\n    printWindow.document.write(`\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Fonds d'avance ${imprestFund.reference}</title>\n        <style>\n          body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            color: black;\n            line-height: 1.6;\n          }\n          .header {\n            text-align: center;\n            margin-bottom: 40px;\n            border-bottom: 3px solid #3b82f6;\n            padding-bottom: 20px;\n          }\n          .header h1 {\n            font-size: 36px;\n            font-weight: bold;\n            margin: 0;\n            color: #3b82f6;\n          }\n          .header p {\n            font-size: 18px;\n            color: #666;\n            margin: 8px 0;\n          }\n          .grid {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 40px;\n            margin-bottom: 30px;\n          }\n          .grid-3 {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 30px;\n            margin-bottom: 30px;\n          }\n          .section h3 {\n            font-size: 18px;\n            font-weight: bold;\n            margin-bottom: 15px;\n            color: #374151;\n            border-bottom: 2px solid #e5e7eb;\n            padding-bottom: 5px;\n          }\n          .section div {\n            font-size: 14px;\n            line-height: 1.8;\n          }\n          .description {\n            margin-bottom: 30px;\n          }\n          .description-content {\n            background-color: #f9fafb;\n            padding: 15px;\n            border-radius: 8px;\n            border-left: 4px solid #3b82f6;\n          }\n          .amount-box {\n            padding: 20px;\n            border-radius: 8px;\n            border: 2px solid;\n            text-align: center;\n          }\n          .amount-box.initial {\n            background-color: #f0f9ff;\n            border-color: #3b82f6;\n          }\n          .amount-box.current {\n            background-color: #f0fdf4;\n            border-color: #10b981;\n          }\n          .amount-box.used {\n            background-color: #fffbeb;\n            border-color: #f59e0b;\n            margin-bottom: 30px;\n          }\n          .amount-box h3 {\n            font-size: 18px;\n            font-weight: bold;\n            margin: 0 0 10px 0;\n          }\n          .amount-box.initial h3 { color: #1e40af; }\n          .amount-box.current h3 { color: #047857; }\n          .amount-box.used h3 { color: #d97706; }\n          .amount-box p {\n            font-size: 24px;\n            font-weight: bold;\n            margin: 0;\n          }\n          .amount-box.initial p { color: #1e40af; }\n          .amount-box.current p { color: #047857; }\n          .amount-box.used p { color: #d97706; }\n          .footer {\n            border-top: 2px solid #e5e7eb;\n            padding-top: 20px;\n            margin-top: 40px;\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 40px;\n            font-size: 12px;\n            color: #6b7280;\n          }\n          .footer-right {\n            text-align: right;\n          }\n          @media print {\n            body { margin: 0; }\n            .no-print { display: none; }\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>FONDS D'AVANCE</h1>\n          <p>${imprestFund.reference}</p>\n        </div>\n\n        <div class=\"grid\">\n          <div class=\"section\">\n            <h3>Informations de l'entreprise</h3>\n            <div>\n              <strong>${user?.company || `${user?.firstName || ''} ${user?.lastName || ''}`.trim() || 'Mon Entreprise'}</strong><br>\n              ${user?.address ? `${user?.address}<br>` : ''}\n              ${user?.phone ? `Tél: ${user?.phone}<br>` : ''}\n              ${user?.email ? `Email: ${user?.email}` : ''}\n            </div>\n          </div>\n          <div class=\"section\">\n            <h3>Détails du fonds</h3>\n            <div>\n              <strong>Date de création:</strong> ${new Date(imprestFund.createdAt).toLocaleDateString('fr-FR')}<br>\n              <strong>Statut:</strong> <span style=\"color: ${statusInfo.color};\">${statusInfo.icon} ${statusInfo.label}</span><br>\n              <strong>Responsable:</strong> ${imprestFund.holder || 'Non défini'}<br>\n              <strong>Département:</strong> ${imprestFund.department || 'Non défini'}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"description\">\n          <div class=\"section\">\n            <h3>Description</h3>\n            <div class=\"description-content\">\n              <p style=\"margin: 0; font-size: 14px; line-height: 1.6;\">${imprestFund.description}</p>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"grid-3\">\n          <div class=\"amount-box initial\">\n            <h3>MONTANT INITIAL</h3>\n            <p>${parseFloat(imprestFund.initialAmount).toLocaleString('fr-FR')} FCFA</p>\n          </div>\n          <div class=\"amount-box current\">\n            <h3>SOLDE ACTUEL</h3>\n            <p>${parseFloat(imprestFund.currentBalance).toLocaleString('fr-FR')} FCFA</p>\n          </div>\n        </div>\n\n        <div class=\"amount-box used\">\n          <h3>MONTANT UTILISÉ</h3>\n          <p>${(parseFloat(imprestFund.initialAmount) - parseFloat(imprestFund.currentBalance)).toLocaleString('fr-FR')} FCFA</p>\n          <p style=\"font-size: 14px; margin: 5px 0 0 0; color: #92400e;\">\n            Taux d'utilisation: ${(((parseFloat(imprestFund.initialAmount) - parseFloat(imprestFund.currentBalance)) / parseFloat(imprestFund.initialAmount)) * 100).toFixed(1)}%\n          </p>\n        </div>\n\n        ${imprestFund.notes ? `\n        <div class=\"description\">\n          <div class=\"section\">\n            <h3>Notes</h3>\n            <div style=\"background-color: #fffbeb; padding: 15px; border-radius: 8px; border-left: 4px solid #f59e0b;\">\n              <p style=\"margin: 0; font-size: 14px; line-height: 1.6;\">${imprestFund.notes}</p>\n            </div>\n          </div>\n        </div>\n        ` : ''}\n\n        <div class=\"footer\">\n          <div>\n            <strong>Document généré le:</strong><br>\n            ${new Date().toLocaleDateString('fr-FR')} à ${new Date().toLocaleTimeString('fr-FR')}\n          </div>\n          <div class=\"footer-right\">\n            <strong>YGestion</strong><br>\n            Système de gestion d'entreprise\n          </div>\n        </div>\n\n        <script>\n          window.onload = function() {\n            window.print();\n            window.onafterprint = function() {\n              window.close();\n            };\n          };\n        </script>\n      </body>\n      </html>\n    `);\n    \n    printWindow.document.close();\n    \n    setTimeout(() => {\n      document.title = originalTitle;\n    }, 100);\n  };\n\n  const handleDownloadPDF = async () => {\n    try {\n      const { default: jsPDF } = await import('jspdf');\n      const { default: html2canvas } = await import('html2canvas');\n\n      // Create a temporary hidden div with the imprest fund content\n      const tempDiv = document.createElement('div');\n      tempDiv.style.position = 'absolute';\n      tempDiv.style.left = '-9999px';\n      tempDiv.style.top = '0';\n      tempDiv.style.width = '210mm';\n      tempDiv.style.background = 'white';\n      tempDiv.style.padding = '20px';\n      tempDiv.className = 'imprest-fund-pdf-content';\n\n      const statusMap = {\n        'active': { label: 'Actif', color: '#10b981', icon: '✅' },\n        'depleted': { label: 'Épuisé', color: '#ef4444', icon: '⚠️' },\n        'closed': { label: 'Fermé', color: '#6b7280', icon: '🔒' }\n      } as const;\n      \n      const statusInfo = statusMap[imprestFund.status as keyof typeof statusMap] || { label: imprestFund.status, color: '#6b7280', icon: '📄' };\n\n      // Add imprest fund HTML content to temp div\n      tempDiv.innerHTML = `\n        <div style=\"font-family: Arial, sans-serif; color: black; line-height: 1.6; max-width: 100%;\">\n          <div style=\"text-align: center; margin-bottom: 40px; border-bottom: 3px solid #3b82f6; padding-bottom: 20px;\">\n            <h1 style=\"font-size: 36px; font-weight: bold; margin: 0; color: #3b82f6;\">FONDS D'AVANCE</h1>\n            <p style=\"font-size: 18px; color: #666; margin: 8px 0;\">${imprestFund.reference}</p>\n          </div>\n\n          <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 40px; margin-bottom: 30px;\">\n            <div>\n              <h3 style=\"font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 5px;\">Informations de l'entreprise</h3>\n              <div style=\"font-size: 14px; line-height: 1.8;\">\n                <strong>${user?.company || `${user?.firstName || ''} ${user?.lastName || ''}`.trim() || 'Mon Entreprise'}</strong><br>\n                ${user?.address ? `${user?.address}<br>` : ''}\n                ${user?.phone ? `Tél: ${user?.phone}<br>` : ''}\n                ${user?.email ? `Email: ${user?.email}` : ''}\n              </div>\n            </div>\n            <div>\n              <h3 style=\"font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 5px;\">Détails du fonds</h3>\n              <div style=\"font-size: 14px; line-height: 1.8;\">\n                <strong>Date de création:</strong> ${new Date(imprestFund.createdAt).toLocaleDateString('fr-FR')}<br>\n                <strong>Statut:</strong> <span style=\"color: ${statusInfo.color};\">${statusInfo.icon} ${statusInfo.label}</span><br>\n                <strong>Responsable:</strong> ${imprestFund.holder || 'Non défini'}<br>\n                <strong>Département:</strong> ${imprestFund.department || 'Non défini'}\n              </div>\n            </div>\n          </div>\n\n          <div style=\"margin-bottom: 30px;\">\n            <h3 style=\"font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 5px;\">Description</h3>\n            <div style=\"background-color: #f9fafb; padding: 15px; border-radius: 8px; border-left: 4px solid #3b82f6;\">\n              <p style=\"margin: 0; font-size: 14px; line-height: 1.6;\">${imprestFund.description}</p>\n            </div>\n          </div>\n\n          <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 30px; margin-bottom: 30px;\">\n            <div style=\"background-color: #f0f9ff; padding: 20px; border-radius: 8px; border: 2px solid #3b82f6; text-align: center;\">\n              <h3 style=\"font-size: 18px; font-weight: bold; margin: 0 0 10px 0; color: #1e40af;\">MONTANT INITIAL</h3>\n              <p style=\"font-size: 24px; font-weight: bold; margin: 0; color: #1e40af;\">${parseFloat(imprestFund.initialAmount).toLocaleString('fr-FR')} FCFA</p>\n            </div>\n            <div style=\"background-color: #f0fdf4; padding: 20px; border-radius: 8px; border: 2px solid #10b981; text-align: center;\">\n              <h3 style=\"font-size: 18px; font-weight: bold; margin: 0 0 10px 0; color: #047857;\">SOLDE ACTUEL</h3>\n              <p style=\"font-size: 24px; font-weight: bold; margin: 0; color: #047857;\">${parseFloat(imprestFund.currentBalance).toLocaleString('fr-FR')} FCFA</p>\n            </div>\n          </div>\n\n          <div style=\"background-color: #fffbeb; padding: 20px; border-radius: 8px; border: 2px solid #f59e0b; text-align: center; margin-bottom: 30px;\">\n            <h3 style=\"font-size: 18px; font-weight: bold; margin: 0 0 10px 0; color: #d97706;\">MONTANT UTILISÉ</h3>\n            <p style=\"font-size: 24px; font-weight: bold; margin: 0; color: #d97706;\">${(parseFloat(imprestFund.initialAmount) - parseFloat(imprestFund.currentBalance)).toLocaleString('fr-FR')} FCFA</p>\n            <p style=\"font-size: 14px; margin: 5px 0 0 0; color: #92400e;\">\n              Taux d'utilisation: ${(((parseFloat(imprestFund.initialAmount) - parseFloat(imprestFund.currentBalance)) / parseFloat(imprestFund.initialAmount)) * 100).toFixed(1)}%\n            </p>\n          </div>\n\n          ${imprestFund.notes ? `\n          <div style=\"margin-bottom: 30px;\">\n            <h3 style=\"font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 5px;\">Notes</h3>\n            <div style=\"background-color: #fffbeb; padding: 15px; border-radius: 8px; border-left: 4px solid #f59e0b;\">\n              <p style=\"margin: 0; font-size: 14px; line-height: 1.6;\">${imprestFund.notes}</p>\n            </div>\n          </div>\n          ` : ''}\n\n          <div style=\"border-top: 2px solid #e5e7eb; padding-top: 20px; margin-top: 40px;\">\n            <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 40px; font-size: 12px; color: #6b7280;\">\n              <div>\n                <strong>Document généré le:</strong><br>\n                ${new Date().toLocaleDateString('fr-FR')} à ${new Date().toLocaleTimeString('fr-FR')}\n              </div>\n              <div style=\"text-align: right;\">\n                <strong>YGestion</strong><br>\n                Système de gestion d'entreprise\n              </div>\n            </div>\n          </div>\n        </div>\n      `;\n\n      document.body.appendChild(tempDiv);\n\n      // Wait for content to render\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      // Generate canvas from HTML\n      const canvas = await html2canvas(tempDiv, {\n        scale: 1.5,\n        useCORS: true,\n        allowTaint: true,\n        backgroundColor: '#ffffff',\n        logging: false,\n        removeContainer: true,\n        imageTimeout: 15000,\n        width: tempDiv.scrollWidth,\n        height: tempDiv.scrollHeight\n      });\n\n      // Remove temp div\n      document.body.removeChild(tempDiv);\n\n      // Create PDF\n      const pdf = new jsPDF({\n        orientation: 'portrait',\n        unit: 'mm',\n        format: 'a4',\n      });\n\n      const pageWidth = pdf.internal.pageSize.getWidth();\n      const pageHeight = pdf.internal.pageSize.getHeight();\n      const margin = 10;\n      const contentWidth = pageWidth - (2 * margin);\n\n      // Calculate dimensions\n      const imgWidth = contentWidth;\n      const imgHeight = (canvas.height * imgWidth) / canvas.width;\n\n      // Add the image to PDF\n      const imgData = canvas.toDataURL('image/png', 0.95);\n\n      if (imgHeight <= pageHeight - (2 * margin)) {\n        // Single page\n        pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight);\n      } else {\n        // Multiple pages\n        let yPosition = 0;\n        const pageContentHeight = pageHeight - (2 * margin);\n\n        while (yPosition < imgHeight) {\n          const remainingHeight = imgHeight - yPosition;\n          const currentPageHeight = Math.min(pageContentHeight, remainingHeight);\n\n          if (yPosition > 0) {\n            pdf.addPage();\n          }\n\n          pdf.addImage(\n            imgData,\n            'PNG',\n            margin,\n            margin,\n            imgWidth,\n            currentPageHeight\n          );\n\n          yPosition += currentPageHeight;\n        }\n      }\n\n      // Save the PDF\n      pdf.save(`Fonds_Avance_${imprestFund.reference}.pdf`);\n\n    } catch (error) {\n      console.error('Erreur lors de la génération du PDF:', error);\n      alert(`Erreur lors de la génération du PDF: ${error instanceof Error ? error.message : 'Erreur inconnue'}. Veuillez réessayer.`);\n    }\n  };\n\n  return (\n    <div className=\"flex gap-2\">\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={handlePrint}\n        className=\"print:hidden\"\n      >\n        <Printer className=\"h-4 w-4 mr-2\" />\n        Imprimer\n      </Button>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={handleDownloadPDF}\n        className=\"print:hidden\"\n      >\n        <Download className=\"h-4 w-4 mr-2\" />\n        PDF\n      </Button>\n    </div>\n  );\n}","size_bytes":16896},"client/src/components/accounting/imprest-manager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Label } from \"@/components/ui/label\";\nimport { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from \"@/components/ui/pagination\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, Wallet, ArrowUp, ArrowDown, Eye, DollarSign } from \"lucide-react\";\nimport { ImprestFundPDF } from \"./imprest-fund-pdf\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useTranslation, formatPrice } from \"@/lib/i18n\";\nimport { useSettings } from \"@/hooks/useSettings\";\nimport { \n  insertImprestFundSchema,\n  insertImprestTransactionSchema,\n  IMPREST_STATUS, \n  IMPREST_TRANSACTION_TYPES,\n  type InsertImprestFund,\n  type InsertImprestTransaction \n} from \"@shared/schema\";\n\nexport function ImprestManager() {\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n  const [selectedFund, setSelectedFund] = useState<any>(null);\n  const [isFundDialogOpen, setIsFundDialogOpen] = useState(false);\n  const [isTransactionDialogOpen, setIsTransactionDialogOpen] = useState(false);\n  const [transactionType, setTransactionType] = useState<'deposit' | 'withdrawal' | 'expense'>('deposit');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage] = useState(3);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Queries\n  const { data: imprestFunds = [], isLoading: fundsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/accounting/imprest-funds\"],\n  });\n\n  const { data: transactions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/accounting/imprest-funds\", selectedFund?.id, \"transactions\"],\n    enabled: !!selectedFund?.id,\n  });\n\n  const { data: user } = useQuery<any>({\n    queryKey: [\"/api/user\"],\n  });\n\n  // Forms\n  const fundForm = useForm<InsertImprestFund>({\n    resolver: zodResolver(insertImprestFundSchema),\n    defaultValues: {\n      accountHolder: \"\",\n      initialAmount: \"\",\n      purpose: \"\",\n      status: \"active\",\n    },\n  });\n\n  const transactionForm = useForm<InsertImprestTransaction>({\n    resolver: zodResolver(insertImprestTransactionSchema),\n    defaultValues: {\n      type: \"deposit\",\n      amount: \"\",\n      description: \"\",\n    },\n  });\n\n  // Mutations\n  const createFundMutation = useMutation({\n    mutationFn: (data: InsertImprestFund) => apiRequest(\"POST\", \"/api/accounting/imprest-funds\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/imprest-funds\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/stats\"] });\n      setIsFundDialogOpen(false);\n      fundForm.reset();\n      toast({ title: \"Fonds d'avance créé avec succès\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Erreur\", \n        description: error.message || \"Erreur lors de la création du fonds\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const createTransactionMutation = useMutation({\n    mutationFn: (data: InsertImprestTransaction) => apiRequest(\"POST\", \"/api/accounting/imprest-transactions\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/imprest-funds\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/imprest-funds\", selectedFund?.id, \"transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/stats\"] });\n      setIsTransactionDialogOpen(false);\n      transactionForm.reset();\n      toast({ title: \"Transaction créée avec succès\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Erreur\", \n        description: error.message || \"Erreur lors de la création de la transaction\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const handleCreateFund = (data: InsertImprestFund) => {\n    console.log(\"Form data:\", data);\n    createFundMutation.mutate(data);\n  };\n\n  const handleCreateTransaction = (data: InsertImprestTransaction) => {\n    createTransactionMutation.mutate({\n      ...data,\n      imprestId: selectedFund?.id,\n      type: transactionType,\n    });\n  };\n\n  if (fundsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-32\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold tracking-tight\">Gestion des fonds d'avance</h2>\n          <p className=\"text-muted-foreground\">\n            Système d'imprest pour gérer les avances et remboursements\n          </p>\n        </div>\n        <Dialog open={isFundDialogOpen} onOpenChange={setIsFundDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Nouveau fonds\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Nouveau fonds d'avance</DialogTitle>\n              <DialogDescription>\n                Créez un nouveau fonds d'avance pour un employé ou un projet\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...fundForm}>\n              <form \n                onSubmit={(e) => {\n                  e.preventDefault();\n                  console.log(\"Fund form submitted\");\n                  const values = fundForm.getValues();\n                  console.log(\"Fund form values:\", values);\n                  if (values.accountHolder && values.initialAmount && values.purpose) {\n                    handleCreateFund(values);\n                  } else {\n                    toast({\n                      title: \"Erreur\",\n                      description: \"Tous les champs sont requis\",\n                      variant: \"destructive\"\n                    });\n                  }\n                }}\n                className=\"space-y-4\"\n              >\n                <FormField\n                  control={fundForm.control}\n                  name=\"accountHolder\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Détenteur du fonds</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Nom de l'employé\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={fundForm.control}\n                  name=\"initialAmount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Montant initial ({settings?.currency === 'GHS' ? 'GHS' : 'FCFA'})</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" min=\"0\" step=\"0.01\" placeholder=\"100000\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={fundForm.control}\n                  name=\"purpose\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Objectif</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Frais de mission, petites dépenses...\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter className=\"flex flex-col sm:flex-row gap-2 sm:gap-0 sm:space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsFundDialogOpen(false);\n                      fundForm.reset();\n                    }}\n                    disabled={createFundMutation.isPending}\n                  >\n                    Annuler\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createFundMutation.isPending}\n                    onClick={() => console.log(\"Fund button clicked!\")}\n                  >\n                    {createFundMutation.isPending ? \"Création...\" : \"Créer le fonds\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {/* Funds List */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Fonds d'avance actifs</CardTitle>\n            <CardDescription>\n              Liste de tous vos fonds d'avance\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {imprestFunds.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Wallet className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                  <h3 className=\"mt-2 text-sm font-semibold\">Aucun fonds d'avance</h3>\n                  <p className=\"mt-1 text-sm text-muted-foreground\">\n                    Créez votre premier fonds d'avance.\n                  </p>\n                </div>\n              ) : (\n                (() => {\n                  const startIndex = (currentPage - 1) * itemsPerPage;\n                  const endIndex = startIndex + itemsPerPage;\n                  const paginatedFunds = imprestFunds.slice(startIndex, endIndex);\n                  const totalPages = Math.ceil(imprestFunds.length / itemsPerPage);\n\n                  return (\n                    <>\n                      <div className=\"space-y-4\">\n                        {paginatedFunds.map((fund: any) => {\n                  const status = IMPREST_STATUS.find(s => s.value === fund.status);\n                  const balance = parseFloat(fund.currentBalance);\n                  const initial = parseFloat(fund.initialAmount);\n                  const usagePercent = ((initial - balance) / initial) * 100;\n                  \n                  return (\n                    <div \n                      key={fund.id} \n                      className={`p-4 border rounded-lg cursor-pointer transition-colors ${\n                        selectedFund?.id === fund.id ? 'border-primary bg-primary/5' : 'hover:bg-muted/50'\n                      }`}\n                      onClick={() => setSelectedFund(fund)}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">{fund.accountHolder}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{fund.reference}</p>\n                        </div>\n                        <Badge variant=\"secondary\" className={status?.color}>\n                          {status?.icon} {status?.label}\n                        </Badge>\n                      </div>\n                      <div className=\"mt-3\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Solde actuel</span>\n                          <span className=\"font-medium\">\n                            {formatPrice(balance, settings?.currency)}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between text-sm text-muted-foreground\">\n                          <span>Montant initial</span>\n                          <span>{formatPrice(initial, settings?.currency)}</span>\n                        </div>\n                        <div className=\"mt-2 w-full bg-muted rounded-full h-2\">\n                          <div \n                            className=\"bg-primary h-2 rounded-full transition-all\" \n                            style={{ width: `${Math.min(usagePercent, 100)}%` }}\n                          />\n                        </div>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {usagePercent.toFixed(1)}% utilisé\n                        </p>\n                      </div>\n                      <div className=\"mt-3 pt-3 border-t flex justify-end\">\n                        <ImprestFundPDF imprestFund={fund} user={user} />\n                      </div>\n                    </div>\n                          );\n                        })}\n                      </div>\n                      \n                      {totalPages > 1 && (\n                        <Pagination className=\"mt-6\">\n                          <PaginationContent>\n                            <PaginationItem>\n                              <PaginationPrevious \n                                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                                className={currentPage === 1 ? \"pointer-events-none opacity-50\" : \"cursor-pointer\"}\n                              >\n                                Précédent\n                              </PaginationPrevious>\n                            </PaginationItem>\n                            \n                            {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                              <PaginationItem key={page}>\n                                <PaginationLink\n                                  onClick={() => setCurrentPage(page)}\n                                  isActive={currentPage === page}\n                                  className=\"cursor-pointer\"\n                                >\n                                  {page}\n                                </PaginationLink>\n                              </PaginationItem>\n                            ))}\n                            \n                            <PaginationItem>\n                              <PaginationNext\n                                onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                                className={currentPage === totalPages ? \"pointer-events-none opacity-50\" : \"cursor-pointer\"}\n                              >\n                                Suivant\n                              </PaginationNext>\n                            </PaginationItem>\n                          </PaginationContent>\n                        </Pagination>\n                      )}\n                    </>\n                  );\n                })()\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Fund Details & Transactions */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle>\n                  {selectedFund ? `Détails - ${selectedFund.accountHolder}` : \"Sélectionnez un fonds\"}\n                </CardTitle>\n                <CardDescription>\n                  {selectedFund ? \"Transactions et historique\" : \"Cliquez sur un fonds pour voir les détails\"}\n                </CardDescription>\n              </div>\n              {selectedFund && (\n                <Dialog open={isTransactionDialogOpen} onOpenChange={setIsTransactionDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button size=\"sm\">\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      Transaction\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Nouvelle transaction</DialogTitle>\n                      <DialogDescription>\n                        Ajoutez une transaction au fonds de {selectedFund.accountHolder}\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...transactionForm}>\n                      <form onSubmit={transactionForm.handleSubmit(handleCreateTransaction)} className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"transaction-type\">Type de transaction</Label>\n                          <Select value={transactionType} onValueChange={(value: any) => setTransactionType(value)}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {IMPREST_TRANSACTION_TYPES.map((type) => (\n                                <SelectItem key={type.value} value={type.value}>\n                                  {type.icon} {type.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <FormField\n                          control={transactionForm.control}\n                          name=\"amount\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Montant ({settings?.currency === 'GHS' ? 'GHS' : 'FCFA'})</FormLabel>\n                              <FormControl>\n                                <Input type=\"number\" min=\"0\" step=\"0.01\" placeholder=\"25000\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={transactionForm.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Description</FormLabel>\n                              <FormControl>\n                                <Textarea placeholder=\"Description de la transaction...\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <DialogFooter className=\"flex flex-col sm:flex-row gap-2 sm:gap-0 sm:space-x-2\">\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\"\n                            onClick={() => {\n                              setIsTransactionDialogOpen(false);\n                              transactionForm.reset();\n                            }}\n                            disabled={createTransactionMutation.isPending}\n                          >\n                            Annuler\n                          </Button>\n                          <Button type=\"submit\" disabled={createTransactionMutation.isPending}>\n                            {createTransactionMutation.isPending ? \"Création...\" : \"Créer la transaction\"}\n                          </Button>\n                        </DialogFooter>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent>\n            {selectedFund ? (\n              <div className=\"space-y-4\">\n                {/* Fund Summary */}\n                <div className=\"grid grid-cols-2 gap-4 p-4 bg-muted/50 rounded-lg\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Solde actuel</p>\n                    <p className=\"text-lg font-semibold\">\n                      {formatPrice(parseFloat(selectedFund.currentBalance), settings?.currency)}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Montant initial</p>\n                    <p className=\"text-lg font-semibold\">\n                      {formatPrice(parseFloat(selectedFund.initialAmount), settings?.currency)}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Purpose */}\n                <div>\n                  <h4 className=\"font-medium mb-2\">Objectif</h4>\n                  <p className=\"text-sm text-muted-foreground\">{selectedFund.purpose}</p>\n                </div>\n\n                {/* Transactions */}\n                <div>\n                  <h4 className=\"font-medium mb-3\">Historique des transactions</h4>\n                  <div className=\"space-y-2\">\n                    {transactions.length === 0 ? (\n                      <p className=\"text-sm text-muted-foreground text-center py-4\">\n                        Aucune transaction pour ce fonds\n                      </p>\n                    ) : (\n                      transactions.map((transaction: any) => {\n                        const type = IMPREST_TRANSACTION_TYPES.find(t => t.value === transaction.type);\n                        const amount = parseFloat(transaction.amount);\n                        \n                        return (\n                          <div key={transaction.id} className=\"flex items-center justify-between p-3 border rounded\">\n                            <div className=\"flex items-center gap-3\">\n                              <div className={`p-2 rounded-full ${type?.color}`}>\n                                {transaction.type === 'deposit' ? (\n                                  <ArrowDown className=\"h-4 w-4\" />\n                                ) : (\n                                  <ArrowUp className=\"h-4 w-4\" />\n                                )}\n                              </div>\n                              <div>\n                                <p className=\"text-sm font-medium\">{transaction.description}</p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {new Date(transaction.createdAt).toLocaleDateString('fr-FR')}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <p className={`text-sm font-medium ${\n                                transaction.type === 'deposit' ? 'text-green-600' : 'text-red-600'\n                              }`}>\n                                {transaction.type === 'deposit' ? '+' : '-'}\n                                {formatPrice(amount, settings?.currency)}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                Solde: {formatPrice(parseFloat(transaction.balanceAfter), settings?.currency)}\n                              </p>\n                            </div>\n                          </div>\n                        );\n                      })\n                    )}\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Eye className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                <h3 className=\"mt-2 text-sm font-semibold\">Aucun fonds sélectionné</h3>\n                <p className=\"mt-1 text-sm text-muted-foreground\">\n                  Sélectionnez un fonds pour voir ses détails.\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":24144},"client/src/components/accounting/report-pdf.tsx":{"content":"import { Download, Printer } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ReportPDFProps {\n  reportData: any;\n  reportType: string;\n  user?: any;\n}\n\nexport function ReportPDF({ reportData, reportType, user }: ReportPDFProps) {\n  const handlePrint = () => {\n    const originalTitle = document.title;\n    document.title = `Rapport ${reportType}`;\n    window.print();\n    setTimeout(() => {\n      document.title = originalTitle;\n    }, 100);\n  };\n\n  const handleDownloadPDF = async () => {\n    try {\n      const { default: jsPDF } = await import('jspdf');\n      const { default: html2canvas } = await import('html2canvas');\n\n      // Create a temporary hidden div with the report content\n      const tempDiv = document.createElement('div');\n      tempDiv.style.position = 'absolute';\n      tempDiv.style.left = '-9999px';\n      tempDiv.style.top = '0';\n      tempDiv.style.width = '210mm';\n      tempDiv.style.background = 'white';\n      tempDiv.style.padding = '20px';\n      tempDiv.className = 'report-pdf-content';\n\n      const reportTitle = {\n        'expenses': 'RAPPORT DES DÉPENSES',\n        'categories': 'RAPPORT DES CATÉGORIES',\n        'imprest': 'RAPPORT DES FONDS D\\'AVANCE',\n        'financial': 'RAPPORT FINANCIER'\n      }[reportType] || 'RAPPORT';\n\n      // Add report HTML content to temp div\n      tempDiv.innerHTML = `\n        <div style=\"font-family: Arial, sans-serif; color: black; line-height: 1.6; max-width: 100%;\">\n          <div style=\"text-align: center; margin-bottom: 40px; border-bottom: 3px solid #3b82f6; padding-bottom: 20px;\">\n            <h1 style=\"font-size: 36px; font-weight: bold; margin: 0; color: #3b82f6;\">${reportTitle}</h1>\n            <p style=\"font-size: 18px; color: #666; margin: 8px 0;\">Généré le ${new Date().toLocaleDateString('fr-FR')}</p>\n          </div>\n\n          <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 40px; margin-bottom: 30px;\">\n            <div>\n              <h3 style=\"font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 5px;\">Informations de l'entreprise</h3>\n              <div style=\"font-size: 14px; line-height: 1.8;\">\n                <strong>${user?.company || `${user?.firstName || ''} ${user?.lastName || ''}`.trim() || 'Mon Entreprise'}</strong><br>\n                ${user?.address ? `${user?.address}<br>` : ''}\n                ${user?.phone ? `Tél: ${user?.phone}<br>` : ''}\n                ${user?.email ? `Email: ${user?.email}` : ''}\n              </div>\n            </div>\n            <div>\n              <h3 style=\"font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 5px;\">Période du rapport</h3>\n              <div style=\"font-size: 14px; line-height: 1.8;\">\n                <strong>Date de génération:</strong> ${new Date().toLocaleDateString('fr-FR')}<br>\n                <strong>Heure:</strong> ${new Date().toLocaleTimeString('fr-FR')}<br>\n                <strong>Type:</strong> ${reportTitle}<br>\n                <strong>Devise:</strong> FCFA\n              </div>\n            </div>\n          </div>\n\n          <div style=\"margin-bottom: 30px;\">\n            <h3 style=\"font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 5px;\">Résumé exécutif</h3>\n            <div style=\"background-color: #f9fafb; padding: 15px; border-radius: 8px; border-left: 4px solid #3b82f6;\">\n              <p style=\"margin: 0; font-size: 14px; line-height: 1.6;\">\n                Ce rapport présente un aperçu détaillé des données comptables pour la période sélectionnée.\n                Les informations contenues dans ce document sont extraites directement du système YGestion\n                et reflètent l'état actuel des données au moment de la génération.\n              </p>\n            </div>\n          </div>\n\n          <div style=\"margin-bottom: 30px;\">\n            <h3 style=\"font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 5px;\">Données du rapport</h3>\n            <div style=\"background-color: #f0f9ff; padding: 20px; border-radius: 8px; border: 2px solid #3b82f6;\">\n              <pre style=\"font-family: 'Courier New', monospace; font-size: 12px; line-height: 1.4; margin: 0; white-space: pre-wrap; word-wrap: break-word;\">\n${JSON.stringify(reportData, null, 2)}\n              </pre>\n            </div>\n          </div>\n\n          <div style=\"border-top: 2px solid #e5e7eb; padding-top: 20px; margin-top: 40px;\">\n            <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 40px; font-size: 12px; color: #6b7280;\">\n              <div>\n                <strong>Document généré le:</strong><br>\n                ${new Date().toLocaleDateString('fr-FR')} à ${new Date().toLocaleTimeString('fr-FR')}\n              </div>\n              <div style=\"text-align: right;\">\n                <strong>YGestion</strong><br>\n                Système de gestion d'entreprise\n              </div>\n            </div>\n          </div>\n        </div>\n      `;\n\n      document.body.appendChild(tempDiv);\n\n      // Wait for content to render\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      // Generate canvas from HTML\n      const canvas = await html2canvas(tempDiv, {\n        scale: 1.5,\n        useCORS: true,\n        allowTaint: true,\n        backgroundColor: '#ffffff',\n        logging: false,\n        removeContainer: true,\n        imageTimeout: 15000,\n        width: tempDiv.scrollWidth,\n        height: tempDiv.scrollHeight\n      });\n\n      // Remove temp div\n      document.body.removeChild(tempDiv);\n\n      // Create PDF\n      const pdf = new jsPDF({\n        orientation: 'portrait',\n        unit: 'mm',\n        format: 'a4',\n      });\n\n      const pageWidth = pdf.internal.pageSize.getWidth();\n      const pageHeight = pdf.internal.pageSize.getHeight();\n      const margin = 10;\n      const contentWidth = pageWidth - (2 * margin);\n\n      // Calculate dimensions\n      const imgWidth = contentWidth;\n      const imgHeight = (canvas.height * imgWidth) / canvas.width;\n\n      // Add the image to PDF\n      const imgData = canvas.toDataURL('image/png', 0.95);\n\n      if (imgHeight <= pageHeight - (2 * margin)) {\n        // Single page\n        pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight);\n      } else {\n        // Multiple pages\n        let yPosition = 0;\n        const pageContentHeight = pageHeight - (2 * margin);\n\n        while (yPosition < imgHeight) {\n          const remainingHeight = imgHeight - yPosition;\n          const currentPageHeight = Math.min(pageContentHeight, remainingHeight);\n\n          if (yPosition > 0) {\n            pdf.addPage();\n          }\n\n          pdf.addImage(\n            imgData,\n            'PNG',\n            margin,\n            margin,\n            imgWidth,\n            currentPageHeight\n          );\n\n          yPosition += currentPageHeight;\n        }\n      }\n\n      // Save the PDF\n      pdf.save(`Rapport_${reportType}_${new Date().toISOString().split('T')[0]}.pdf`);\n\n    } catch (error) {\n      console.error('Erreur lors de la génération du PDF:', error);\n      alert(`Erreur lors de la génération du PDF: ${error instanceof Error ? error.message : 'Erreur inconnue'}. Veuillez réessayer.`);\n    }\n  };\n\n  return (\n    <div className=\"flex gap-2\">\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={handlePrint}\n        className=\"print:hidden\"\n      >\n        <Printer className=\"h-4 w-4 mr-2\" />\n        Imprimer\n      </Button>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={handleDownloadPDF}\n        className=\"print:hidden\"\n      >\n        <Download className=\"h-4 w-4 mr-2\" />\n        PDF\n      </Button>\n    </div>\n  );\n}","size_bytes":7924},"client/src/components/accounting/reports-manager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, FileText, Trash2, Calendar, BarChart3, FileSpreadsheet } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useTranslation, formatPrice } from \"@/lib/i18n\";\nimport { useSettings } from \"@/hooks/useSettings\";\nimport { \n  insertAccountingReportSchema,\n  REPORT_TYPES,\n  type InsertAccountingReport \n} from \"@shared/schema\";\n\nexport function ReportsManager() {\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n  const [isReportDialogOpen, setIsReportDialogOpen] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Queries\n  const { data: reports, isLoading: reportsLoading } = useQuery({\n    queryKey: [\"/api/accounting/reports\"],\n  });\n\n  const { data: stats } = useQuery<{\n    totalExpenses: number;\n    totalRevenues: number;\n    netResult: number;\n    monthlyRevenues: number;\n    monthlyExpensesByCategory: Array<{category: string; amount: number}>;\n  }>({\n    queryKey: [\"/api/accounting/stats\"],\n  });\n\n  // Form\n  const reportForm = useForm({\n    defaultValues: {\n      name: \"\",\n      type: \"expense_summary\",\n      periodStart: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0],\n      periodEnd: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  // Mutations\n  const createReportMutation = useMutation({\n    mutationFn: (data: any) => {\n      // Generate report data based on type and period\n      const reportData = generateReportData(data.type, data.periodStart, data.periodEnd);\n      \n      return apiRequest(\"POST\", \"/api/accounting/reports\", {\n        ...data,\n        data: reportData,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/reports\"] });\n      setIsReportDialogOpen(false);\n      reportForm.reset();\n      toast({ title: \"Rapport généré avec succès\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Erreur\", \n        description: error.message || \"Erreur lors de la génération du rapport\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const deleteReportMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/accounting/reports/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounting/reports\"] });\n      toast({ title: \"Rapport supprimé avec succès\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Erreur\", \n        description: error.message || \"Erreur lors de la suppression\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const generateReportData = (type: string, periodStart: string, periodEnd: string) => {\n    // This would normally use actual data from the queries\n    // For now, we'll use the stats data and create a basic report structure\n    switch (type) {\n      case 'expense_summary':\n        return {\n          summary: {\n            totalExpenses: (stats as any)?.totalExpenses || 0,\n            pendingExpenses: (stats as any)?.pendingExpenses || 0,\n            approvedExpenses: (stats as any)?.approvedExpenses || 0,\n          },\n          expensesByCategory: (stats as any)?.monthlyExpensesByCategory || [],\n          period: { start: periodStart, end: periodEnd },\n        };\n      case 'imprest_summary':\n        return {\n          summary: {\n            totalFunds: stats?.totalImprestFunds || 0,\n            activeFunds: stats?.activeImprestFunds || 0,\n          },\n          period: { start: periodStart, end: periodEnd },\n        };\n      case 'monthly_report':\n        return {\n          expenses: {\n            total: stats?.totalExpenses || 0,\n            byCategory: stats?.monthlyExpensesByCategory || [],\n          },\n          imprest: {\n            totalFunds: stats?.totalImprestFunds || 0,\n            activeFunds: stats?.activeImprestFunds || 0,\n          },\n          period: { start: periodStart, end: periodEnd },\n        };\n      default:\n        return {\n          period: { start: periodStart, end: periodEnd },\n          generated: new Date().toISOString(),\n        };\n    }\n  };\n\n  const handleCreateReport = (data: InsertAccountingReport) => {\n    createReportMutation.mutate(data);\n  };\n\n  // Fonction utilitaire pour échapper les valeurs CSV\n  const escapeCSVField = (field: any) => {\n    if (field === null || field === undefined) return '';\n    \n    let value = String(field);\n    \n    // Protection contre l'injection de formules CSV (CVE-2014-3524)\n    // Inclut la protection contre les espaces de début\n    if (value.length > 0 && /^\\s*[=+\\-@]/.test(value)) {\n      value = \"'\" + value;\n    }\n    \n    // Échapper les guillemets internes en les doublant\n    value = value.replace(/\"/g, '\"\"');\n    \n    return `\"${value}\"`;\n  };\n\n  const downloadReportCSV = (report: any) => {\n    const reportData = report.data;\n    const currency = settings?.currency === 'GHS' ? 'GHS' : 'FCFA';\n    \n    if (!reportData || Object.keys(reportData).length === 0) {\n      toast({\n        title: \"Aucune donnée\",\n        description: \"Ce rapport ne contient aucune donnée à exporter.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const csvRows = [];\n    \n    // En-tête du rapport\n    csvRows.push([\"RAPPORT COMPTABLE\"]);\n    csvRows.push([\"Nom\", report.name || 'Rapport sans nom']);\n    csvRows.push([\"Type\", REPORT_TYPES.find(t => t.value === report.type)?.label || report.type]);\n    \n    // Gestion robuste des dates\n    const periodStart = report.periodStart ? new Date(report.periodStart).toLocaleDateString('fr-FR') : 'Non définie';\n    const periodEnd = report.periodEnd ? new Date(report.periodEnd).toLocaleDateString('fr-FR') : 'Non définie';\n    const createdDate = report.createdAt ? new Date(report.createdAt).toLocaleDateString('fr-FR') : new Date().toLocaleDateString('fr-FR');\n    \n    csvRows.push([\"Période\", `${periodStart} - ${periodEnd}`]);\n    csvRows.push([\"Généré le\", createdDate]);\n    csvRows.push([\"\"]); // Ligne vide\n    \n    // Résumé\n    if (reportData.summary) {\n      csvRows.push([\"RÉSUMÉ\"]);\n      csvRows.push([\"Indicateur\", `Montant (${currency})`]);\n      \n      Object.entries(reportData.summary).forEach(([key, value]) => {\n        const label = key === 'totalExpenses' ? 'Dépenses totales' :\n                      key === 'totalFunds' ? 'Fonds totaux' :\n                      key === 'activeFunds' ? 'Fonds actifs' :\n                      key === 'pendingExpenses' ? 'Dépenses en attente' :\n                      key === 'approvedExpenses' ? 'Dépenses approuvées' : key;\n        \n        // Formatage des nombres avec 2 décimales comme dans les autres exports\n        const formattedValue = typeof value === 'number' \n          ? parseFloat(value.toString()).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')\n          : value;\n        csvRows.push([label, formattedValue]);\n      });\n      csvRows.push([\"\"]); // Ligne vide\n    }\n    \n    // Dépenses par catégorie\n    const expensesByCategory = reportData.expensesByCategory || \n                              (reportData.expenses && reportData.expenses.byCategory);\n    \n    if (expensesByCategory && expensesByCategory.length > 0) {\n      csvRows.push([\"DÉPENSES PAR CATÉGORIE\"]);\n      csvRows.push([\"Catégorie\", `Montant (${currency})`]);\n      \n      expensesByCategory.forEach((category: any) => {\n        const formattedAmount = parseFloat(category.amount || 0)\n          .toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n        csvRows.push([category.category || 'Sans catégorie', formattedAmount]);\n      });\n      csvRows.push([\"\"]); // Ligne vide\n    }\n    \n    // Fonds d'avance\n    if (reportData.imprest) {\n      csvRows.push([\"FONDS D'AVANCE\"]);\n      csvRows.push([\"Type\", `Montant (${currency})`]);\n      \n      const totalFunds = parseFloat(reportData.imprest.totalFunds || 0)\n        .toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n      const activeFunds = parseFloat(reportData.imprest.activeFunds || 0)\n        .toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n        \n      csvRows.push([\"Fonds totaux\", totalFunds]);\n      csvRows.push([\"Fonds actifs\", activeFunds]);\n    }\n\n    // Créer le contenu CSV avec échappement proper et BOM pour Windows\n    const csvContent = csvRows.map(row => \n      row.map(field => escapeCSVField(field)).join(',')\n    ).join('\\n');\n    \n    // Télécharger le fichier avec BOM UTF-8\n    const BOM = '\\uFEFF';\n    const blob = new Blob([BOM + csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    \n    // Nom de fichier sécurisé\n    const safeReportName = (report.name || 'rapport').replace(/[^a-zA-Z0-9_\\-]/g, '_');\n    link.setAttribute('download', `rapport_${safeReportName}_${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Export réussi\",\n      description: `Rapport \"${report.name || 'Sans nom'}\" exporté en CSV.`\n    });\n  };\n\n  if (reportsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-32\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Résultat Net Card */}\n      <Card className=\"border-2\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-5 w-5\" />\n            Résultat Net de l'Entreprise\n          </CardTitle>\n          <CardDescription>\n            Différence entre les revenus totaux et les dépenses totales\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n              <div className=\"text-sm text-green-600 dark:text-green-400 font-medium mb-1\">Revenus Totaux</div>\n              <div className=\"text-2xl font-bold text-green-700 dark:text-green-300\">\n                {formatPrice(stats?.totalRevenues || 0, settings?.currency)}\n              </div>\n            </div>\n            <div className=\"text-center p-4 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n              <div className=\"text-sm text-red-600 dark:text-red-400 font-medium mb-1\">Dépenses Totales</div>\n              <div className=\"text-2xl font-bold text-red-700 dark:text-red-300\">\n                {formatPrice(stats?.totalExpenses || 0, settings?.currency)}\n              </div>\n            </div>\n            <div className={`text-center p-4 rounded-lg ${(stats?.netResult || 0) >= 0 ? 'bg-blue-50 dark:bg-blue-900/20' : 'bg-orange-50 dark:bg-orange-900/20'}`}>\n              <div className={`text-sm font-medium mb-1 ${(stats?.netResult || 0) >= 0 ? 'text-blue-600 dark:text-blue-400' : 'text-orange-600 dark:text-orange-400'}`}>\n                {(stats?.netResult || 0) >= 0 ? 'Bénéfice Net' : 'Perte Nette'}\n              </div>\n              <div className={`text-2xl font-bold ${(stats?.netResult || 0) >= 0 ? 'text-blue-700 dark:text-blue-300' : 'text-orange-700 dark:text-orange-300'}`}>\n                {formatPrice(Math.abs(stats?.netResult || 0), settings?.currency)}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold tracking-tight\">Rapports comptables</h2>\n          <p className=\"text-muted-foreground\">\n            Générez et consultez vos rapports financiers\n          </p>\n        </div>\n        <Dialog open={isReportDialogOpen} onOpenChange={setIsReportDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Nouveau rapport\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Générer un nouveau rapport</DialogTitle>\n              <DialogDescription>\n                Créez un rapport comptable pour la période sélectionnée\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...reportForm}>\n              <form onSubmit={reportForm.handleSubmit(handleCreateReport)} className=\"space-y-4\">\n                <FormField\n                  control={reportForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nom du rapport</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Rapport mensuel janvier 2024\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={reportForm.control}\n                  name=\"type\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Type de rapport</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Sélectionnez un type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {REPORT_TYPES.map((type) => (\n                            <SelectItem key={type.value} value={type.value}>\n                              {type.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={reportForm.control}\n                    name=\"periodStart\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Date de début</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={reportForm.control}\n                    name=\"periodEnd\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Date de fin</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <DialogFooter>\n                  <Button type=\"submit\" disabled={createReportMutation.isPending}>\n                    {createReportMutation.isPending ? \"Génération...\" : \"Générer le rapport\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Dépenses ce mois</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {formatPrice(stats?.monthlyExpensesByCategory?.reduce((sum: number, cat: any) => sum + cat.amount, 0) || 0, settings?.currency)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats?.monthlyExpensesByCategory?.length || 0} catégories\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Fonds disponibles</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {formatPrice(stats?.totalImprestFunds || 0, settings?.currency)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats?.activeImprestFunds || 0} fonds actifs\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Rapports générés</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{reports?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Historique complet\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Reports List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Rapports générés</CardTitle>\n          <CardDescription>\n            Historique de tous vos rapports comptables\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {reports?.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <FileText className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                <h3 className=\"mt-2 text-sm font-semibold\">Aucun rapport</h3>\n                <p className=\"mt-1 text-sm text-muted-foreground\">\n                  Générez votre premier rapport comptable.\n                </p>\n              </div>\n            ) : (\n              reports?.map((report: any) => {\n                const reportType = REPORT_TYPES.find(t => t.value === report.type);\n                const startDate = new Date(report.periodStart).toLocaleDateString('fr-FR');\n                const endDate = new Date(report.periodEnd).toLocaleDateString('fr-FR');\n                \n                return (\n                  <div key={report.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3\">\n                        <FileText className=\"h-5 w-5 text-primary\" />\n                        <div>\n                          <h4 className=\"font-medium\">{report.name}</h4>\n                          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <span>{reportType?.label}</span>\n                            <span>•</span>\n                            <span>{startDate} - {endDate}</span>\n                            <span>•</span>\n                            <span>Généré le {new Date(report.createdAt).toLocaleDateString('fr-FR')}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => downloadReportCSV(report)}\n                        data-testid={`button-download-csv-${report.id}`}\n                        title=\"Télécharger en CSV\"\n                      >\n                        <FileSpreadsheet className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => deleteReportMutation.mutate(report.id)}\n                        disabled={deleteReportMutation.isPending}\n                        data-testid={`button-delete-${report.id}`}\n                        title=\"Supprimer le rapport\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                );\n              })\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Category Breakdown */}\n      {stats?.monthlyExpensesByCategory && stats.monthlyExpensesByCategory.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Aperçu des dépenses par catégorie</CardTitle>\n            <CardDescription>\n              Répartition des dépenses du mois en cours\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {stats.monthlyExpensesByCategory.map((category: any, index: number) => {\n                const percentage = category.allocatedAmount > 0 ? (category.amount / category.allocatedAmount) * 100 : 0;\n                \n                return (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"font-medium\">{category.category}</span>\n                      <span className=\"text-muted-foreground\">\n                        {formatPrice(category.amount, settings?.currency)} / {formatPrice(category.allocatedAmount, settings?.currency)} ({percentage.toFixed(1)}%)\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div \n                        className=\"bg-primary h-2 rounded-full transition-all\" \n                        style={{ width: `${percentage}%` }}\n                      />\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":23054},"client/src/components/accounting/revenue-manager.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Plus, Trash2, Edit, Eye, Calendar, DollarSign, FileText, Building2, CreditCard, Printer, Filter, FileDown } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { toast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useTranslation, formatPrice } from '@/lib/i18n';\nimport { useSettings } from '@/hooks/useSettings';\nimport { insertRevenueCategorySchema, insertRevenueSchema, type RevenueCategory, type Revenue } from '@shared/schema';\nimport { z } from 'zod';\nimport { format } from 'date-fns';\nimport { fr } from 'date-fns/locale';\nimport jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\n\n// Composant pour la gestion des revenus\nexport function RevenueManager() {\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n  const [activeTab, setActiveTab] = useState('revenues');\n  const [isCategoryDialogOpen, setIsCategoryDialogOpen] = useState(false);\n  const [isRevenueDialogOpen, setIsRevenueDialogOpen] = useState(false);\n  const [isDetailsDialogOpen, setIsDetailsDialogOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<RevenueCategory | null>(null);\n  const [editingRevenue, setEditingRevenue] = useState<Revenue | null>(null);\n  const [selectedRevenue, setSelectedRevenue] = useState<Revenue | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [startDate, setStartDate] = useState<string>(\"\");\n  const [endDate, setEndDate] = useState<string>(\"\");\n  const [showDateFilter, setShowDateFilter] = useState(false);\n  const itemsPerPage = 5;\n\n  const queryClient = useQueryClient();\n\n  // Récupérer les catégories de revenus\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<RevenueCategory[]>({\n    queryKey: ['/api/accounting/revenue-categories'],\n  });\n\n  // Récupérer les revenus\n  const { data: revenues = [], isLoading: revenuesLoading } = useQuery<(Revenue & { category: RevenueCategory })[]>({\n    queryKey: ['/api/accounting/revenues', startDate, endDate],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (startDate && endDate) {\n        params.append('startDate', startDate);\n        params.append('endDate', endDate);\n      }\n      return fetch(`/api/accounting/revenues?${params.toString()}`, {\n        credentials: 'include'\n      }).then(res => res.json());\n    },\n  });\n\n  // Calculs de pagination\n  const totalPages = Math.ceil(revenues.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedRevenues = revenues.slice(startIndex, endIndex);\n\n  // Formulaire pour les catégories\n  const categoryForm = useForm<z.infer<typeof insertRevenueCategorySchema>>({\n    resolver: zodResolver(insertRevenueCategorySchema),\n    defaultValues: {\n      name: '',\n      description: '',\n    },\n  });\n\n  // Type modifié pour le formulaire avec revenueDate en string\n  const revenueFormSchema = insertRevenueSchema.extend({\n    revenueDate: z.string(),\n  });\n\n  // Formulaire pour les revenus\n  const revenueForm = useForm<z.infer<typeof revenueFormSchema>>({\n    resolver: zodResolver(revenueFormSchema),\n    defaultValues: {\n      description: '',\n      amount: '',\n      categoryId: 0,\n      revenueDate: new Date().toISOString().split('T')[0],\n      paymentMethod: 'cash',\n      source: '',\n      notes: '',\n    },\n  });\n\n  // Mutation pour créer/modifier une catégorie\n  const categoryMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof insertRevenueCategorySchema>) => {\n      if (editingCategory) {\n        return apiRequest('PUT', `/api/accounting/revenue-categories/${editingCategory.id}`, data);\n      } else {\n        return apiRequest('POST', '/api/accounting/revenue-categories', data);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/accounting/revenue-categories'] });\n      setIsCategoryDialogOpen(false);\n      categoryForm.reset();\n      setEditingCategory(null);\n      toast({\n        title: editingCategory ? 'Catégorie mise à jour' : 'Catégorie créée',\n        description: editingCategory ? 'La catégorie de revenus a été mise à jour avec succès.' : 'La nouvelle catégorie de revenus a été créée.',\n      });\n    },\n    onError: (error) => {\n      console.error('Erreur lors de la sauvegarde:', error);\n      toast({\n        title: 'Erreur',\n        description: 'Une erreur est survenue lors de la sauvegarde de la catégorie.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Mutation pour supprimer une catégorie\n  const deleteCategoryMutation = useMutation({\n    mutationFn: (id: number) => apiRequest('DELETE', `/api/accounting/revenue-categories/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/accounting/revenue-categories'] });\n      toast({\n        title: 'Catégorie supprimée',\n        description: 'La catégorie de revenus a été supprimée avec succès.',\n      });\n    },\n    onError: (error) => {\n      console.error('Erreur lors de la suppression:', error);\n      toast({\n        title: 'Erreur',\n        description: 'Une erreur est survenue lors de la suppression de la catégorie.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Mutation pour créer/modifier un revenu\n  const revenueMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof revenueFormSchema>) => {\n      // Convertir la date string en Date pour l'API\n      const apiData = {\n        ...data,\n        revenueDate: new Date(data.revenueDate),\n      };\n      if (editingRevenue) {\n        return apiRequest('PUT', `/api/accounting/revenues/${editingRevenue.id}`, apiData);\n      } else {\n        return apiRequest('POST', '/api/accounting/revenues', apiData);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/accounting/revenues'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/accounting/stats'] });\n      setIsRevenueDialogOpen(false);\n      revenueForm.reset();\n      setEditingRevenue(null);\n      toast({\n        title: editingRevenue ? 'Revenu mis à jour' : 'Revenu créé',\n        description: editingRevenue ? 'Le revenu a été mis à jour avec succès.' : 'Le nouveau revenu a été enregistré.',\n      });\n    },\n    onError: (error) => {\n      console.error('Erreur lors de la sauvegarde:', error);\n      toast({\n        title: 'Erreur',\n        description: 'Une erreur est survenue lors de la sauvegarde du revenu.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Mutation pour supprimer un revenu\n  const deleteRevenueMutation = useMutation({\n    mutationFn: (id: number) => apiRequest('DELETE', `/api/accounting/revenues/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/accounting/revenues'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/accounting/stats'] });\n      toast({\n        title: 'Revenu supprimé',\n        description: 'Le revenu a été supprimé avec succès.',\n      });\n    },\n    onError: (error) => {\n      console.error('Erreur lors de la suppression:', error);\n      toast({\n        title: 'Erreur',\n        description: 'Une erreur est survenue lors de la suppression du revenu.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleEditCategory = (category: RevenueCategory) => {\n    setEditingCategory(category);\n    categoryForm.reset({\n      name: category.name,\n      description: category.description || '',\n    });\n    setIsCategoryDialogOpen(true);\n  };\n\n  const handleEditRevenue = (revenue: Revenue) => {\n    setEditingRevenue(revenue);\n    revenueForm.reset({\n      description: revenue.description,\n      amount: revenue.amount,\n      categoryId: revenue.categoryId,\n      revenueDate: format(new Date(revenue.revenueDate), 'yyyy-MM-dd'),\n      paymentMethod: revenue.paymentMethod,\n      source: revenue.source || '',\n      notes: revenue.notes || '',\n    });\n    setIsRevenueDialogOpen(true);\n  };\n\n  const handleViewRevenue = (revenue: Revenue & { category: RevenueCategory }) => {\n    setSelectedRevenue(revenue);\n    setIsDetailsDialogOpen(true);\n  };\n\n  const onCategorySubmit = (data: z.infer<typeof insertRevenueCategorySchema>) => {\n    categoryMutation.mutate(data);\n  };\n\n  const onRevenueSubmit = (data: z.infer<typeof revenueFormSchema>) => {\n    console.log('Tentative de création de revenu:', data);\n    revenueMutation.mutate(data);\n  };\n\n  // Fonction d'impression PDF d'un revenu\n  const printRevenue = (revenue: Revenue & { category?: RevenueCategory }) => {\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n\n    const html = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Reçu de Revenu - ${revenue.reference}</title>\n          <style>\n            @media print {\n              * { margin: 0; padding: 0; box-sizing: border-box; }\n              body { font-family: Arial, sans-serif; font-size: 12px; line-height: 1.4; color: #000; }\n              .print-container { max-width: 210mm; margin: 0 auto; padding: 20px; }\n              .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 15px; }\n              .company-name { font-size: 24px; font-weight: bold; color: #2563eb; margin-bottom: 5px; }\n              .document-title { font-size: 18px; font-weight: bold; margin-top: 15px; }\n              .info-section { margin: 20px 0; }\n              .info-row { display: flex; justify-content: space-between; margin: 8px 0; }\n              .label { font-weight: bold; color: #374151; }\n              .value { color: #000; }\n              .amount-section { background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0; text-align: center; }\n              .amount { font-size: 24px; font-weight: bold; color: #059669; }\n              .footer { margin-top: 40px; text-align: center; font-size: 10px; color: #6b7280; }\n            }\n            @page { margin: 15mm; }\n          </style>\n        </head>\n        <body>\n          <div class=\"print-container\">\n            <div class=\"header\">\n              <div class=\"company-name\">YGestion</div>\n              <div>Système de Gestion d'Entreprise</div>\n              <div class=\"document-title\">REÇU DE REVENU</div>\n            </div>\n            \n            <div class=\"info-section\">\n              <div class=\"info-row\">\n                <span class=\"label\">Référence:</span>\n                <span class=\"value\">${revenue.reference}</span>\n              </div>\n              <div class=\"info-row\">\n                <span class=\"label\">Date:</span>\n                <span class=\"value\">${format(new Date(revenue.revenueDate), 'dd/MM/yyyy', { locale: fr })}</span>\n              </div>\n              <div class=\"info-row\">\n                <span class=\"label\">Description:</span>\n                <span class=\"value\">${revenue.description}</span>\n              </div>\n              <div class=\"info-row\">\n                <span class=\"label\">Catégorie:</span>\n                <span class=\"value\">${revenue.category?.name || 'Sans catégorie'}</span>\n              </div>\n              <div class=\"info-row\">\n                <span class=\"label\">Mode de paiement:</span>\n                <span class=\"value\">${revenue.paymentMethod.replace('_', ' ')}</span>\n              </div>\n              ${revenue.source ? `\n                <div class=\"info-row\">\n                  <span class=\"label\">Source:</span>\n                  <span class=\"value\">${revenue.source}</span>\n                </div>\n              ` : ''}\n              ${revenue.notes ? `\n                <div class=\"info-row\">\n                  <span class=\"label\">Notes:</span>\n                  <span class=\"value\">${revenue.notes}</span>\n                </div>\n              ` : ''}\n            </div>\n            \n            <div class=\"amount-section\">\n              <div class=\"label\">MONTANT</div>\n              <div class=\"amount\">${formatPrice(parseFloat(revenue.amount), settings?.currency)}</div>\n            </div>\n            \n            <div class=\"footer\">\n              <p>Document généré le ${format(new Date(), 'dd/MM/yyyy à HH:mm', { locale: fr })}</p>\n              <p>YGestion - Gestion d'entreprise simplifiée</p>\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n\n    printWindow.document.write(html);\n    printWindow.document.close();\n    printWindow.focus();\n    \n    setTimeout(() => {\n      printWindow.print();\n      printWindow.close();\n    }, 250);\n  };\n\n\n\n\n\n  // Télécharger tous les revenus en CSV\n  const handleDownloadCSV = () => {\n    if (revenues.length === 0) {\n      toast({\n        title: \"Aucun revenu\",\n        description: \"Il n'y a aucun revenu à exporter.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // En-têtes CSV\n    const headers = [\n      'Référence',\n      'Date',\n      'Description',\n      'Catégorie', \n      'Mode de paiement',\n      `Montant (${settings?.currency === 'GHS' ? 'GHS' : 'FCFA'})`,\n      'Source',\n      'Notes'\n    ];\n\n    // Convertir les données en CSV\n    const csvData = revenues.map((revenue: any) => {\n      return [\n        revenue.reference || '',\n        format(new Date(revenue.revenueDate), 'dd/MM/yyyy', { locale: fr }),\n        revenue.description || '',\n        revenue.category?.name || 'Sans catégorie',\n        revenue.paymentMethod.replace('_', ' '),\n        parseFloat(revenue.amount).toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' '),\n        revenue.source || '',\n        revenue.notes || ''\n      ];\n    });\n\n    // Créer le contenu CSV avec BOM pour Windows\n    const csvContent = [\n      headers.join(','),\n      ...csvData.map(row => row.map(field => `\"${field}\"`).join(','))\n    ].join('\\n');\n\n    // Télécharger le fichier avec BOM UTF-8\n    const BOM = '\\uFEFF';\n    const blob = new Blob([BOM + csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `revenus_${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    toast({\n      title: \"Export réussi\",\n      description: `${revenues.length} revenus exportés en CSV.`\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Navigation par onglets */}\n      <div className=\"flex space-x-1 bg-gray-100 dark:bg-gray-800 p-1 rounded-lg\">\n        <button\n          onClick={() => setActiveTab('revenues')}\n          className={`px-6 py-3 text-sm font-medium rounded-md transition-all duration-200 flex items-center space-x-2 min-w-[120px] justify-center ${\n            activeTab === 'revenues'\n              ? 'bg-green-500 text-white shadow-sm'\n              : 'text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'\n          }`}\n          data-testid=\"tab-revenues\"\n        >\n          <DollarSign className=\"w-4 h-4\" />\n          <span>Revenus</span>\n        </button>\n        <button\n          onClick={() => setActiveTab('categories')}\n          className={`px-6 py-3 text-sm font-medium rounded-md transition-all duration-200 flex items-center space-x-2 min-w-[120px] justify-center ${\n            activeTab === 'categories'\n              ? 'bg-blue-500 text-white shadow-sm'\n              : 'text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'\n          }`}\n          data-testid=\"tab-categories\"\n        >\n          <Building2 className=\"w-4 h-4\" />\n          <span>Catégories</span>\n        </button>\n      </div>\n\n      {/* Onglet Revenus */}\n      {activeTab === 'revenues' && (\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold\">Gestion des Revenus</h3>\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowDateFilter(!showDateFilter)}\n                data-testid=\"button-toggle-revenue-date-filter\"\n              >\n                <Filter className=\"mr-2 h-4 w-4\" />\n                Filtrer par période\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={handleDownloadCSV}\n                disabled={revenues.length === 0}\n                data-testid=\"button-download-revenues-csv\"\n              >\n                <FileDown className=\"mr-2 h-4 w-4\" />\n                Télécharger CSV\n              </Button>\n              <Dialog open={isRevenueDialogOpen} onOpenChange={setIsRevenueDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-create-revenue\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Nouveau Revenu\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingRevenue ? 'Modifier le Revenu' : 'Nouveau Revenu'}\n                  </DialogTitle>\n                </DialogHeader>\n                <Form {...revenueForm}>\n                  <form onSubmit={(e) => {\n                    e.preventDefault();\n                    console.log(\"Revenue form submitted\");\n                    const values = revenueForm.getValues();\n                    console.log(\"Revenue form values:\", values);\n                    console.log(\"Revenue form errors:\", revenueForm.formState.errors);\n                    if (values.description && values.amount && values.categoryId) {\n                      onRevenueSubmit(values);\n                    } else {\n                      console.log(\"Validation failed - missing required fields\");\n                    }\n                  }} className=\"space-y-6 p-4\">\n                    <FormField\n                      control={revenueForm.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-revenue-description\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={revenueForm.control}\n                      name=\"amount\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Montant ({settings?.currency === 'GHS' ? 'GHS' : 'FCFA'})</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"number\" step=\"0.01\" min=\"0\" data-testid=\"input-revenue-amount\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={revenueForm.control}\n                      name=\"categoryId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Catégorie</FormLabel>\n                          <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString()}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-revenue-category\">\n                                <SelectValue placeholder=\"Sélectionner une catégorie\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {categories.map((category) => (\n                                <SelectItem key={category.id} value={category.id.toString()}>\n                                  {category.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={revenueForm.control}\n                      name=\"revenueDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Date du Revenu</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"date\" data-testid=\"input-revenue-date\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={revenueForm.control}\n                      name=\"paymentMethod\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Mode de Paiement</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-payment-method\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"cash\">Espèces</SelectItem>\n                              <SelectItem value=\"bank_transfer\">Virement Bancaire</SelectItem>\n                              <SelectItem value=\"check\">Chèque</SelectItem>\n                              <SelectItem value=\"mobile_money\">Mobile Money</SelectItem>\n                              <SelectItem value=\"card\">Carte</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={revenueForm.control}\n                      name=\"source\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Source</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value || ''} data-testid=\"input-revenue-source\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={revenueForm.control}\n                      name=\"notes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Notes</FormLabel>\n                          <FormControl>\n                            <Textarea {...field} value={field.value || ''} data-testid=\"textarea-revenue-notes\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <DialogFooter className=\"flex space-x-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          setIsRevenueDialogOpen(false);\n                          revenueForm.reset();\n                          setEditingRevenue(null);\n                        }}\n                        data-testid=\"button-cancel-revenue\"\n                      >\n                        Annuler\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        disabled={revenueMutation.isPending}\n                        data-testid=\"button-save-revenue\"\n                        onClick={() => console.log(\"Revenue button clicked directly\")}\n                      >\n                        {revenueMutation.isPending ? 'Sauvegarde...' : (editingRevenue ? 'Modifier' : 'Créer')}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n            </div>\n          </div>\n\n          {/* Filtre par période pour les revenus */}\n          {showDateFilter && (\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <Label htmlFor=\"revenue-start-date\">Du :</Label>\n                    <Input\n                      id=\"revenue-start-date\"\n                      type=\"date\"\n                      value={startDate}\n                      onChange={(e) => setStartDate(e.target.value)}\n                      className=\"w-auto\"\n                      data-testid=\"input-revenue-start-date\"\n                    />\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Label htmlFor=\"revenue-end-date\">Au :</Label>\n                    <Input\n                      id=\"revenue-end-date\"\n                      type=\"date\"\n                      value={endDate}\n                      onChange={(e) => setEndDate(e.target.value)}\n                      className=\"w-auto\"\n                      data-testid=\"input-revenue-end-date\"\n                    />\n                  </div>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => {\n                      setStartDate(\"\");\n                      setEndDate(\"\");\n                    }}\n                    data-testid=\"button-clear-revenue-filter\"\n                  >\n                    Effacer\n                  </Button>\n                </div>\n                {startDate && endDate && (\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Affichage des revenus du {new Date(startDate).toLocaleDateString('fr-FR')} au {new Date(endDate).toLocaleDateString('fr-FR')}\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {revenuesLoading ? (\n            <div className=\"text-center py-8\">Chargement des revenus...</div>\n          ) : revenues.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <DollarSign className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n                <p className=\"text-gray-500\">Aucun revenu enregistré</p>\n                <p className=\"text-sm text-gray-400 mt-2\">Cliquez sur \"Nouveau Revenu\" pour commencer</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <>\n              <Card>\n                <CardContent className=\"p-0\">\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-gray-50 dark:bg-gray-800\">\n                        <tr>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Référence\n                          </th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Description\n                          </th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Montant\n                          </th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Catégorie\n                          </th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Date\n                          </th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Paiement\n                          </th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Actions\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700\">\n                        {paginatedRevenues.map((revenue) => (\n                          <tr key={revenue.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100\">\n                              {revenue.reference}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100\">\n                              {revenue.description}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-bold text-green-600 dark:text-green-400\">\n                              {formatPrice(parseFloat(revenue.amount), settings?.currency)}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                              {revenue.category?.name || 'Sans catégorie'}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                              {format(new Date(revenue.revenueDate), 'dd/MM/yyyy', { locale: fr })}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400 capitalize\">\n                              {revenue.paymentMethod.replace('_', ' ')}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                              <div className=\"flex space-x-2\">\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleViewRevenue(revenue)}\n                                  data-testid={`button-view-revenue-${revenue.id}`}\n                                >\n                                  <Eye className=\"w-4 h-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleEditRevenue(revenue)}\n                                  data-testid={`button-edit-revenue-${revenue.id}`}\n                                >\n                                  <Edit className=\"w-4 h-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => printRevenue(revenue)}\n                                  data-testid={`button-print-revenue-${revenue.id}`}\n                                >\n                                  <Printer className=\"w-4 h-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"destructive\"\n                                  size=\"sm\"\n                                  onClick={() => deleteRevenueMutation.mutate(revenue.id)}\n                                  data-testid={`button-delete-revenue-${revenue.id}`}\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Pagination */}\n              {totalPages > 1 && (\n                <div className=\"flex justify-center items-center space-x-2 mt-6\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                    disabled={currentPage === 1}\n                    data-testid=\"button-prev-page\"\n                  >\n                    Précédent\n                  </Button>\n                  {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n                    <Button\n                      key={page}\n                      variant={page === currentPage ? 'default' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(page)}\n                      data-testid={`button-page-${page}`}\n                    >\n                      {page}\n                    </Button>\n                  ))}\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                    disabled={currentPage === totalPages}\n                    data-testid=\"button-next-page\"\n                  >\n                    Suivant\n                  </Button>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      )}\n\n      {/* Onglet Catégories */}\n      {activeTab === 'categories' && (\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold\">Catégories de Revenus</h3>\n            <Dialog open={isCategoryDialogOpen} onOpenChange={setIsCategoryDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-create-category\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Nouvelle Catégorie\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingCategory ? 'Modifier la Catégorie' : 'Nouvelle Catégorie'}\n                  </DialogTitle>\n                </DialogHeader>\n                <Form {...categoryForm}>\n                  <form onSubmit={(e) => {\n                    e.preventDefault();\n                    console.log(\"Revenue category form submitted\");\n                    const values = categoryForm.getValues();\n                    console.log(\"Form values:\", values);\n                    console.log(\"Form errors:\", categoryForm.formState.errors);\n                    if (values.name) {\n                      onCategorySubmit(values);\n                    }\n                  }} className=\"space-y-4\">\n                    <FormField\n                      control={categoryForm.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Nom de la catégorie</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-category-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={categoryForm.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description</FormLabel>\n                          <FormControl>\n                            <Textarea {...field} value={field.value || ''} data-testid=\"textarea-category-description\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <DialogFooter className=\"flex space-x-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          setIsCategoryDialogOpen(false);\n                          categoryForm.reset();\n                          setEditingCategory(null);\n                        }}\n                        data-testid=\"button-cancel-category\"\n                      >\n                        Annuler\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        disabled={categoryMutation.isPending}\n                        data-testid=\"button-save-category\"\n                        onClick={() => console.log(\"Revenue category button clicked directly\")}\n                      >\n                        {categoryMutation.isPending ? 'Sauvegarde...' : (editingCategory ? 'Modifier' : 'Créer')}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {categoriesLoading ? (\n            <div className=\"text-center py-8\">Chargement des catégories...</div>\n          ) : categories.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <Building2 className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n                <p className=\"text-gray-500\">Aucune catégorie créée</p>\n                <p className=\"text-sm text-gray-400 mt-2\">Créez des catégories pour organiser vos revenus</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {categories.map((category) => (\n                <Card key={category.id}>\n                  <CardHeader>\n                    <CardTitle className=\"flex justify-between items-start\">\n                      <span>{category.name}</span>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEditCategory(category)}\n                          data-testid={`button-edit-category-${category.id}`}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteCategoryMutation.mutate(category.id)}\n                          data-testid={`button-delete-category-${category.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </CardTitle>\n                    {category.description && (\n                      <CardDescription>{category.description}</CardDescription>\n                    )}\n                  </CardHeader>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Dialog pour les détails du revenu */}\n      <Dialog open={isDetailsDialogOpen} onOpenChange={setIsDetailsDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Détails du Revenu</DialogTitle>\n          </DialogHeader>\n          {selectedRevenue && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Référence</Label>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">{selectedRevenue.reference}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Montant</Label>\n                  <p className=\"text-sm font-bold text-green-600\">\n                    {formatPrice(parseFloat(selectedRevenue.amount), settings?.currency)}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Date</Label>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {format(new Date(selectedRevenue.revenueDate), 'dd/MM/yyyy', { locale: fr })}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Mode de paiement</Label>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 capitalize\">\n                    {selectedRevenue.paymentMethod.replace('_', ' ')}\n                  </p>\n                </div>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Description</Label>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">{selectedRevenue.description}</p>\n              </div>\n              {selectedRevenue.source && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Source</Label>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">{selectedRevenue.source}</p>\n                </div>\n              )}\n              {selectedRevenue.notes && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Notes</Label>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">{selectedRevenue.notes}</p>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => selectedRevenue && printRevenue(selectedRevenue as Revenue & { category: RevenueCategory })}\n              data-testid=\"button-print-revenue\"\n            >\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Imprimer\n            </Button>\n            <Button onClick={() => setIsDetailsDialogOpen(false)} data-testid=\"button-close-details\">\n              Fermer\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":43680},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className={cn(\"py-6 text-center text-sm\", className)}\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}","size_bytes":4887},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }","size_bytes":1229},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"BUILD.md":{"content":"# Guide de Build YGestion\n\n## Scripts de Build Disponibles\n\n### 🚀 Build Global Complet\n\nCompile frontend, backend ET application Electron :\n\n```bash\nnode build.js\n```\n\n### ⚡ Build Rapide\n\nCompile uniquement frontend + backend (sans Electron) :\n\n```bash\nnode quick-build.js\n```\n\n### 🐧 Alternative Shell (Linux/macOS)\n```bash\n./build.sh\n```\n\n### 🎯 Builds Individuels\n\nSi vous souhaitez compiler seulement une partie :\n\n#### Frontend uniquement\n```bash\nnpx vite build\n```\n\n#### Backend uniquement  \n```bash\nnpx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\n```\n\n#### Electron uniquement\n```bash\ncd desktop && npm run build\n```\n\n## Structure de Sortie\n\nAprès compilation, le dossier `dist/` contiendra :\n\n```\ndist/\n├── public/              # Frontend React compilé\n│   ├── index.html      # Page principale\n│   ├── assets/         # CSS, JS, images\n│   └── ...\n├── index.js            # Backend Express compilé\n├── electron/           # Application Electron\n│   ├── main.js        # Processus principal Electron\n│   ├── splash.html    # Écran de démarrage\n│   └── ...\n└── version.json        # Informations de build\n```\n\n## Démarrage en Production\n\n### Application Web\n```bash\nnpm start\n```\n*Démarre le serveur Express en production*\n\n### Application Desktop\n```bash\ncd desktop && npm start\n```\n*Lance l'application Electron*\n\n## Développement\n\nPour le développement, utilisez :\n```bash\nnpm run dev\n```\n\n## Prérequis\n\n- Node.js 18+ \n- npm ou yarn\n- Dépendances installées (`npm install`)\n\n## Dépannage\n\n### Erreur de permissions (Linux/macOS)\n```bash\nchmod +x build.sh\n```\n\n### Dossier dist non vide\nLes scripts nettoient automatiquement le dossier avant compilation.\n\n### Erreur Electron\nVérifiez que toutes les dépendances sont installées dans le dossier `desktop/` :\n```bash\ncd desktop && npm install\n```","size_bytes":1952},"GUIDE-BUILD-ELECTRON.md":{"content":"# 🚀 Guide pour Créer un Fichier .exe avec Electron\n\nCe guide vous explique comment créer facilement un fichier exécutable Windows (.exe) de votre application YGestion.\n\n## ⚡ Méthode Rapide\n\n### Option 1: Script Automatique (Recommandé)\n\n**Sur Windows:**\n```bash\n# Double-cliquez sur ce fichier ou exécutez dans le terminal:\nbuild-electron.bat\n```\n\n**Sur Linux/Mac:**\n```bash\n# Rendez le script exécutable et lancez-le:\nchmod +x build-electron.sh\n./build-electron.sh\n```\n\n### Option 2: Commandes Manuelles\n\n1. **Construire l'application web:**\n   ```bash\n   npm run build\n   ```\n\n2. **Aller dans le dossier desktop et installer les dépendances:**\n   ```bash\n   cd desktop\n   npm install\n   ```\n\n3. **Construire l'application Electron:**\n   ```bash\n   npm run build\n   ```\n\n4. **Créer l'exécutable Windows:**\n   ```bash\n   # Installeur NSIS + Version portable\n   npm run dist:windows\n   \n   # Ou juste la version portable:\n   npm run dist:portable\n   ```\n\n## 📁 Où Trouver les Fichiers\n\nAprès la construction, vos fichiers seront dans:\n```\ndist/setup/\n├── YGestion-1.0.0-portable.exe  (Version portable)\n├── YGestion Setup 1.0.0.exe     (Installateur)\n└── latest.yml                    (Métadonnées)\n```\n\n## 🎯 Types de Fichiers Créés\n\n- **Version Portable (.exe)**: Peut être exécutée directement sans installation\n- **Installateur (.exe)**: Installe l'application dans le système Windows\n\n## 🔧 Configuration Avancée\n\n### Personnaliser l'Application\n\nVous pouvez modifier les paramètres dans `desktop/package.json`:\n\n- **Nom de l'application**: Changez `productName`\n- **Version**: Changez `version`\n- **Description**: Changez `description`\n- **Icônes**: Ajoutez vos icônes dans `desktop/assets/`\n\n### Ajouter des Icônes (Optionnel)\n\nPour une apparence professionnelle, ajoutez des icônes:\n\n1. Créez vos icônes:\n   - `desktop/assets/icon.ico` (pour Windows)\n   - `desktop/assets/icon.png` (512x512px, pour Linux)\n\n2. Décommentez les lignes d'icônes dans `desktop/package.json`:\n   ```json\n   \"win\": {\n     \"icon\": \"./assets/icon.ico\"\n   }\n   ```\n\n## 🐛 Dépannage\n\n### Erreur: \"electron-builder not found\"\n```bash\ncd desktop\nnpm install electron-builder --save-dev\n```\n\n### Erreur: \"Cannot find module\"\n1. Supprimez `node_modules` et `package-lock.json`\n2. Relancez `npm install`\n\n### L'app ne démarre pas\n1. Vérifiez que l'application web fonctionne avec `npm run dev`\n2. Testez l'app Electron avec `cd desktop && npm run dev`\n\n## 📋 Checklist Avant Distribution\n\n- [ ] L'application web se lance correctement (`npm run dev`)\n- [ ] L'application Electron démarre en développement (`cd desktop && npm run dev`)\n- [ ] Les icônes sont ajoutées (optionnel mais recommandé)\n- [ ] La version est mise à jour dans `desktop/package.json`\n- [ ] Le build s'exécute sans erreur\n\n## 💡 Conseils\n\n1. **Testez toujours** l'exécutable avant de le distribuer\n2. **Version portable** est plus facile à distribuer (pas d'installation requise)\n3. **Installez** electron-builder globalement pour plus de facilité:\n   ```bash\n   npm install -g electron-builder\n   ```\n\n## 🚀 Distribution\n\nUne fois votre `.exe` créé:\n- **Version portable**: Peut être copiée directement sur d'autres machines\n- **Installateur**: Peut être distribuée comme un logiciel normal Windows\n\n---\n\n**Bonne construction ! 🎉**","size_bytes":3366},"build-electron.sh":{"content":"#!/bin/bash\n\necho \"🚀 Construction de l'application Electron pour Windows...\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}📦 $1${NC}\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}✅ $1${NC}\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}⚠️  $1${NC}\"\n}\n\nprint_error() {\n    echo -e \"${RED}❌ $1${NC}\"\n}\n\n# Step 1: Clean previous builds\nprint_status \"Nettoyage des builds précédents...\"\nrm -rf dist/\nrm -rf desktop/dist/\nrm -rf desktop/build/\nmkdir -p dist/\n\n# Step 2: Build the web application and server\nprint_status \"Construction de l'application web et serveur...\"\nif ! npm run build; then\n    print_error \"Échec de la construction de l'application web et serveur\"\n    exit 1\nfi\nprint_success \"Application web et serveur construits avec succès\"\n\n# Step 3: Install desktop dependencies if needed\nprint_status \"Vérification des dépendances Electron...\"\ncd desktop\nif [ ! -d \"node_modules\" ]; then\n    print_status \"Installation des dépendances Electron...\"\n    if ! npm install; then\n        print_error \"Échec de l'installation des dépendances Electron\"\n        exit 1\n    fi\nfi\n\n# Step 4: Build the Electron app\nprint_status \"Construction de l'application Electron...\"\nif ! npm run build; then\n    print_error \"Échec de la construction de l'application Electron\"\n    exit 1\nfi\nprint_success \"Application Electron construite avec succès\"\n\n# Step 5: Create the Windows executable\nprint_status \"Création de l'exécutable Windows (.exe)...\"\nif ! npm run dist:windows; then\n    print_error \"Échec de la création de l'exécutable Windows\"\n    exit 1\nfi\n\ncd ..\nprint_success \"🎉 Exécutable Windows créé avec succès!\"\nprint_success \"📁 Fichiers disponibles dans: desktop/build/\"\n\n# List created files\nif [ -d \"desktop/build\" ]; then\n    print_status \"Fichiers créés:\"\n    ls -la desktop/build/ | grep -E '\\.(exe|AppImage|dmg)$' || echo \"Aucun fichier exécutable trouvé\"\nfi\n\necho \"\"\nprint_success \"✨ Build terminé! Vous pouvez maintenant distribuer votre application.\"","size_bytes":2142},"build.js":{"content":"#!/usr/bin/env node\n\n// Script de build global pour YGestion en Node.js\n// Compatible avec tous les systèmes d'exploitation\n\nimport { execSync } from 'child_process';\nimport { rmSync, mkdirSync, copyFileSync, writeFileSync, existsSync } from 'fs';\nimport path from 'path';\n\nconsole.log('🚀 Début du build global YGestion...\\n');\n\n// Fonction utilitaire pour exécuter des commandes\nfunction runCommand(command, description) {\n  try {\n    console.log(`🔧 ${description}...`);\n    execSync(command, { stdio: 'inherit' });\n    console.log(`✅ ${description} terminé avec succès\\n`);\n    return true;\n  } catch (error) {\n    console.error(`❌ Erreur lors de ${description.toLowerCase()}`);\n    console.error(error.message);\n    return false;\n  }\n}\n\ntry {\n  // 1. Nettoyer le dossier dist\n  console.log('🧹 Nettoyage du dossier dist...');\n  if (existsSync('dist')) {\n    rmSync('dist', { recursive: true, force: true });\n  }\n  mkdirSync('dist', { recursive: true });\n  console.log('✅ Dossier dist nettoyé\\n');\n\n  // 2. Build du frontend (React + Vite)\n  if (!runCommand('npx vite build', 'Build du frontend')) {\n    process.exit(1);\n  }\n\n  // 3. Build du backend (Express + TypeScript)\n  const backendCommand = 'npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist';\n  if (!runCommand(backendCommand, 'Build du backend')) {\n    process.exit(1);\n  }\n\n  // 4. Build du processus Electron\n  process.chdir('desktop');\n  if (!runCommand('npm run build', 'Build du processus Electron')) {\n    process.exit(1);\n  }\n  process.chdir('..');\n\n  // 5. Copier les assets nécessaires\n  console.log('📁 Copie des assets...');\n  \n  // Créer le répertoire electron s'il n'existe pas\n  const electronDir = path.join('dist', 'electron');\n  if (!existsSync(electronDir)) {\n    mkdirSync(electronDir, { recursive: true });\n  }\n  \n  // Copier le splash.html vers dist/electron pour Electron\n  const splashSource = path.join('desktop', 'splash.html');\n  const splashDest = path.join('dist', 'electron', 'splash.html');\n  \n  if (existsSync(splashSource)) {\n    copyFileSync(splashSource, splashDest);\n    console.log('✅ splash.html copié');\n  } else {\n    console.log('⚠️  splash.html non trouvé, ignoré');\n  }\n\n  // Créer un fichier .env pour l'application Electron avec les variables de production\n  const envDest = path.join('dist', '.env');\n  const envContent = `# Variables d'environnement pour YGestion Desktop\nDATABASE_URL=postgresql://postgres.pciuxfjqtxbrpjyhbcxe:YOUSS05462629@aws-1-eu-west-3.pooler.supabase.com:5432/postgres\nSESSION_SECRET=ygestion_session_key_2025_ultra_secure_random_string_for_production\nADMIN_TOKEN=ygestion_admin_token_secure_2025_production\nNODE_ENV=production\nPORT=5001`;\n  \n  writeFileSync(envDest, envContent);\n  console.log('✅ .env créé pour l\\'application Electron');\n\n  // Créer un fichier de version\n  const buildInfo = {\n    version: '1.0.0',\n    buildDate: new Date().toISOString(),\n    components: {\n      frontend: 'React + Vite',\n      backend: 'Express + TypeScript',\n      desktop: 'Electron'\n    }\n  };\n  \n  writeFileSync(\n    path.join('dist', 'version.json'), \n    JSON.stringify(buildInfo, null, 2)\n  );\n  console.log('✅ Fichier de version créé\\n');\n\n  // Résumé final\n  console.log('🎉 Build global terminé avec succès !\\n');\n  console.log('📦 Structure de sortie :');\n  console.log('  dist/');\n  console.log('  ├── public/          # Frontend compilé (React)');\n  console.log('  ├── index.js         # Backend compilé (Express)');\n  console.log('  ├── electron/        # Processus Electron compilé');\n  console.log('  └── version.json     # Informations de build\\n');\n  console.log('🚀 Pour démarrer :');\n  console.log('  • Production web: npm start');\n  console.log('  • Application Electron: cd desktop && npm start\\n');\n\n} catch (error) {\n  console.error('❌ Erreur fatale lors du build:', error.message);\n  process.exit(1);\n}","size_bytes":3984},"build.sh":{"content":"#!/bin/bash\n\n# Script de build global pour YGestion\n# Compile le frontend, backend et application Electron\n\necho \"🚀 Début du build global YGestion...\"\n\n# Nettoyer le dossier dist\necho \"🧹 Nettoyage du dossier dist...\"\nrm -rf dist\nmkdir -p dist\n\n# 1. Build du frontend (React + Vite)\necho \"🎨 Build du frontend...\"\nnpm run build:frontend() {\n  vite build\n}\n\n# Vérifier si vite build existe dans package.json, sinon utiliser vite directement\nif npm run | grep -q \"build\"; then\n  # Utiliser le script existant\n  vite build\nelse\n  vite build\nfi\n\nif [ $? -eq 0 ]; then\n  echo \"✅ Frontend compilé avec succès\"\nelse\n  echo \"❌ Erreur lors de la compilation du frontend\"\n  exit 1\nfi\n\n# 2. Build du backend (Express + TypeScript)\necho \"🔧 Build du backend...\"\nesbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\n\nif [ $? -eq 0 ]; then\n  echo \"✅ Backend compilé avec succès\"\nelse\n  echo \"❌ Erreur lors de la compilation du backend\"\n  exit 1\nfi\n\n# 3. Build du processus Electron\necho \"⚡ Build du processus Electron...\"\ncd desktop\nnpm run build\n\nif [ $? -eq 0 ]; then\n  echo \"✅ Processus Electron compilé avec succès\"\n  cd ..\nelse\n  echo \"❌ Erreur lors de la compilation du processus Electron\"\n  cd ..\n  exit 1\nfi\n\n# 4. Copier les assets nécessaires\necho \"📁 Copie des assets...\"\n\n# Copier le splash.html vers dist/electron pour Electron\ncp desktop/splash.html dist/electron/ 2>/dev/null || echo \"⚠️  splash.html non trouvé, ignoré\"\n\n# Créer un fichier de version\necho \"{\\\"version\\\": \\\"1.0.0\\\", \\\"buildDate\\\": \\\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\\\"}\" > dist/version.json\n\necho \"\"\necho \"🎉 Build global terminé avec succès !\"\necho \"\"\necho \"📦 Structure de sortie :\"\necho \"  dist/\"\necho \"  ├── public/          # Frontend compilé (React)\"\necho \"  ├── index.js         # Backend compilé (Express)\"\necho \"  ├── electron/        # Processus Electron compilé\"\necho \"  └── version.json     # Informations de build\"\necho \"\"\necho \"🚀 Pour démarrer :\"\necho \"  • Production web: npm start\"\necho \"  • Application Electron: npm run start:electron\"\necho \"\"","size_bytes":2150},"package-build-info.md":{"content":"# Scripts de Build YGestion\n\n## ✅ Configuration Terminée\n\nVotre projet YGestion dispose maintenant d'un système de build complet :\n\n### 📦 Scripts Disponibles\n\n| Script | Commande | Description |\n|--------|----------|-------------|\n| **Build Global** | `node build.js` | Compile tout : frontend + backend + Electron |\n| **Build Rapide** | `node quick-build.js` | Compile seulement web (frontend + backend) |\n| **Build Shell** | `./build.sh` | Alternative Linux/macOS du build global |\n\n### 🎯 Structure de Sortie\n\n```\ndist/\n├── public/              # Frontend React compilé\n│   ├── index.html      # Page principale\n│   ├── assets/         # CSS, JS minifiés\n│   └── ...\n├── index.js            # Backend Express compilé (145kb)\n├── electron/           # Application Electron\n│   ├── main.js        # Processus principal\n│   ├── splash.html    # Écran de démarrage\n│   └── ...\n└── version.json        # Informations de build\n```\n\n### 🚀 Déploiement\n\n- **Web Production** : `npm start` (démarre dist/index.js)\n- **Application Desktop** : `cd desktop && npm start`\n- **Développement** : `npm run dev` (mode live reload)\n\n### ⚙️ Détails Techniques\n\n- **Frontend** : Vite + React → `/dist/public/`\n- **Backend** : esbuild + TypeScript → `/dist/index.js`\n- **Desktop** : TypeScript → `/dist/electron/main.js`\n- **Assets** : Copiés automatiquement\n- **Version** : Générée avec horodatage\n\n### 🔧 Personnalisation\n\nLes scripts peuvent être modifiés dans :\n- `build.js` - Build global Node.js\n- `quick-build.js` - Build rapide\n- `build.sh` - Version shell\n- `BUILD.md` - Documentation complète\n\nVotre système de build est maintenant prêt pour la production ! 🎉","size_bytes":1767},"quick-build.js":{"content":"#!/usr/bin/env node\n\n// Script de build rapide pour YGestion\n// Build uniquement frontend + backend (sans Electron)\n\nimport { execSync } from 'child_process';\nimport { rmSync, mkdirSync, existsSync } from 'fs';\n\nconsole.log('⚡ Build rapide YGestion (frontend + backend)...\\n');\n\nfunction runCommand(command, description) {\n  try {\n    console.log(`🔧 ${description}...`);\n    execSync(command, { stdio: 'inherit' });\n    console.log(`✅ ${description} terminé\\n`);\n    return true;\n  } catch (error) {\n    console.error(`❌ Erreur: ${description.toLowerCase()}`);\n    return false;\n  }\n}\n\ntry {\n  // Nettoyer uniquement les dossiers web\n  console.log('🧹 Nettoyage...');\n  if (existsSync('dist/public')) {\n    rmSync('dist/public', { recursive: true, force: true });\n  }\n  if (existsSync('dist/index.js')) {\n    rmSync('dist/index.js', { force: true });\n  }\n  console.log('✅ Nettoyage terminé\\n');\n\n  // Build frontend et backend\n  if (!runCommand('npx vite build', 'Build frontend')) process.exit(1);\n  if (!runCommand('npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist', 'Build backend')) process.exit(1);\n\n  console.log('🎉 Build rapide terminé !\\n');\n  console.log('🚀 Démarrer: npm start');\n\n} catch (error) {\n  console.error('❌ Erreur fatale:', error.message);\n  process.exit(1);\n}","size_bytes":1357},"desktop/main.ts":{"content":"import { app, BrowserWindow } from 'electron';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { createRequire } from 'module';\nimport { spawn, ChildProcess } from 'child_process';\nimport dotenv from 'dotenv';\n\nconst require = createRequire(import.meta.url);\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Load environment variables from .env file\nconst envPath = app.isPackaged\n  ? path.join(process.resourcesPath, '.env')\n  : path.join(__dirname, '..', '.env');\n\nconsole.log('🔧 Loading environment from:', envPath);\ndotenv.config({ path: envPath });\n\n// Keep a global reference of the window object\nlet mainWindow: BrowserWindow | null = null;\nlet server: any = null;\nlet backendProcess: ChildProcess | null = null;\nconst isDev = process.env.NODE_ENV === 'development' || process.argv.includes('--dev');\nconst PORT = isDev ? 5000 : 5001;\n\n// Start Express server for production\nconst startServer = async () => {\n  if (isDev) return; // In development, use external server\n\n  try {\n    // Check if backend server exists\n    const serverPath = app.isPackaged\n      ? path.join(process.resourcesPath, 'backend', 'index.js')\n      : path.join(__dirname, '..', '..', 'dist', 'index.js');\n\n    console.log('🔍 Looking for backend server at:', serverPath);\n\n    if (require('fs').existsSync(serverPath)) {\n      // Start the full backend server as a separate process\n      console.log('🚀 Starting full backend server...');\n\n      const serverEnv = {\n        ...process.env,\n        NODE_ENV: 'production',\n        PORT: PORT.toString(),\n        DATABASE_URL: process.env.DATABASE_URL,\n        SESSION_SECRET: process.env.SESSION_SECRET,\n        ADMIN_TOKEN: process.env.ADMIN_TOKEN\n      };\n\n      console.log('🌍 Server environment configured with DATABASE_URL:',\n        process.env.DATABASE_URL ? 'Found' : 'Missing');\n\n      backendProcess = spawn('node', [serverPath], {\n        env: serverEnv,\n        stdio: ['inherit', 'pipe', 'pipe']\n      });\n\n      backendProcess.stdout?.on('data', (data) => {\n        console.log('📡 Backend:', data.toString().trim());\n      });\n\n      backendProcess.stderr?.on('data', (data) => {\n        console.error('🚨 Backend Error:', data.toString().trim());\n      });\n\n      backendProcess.on('error', (error) => {\n        console.error('❌ Failed to start backend process:', error);\n        startFallbackServer();\n      });\n\n      backendProcess.on('exit', (code) => {\n        console.log(`Backend process exited with code ${code}`);\n        if (code !== 0) {\n          startFallbackServer();\n        }\n      });\n\n      console.log('✅ Backend server process started on port', PORT);\n\n      // Wait a moment for the server to start up\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n    } else {\n      console.log('⚠️ Backend server not found');\n      startFallbackServer();\n      return; // Don't try to load the app if no backend\n    }\n  } catch (error) {\n    console.error('❌ Error starting server:', error);\n    startFallbackServer();\n  }\n};\n\nconst startFallbackServer = () => {\n  console.log('🔄 Starting fallback mode...');\n  console.log('⚠️ Backend server could not be started. The app will work in limited mode.');\n\n  // Show an error dialog to the user\n  if (mainWindow) {\n    const errorHtml = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>YGestion - Erreur</title>\n        <style>\n          body { \n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            display: flex; align-items: center; justify-content: center; \n            height: 100vh; margin: 0; background: #f5f5f5; color: #333;\n          }\n          .container { \n            text-align: center; padding: 2rem; background: white; \n            border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n            max-width: 500px;\n          }\n          .error-icon { font-size: 4rem; color: #e74c3c; margin-bottom: 1rem; }\n          h1 { color: #e74c3c; margin-bottom: 1rem; }\n          p { margin-bottom: 0.5rem; line-height: 1.6; }\n          .details { background: #f8f9fa; padding: 1rem; border-radius: 4px; margin-top: 1rem; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"error-icon\">⚠️</div>\n          <h1>Erreur de démarrage</h1>\n          <p>Le serveur backend n'a pas pu démarrer.</p>\n          <p>Vérifiez que le fichier .env est présent et contient les bonnes configurations.</p>\n          <div class=\"details\">\n            <strong>Variables requises :</strong><br>\n            • DATABASE_URL<br>\n            • SESSION_SECRET<br>\n            • ADMIN_TOKEN\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n    mainWindow.loadURL(`data:text/html;charset=utf-8,${encodeURIComponent(errorHtml)}`);\n  }\n};\n\nconst createWindow = async (): Promise<void> => {\n  let serverReady = false;\n\n  // Start server first in production\n  if (!isDev) {\n    console.log('🚀 Production mode: starting embedded server...');\n    await startServer();\n    // Wait a moment for server to be ready\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    serverReady = true;\n  } else {\n    console.log('🔧 Development mode: checking for existing server...');\n    // In development, test if server is available, if not start it automatically\n    try {\n      const response = await fetch('http://localhost:5000/api/user');\n      serverReady = true;\n      console.log('✅ Development server is already running and responding');\n    } catch (error) {\n      console.log('⚠️ Development server not responding, starting automatically...');\n\n      // Start the development server automatically\n      const serverPath = path.join(__dirname, '..', '..', 'dist', 'index.js');\n      console.log('🔍 Looking for development server at:', serverPath);\n\n      if (require('fs').existsSync(serverPath)) {\n        console.log('🚀 Starting development server automatically...');\n\n        const serverEnv = {\n          ...process.env,\n          NODE_ENV: 'development',\n          PORT: '5000',\n          DATABASE_URL: process.env.DATABASE_URL,\n          SESSION_SECRET: process.env.SESSION_SECRET,\n          ADMIN_TOKEN: process.env.ADMIN_TOKEN\n        };\n\n        console.log('🌍 Development server environment configured with DATABASE_URL:',\n          process.env.DATABASE_URL ? 'Found' : 'Missing');\n\n        backendProcess = spawn('node', [serverPath], {\n          env: serverEnv,\n          stdio: ['inherit', 'pipe', 'pipe'],\n          cwd: path.join(__dirname, '..', '..')\n        });\n\n        backendProcess.stdout?.on('data', (data) => {\n          console.log('📡 Dev Backend:', data.toString().trim());\n        });\n\n        backendProcess.stderr?.on('data', (data) => {\n          console.error('🚨 Dev Backend Error:', data.toString().trim());\n        });\n\n        backendProcess.on('error', (error) => {\n          console.error('❌ Failed to start development backend process:', error);\n          serverReady = false;\n        });\n\n        console.log('✅ Development backend server process started on port 5000');\n\n        // Wait for the server to start up\n        await new Promise(resolve => setTimeout(resolve, 3000));\n        serverReady = true;\n\n      } else {\n        console.log('⚠️ Development backend server not found at:', serverPath);\n        console.log('💡 Please run \"npm run build\" in the main directory first');\n        serverReady = false;\n      }\n    }\n  }\n\n  // Create the browser window\n  mainWindow = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    minWidth: 800,\n    minHeight: 600,\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      webSecurity: false, // Allow local connections\n    },\n    show: false,\n    titleBarStyle: 'default',\n    title: 'YGestion - Gestion Commerciale et Comptable'\n  });\n\n  // Load the app\n  const appUrl = `http://localhost:${PORT}`;\n  console.log(`📱 Loading application from: ${appUrl}`);\n\n  try {\n    await mainWindow.loadURL(appUrl);\n    console.log('✅ Application loaded successfully');\n  } catch (error) {\n    console.error('❌ Failed to load application:', error);\n\n    if (isDev) {\n      // In development mode, show a helpful error page\n      const errorHtml = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <title>YGestion - Server Error</title>\n          <style>\n            body { \n              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n              display: flex; align-items: center; justify-content: center; \n              height: 100vh; margin: 0; background: #f5f5f5; color: #333;\n            }\n            .container { \n              text-align: center; padding: 2rem; background: white; \n              border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n              max-width: 500px;\n            }\n            .error-icon { font-size: 4rem; margin-bottom: 1rem; }\n            h1 { color: #e74c3c; margin-bottom: 1rem; }\n            .instructions { \n              background: #f8f9fa; padding: 1rem; border-radius: 4px; \n              margin: 1rem 0; text-align: left; font-family: monospace;\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"container\">\n            <div class=\"error-icon\">⚠️</div>\n            <h1>Server Not Running</h1>\n            <p>The development server is not running on port 5000.</p>\n            <p><strong>To fix this:</strong></p>\n            <div class=\"instructions\">\n              1. Open a terminal in the main project directory<br>\n              2. Run: <strong>npm run dev</strong><br>\n              3. Wait for the server to start<br>\n              4. Restart this Electron app\n            </div>\n            <p>Once the server is running, refresh this window or restart the app.</p>\n          </div>\n        </body>\n        </html>\n      `;\n\n      await mainWindow.loadURL(`data:text/html;charset=utf-8,${encodeURIComponent(errorHtml)}`);\n    }\n  }\n\n  if (isDev) {\n    mainWindow.webContents.openDevTools();\n  }\n\n  // Show window when ready to prevent visual flash\n  mainWindow.once('ready-to-show', () => {\n    mainWindow?.show();\n  });\n\n  // Handle window closed\n  mainWindow.on('closed', () => {\n    mainWindow = null;\n  });\n\n  // Security: prevent new window creation\n  mainWindow.webContents.setWindowOpenHandler(() => {\n    return { action: 'deny' };\n  });\n};\n\n// This method will be called when Electron has finished initialization\napp.whenReady().then(() => {\n  createWindow();\n\n  // On OS X, re-create a window when the dock icon is clicked\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow();\n    }\n  });\n});\n\n// Quit when all windows are closed\napp.on('window-all-closed', () => {\n  // Close server if running\n  if (server) {\n    server.close();\n  }\n\n  // Kill backend process if running\n  if (backendProcess) {\n    backendProcess.kill();\n  }\n\n  // On OS X, keep the app running even when all windows are closed\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\n// Before quit, clean up\napp.on('before-quit', () => {\n  if (server) {\n    server.close();\n  }\n\n  if (backendProcess) {\n    backendProcess.kill();\n  }\n});","size_bytes":11346},"desktop/assets/README.md":{"content":"# Assets pour YGestion Desktop\n\n## Icônes Requises\n\nPour une génération .exe optimale, placez les fichiers suivants dans ce dossier :\n\n### Windows\n- `icon.ico` - Icône principale (256x256 pixels recommandés)\n- `installer.ico` - Icône pour l'installeur (optionnel)\n\n### macOS\n- `icon.icns` - Icône macOS (512x512 pixels)\n\n### Linux\n- `icon.png` - Icône Linux (512x512 pixels)\n\n## Génération des Icônes\n\n### À partir d'une image PNG :\n```bash\n# Installer imagemagick\n# Windows: choco install imagemagick\n# macOS: brew install imagemagick\n# Ubuntu: sudo apt install imagemagick\n\n# Générer .ico\nconvert icon-source.png -resize 256x256 icon.ico\n\n# Générer .icns (macOS uniquement)\niconutil -c icns icon.iconset/\n```\n\n### Outils en ligne recommandés :\n- https://convertio.co/png-ico/\n- https://cloudconvert.com/png-to-ico\n- https://favicon.io/favicon-converter/\n\n## Structure Recommandée\n```\nassets/\n├── icon.ico          # Windows (256x256)\n├── icon.icns         # macOS (512x512)\n├── icon.png          # Linux (512x512)\n├── installer.ico     # Windows installer (optionnel)\n└── README.md         # Ce fichier\n```\n\n## Notes\n- Les icônes améliorent l'apparence professionnelle de l'application\n- Utilisez des formats optimisés pour chaque plateforme\n- Testez l'apparence sur différentes résolutions d'écran","size_bytes":1354},"shared/schemas/accounting.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  serial,\n  decimal,\n  integer,\n  boolean,\n  jsonb,\n} from \"drizzle-orm/pg-core\";\nimport { users } from \"./auth\";\nimport { chartOfAccounts } from \"./chart-of-accounts\";\n\nexport const expenseCategories = pgTable(\"expense_categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  isMajor: boolean(\"is_major\").default(false), // true for major expenses, false for minor\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const imprestFunds = pgTable(\"imprest_funds\", {\n  id: serial(\"id\").primaryKey(),\n  reference: varchar(\"reference\", { length: 100 }).notNull().unique(),\n  accountHolder: varchar(\"account_holder\", { length: 255 }).notNull(), // Détenteur du compte\n  initialAmount: decimal(\"initial_amount\", { precision: 15, scale: 2 }).notNull(),\n  currentBalance: decimal(\"current_balance\", { precision: 15, scale: 2 }).notNull(),\n  purpose: text(\"purpose\").notNull(), // Objectif du fonds\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"active\"), // active, suspended, closed\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const expenses = pgTable(\"expenses\", {\n  id: serial(\"id\").primaryKey(),\n  reference: varchar(\"reference\", { length: 100 }).notNull(), // Référence unique\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  categoryId: integer(\"category_id\").notNull().references(() => expenseCategories.id),\n  accountId: integer(\"account_id\").references(() => chartOfAccounts.id), // Lien vers le plan comptable\n  expenseDate: timestamp(\"expense_date\").notNull(),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }).notNull(), // cash, bank_transfer, check, card\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"pending\"), // pending, approved, paid, rejected\n  receiptUrl: varchar(\"receipt_url\", { length: 500 }), // URL du reçu/justificatif\n  notes: text(\"notes\"),\n  imprestId: integer(\"imprest_id\").references(() => imprestFunds.id), // Lien vers le fonds d'avance\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const imprestTransactions = pgTable(\"imprest_transactions\", {\n  id: serial(\"id\").primaryKey(),\n  reference: varchar(\"reference\", { length: 100 }).notNull(),\n  imprestId: integer(\"imprest_id\").notNull().references(() => imprestFunds.id),\n  type: varchar(\"type\", { length: 50 }).notNull(), // deposit, withdrawal, expense\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  description: text(\"description\").notNull(),\n  balanceAfter: decimal(\"balance_after\", { precision: 15, scale: 2 }).notNull(),\n  expenseId: integer(\"expense_id\").references(() => expenses.id), // Lié à une dépense si applicable\n  receiptUrl: varchar(\"receipt_url\", { length: 500 }),\n  notes: text(\"notes\"),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const accountingReports = pgTable(\"accounting_reports\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(), // expense_summary, imprest_summary, monthly_report, yearly_report\n  periodStart: timestamp(\"period_start\").notNull(),\n  periodEnd: timestamp(\"period_end\").notNull(),\n  data: jsonb(\"data\").notNull(), // Données du rapport en JSON\n  generatedBy: varchar(\"generated_by\").notNull().references(() => users.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});","size_bytes":4011},"shared/schemas/alerts.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  serial,\n  integer,\n  boolean,\n  jsonb,\n} from \"drizzle-orm/pg-core\";\nimport { users } from \"./auth\";\n\n// Business Alerts table\nexport const businessAlerts = pgTable(\"business_alerts\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: varchar(\"type\", { length: 50 }).notNull(), // 'low_stock', 'overdue_invoice', 'critical_stock', 'payment_due'\n  severity: varchar(\"severity\", { length: 20 }).default(\"medium\"), // 'low', 'medium', 'high', 'critical'\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  message: text(\"message\").notNull(),\n  entityType: varchar(\"entity_type\", { length: 50 }), // 'product', 'invoice', 'client'\n  entityId: integer(\"entity_id\"), // ID de l'entité concernée\n  metadata: jsonb(\"metadata\"), // Données additionnelles (stock level, due date, etc.)\n  isRead: boolean(\"is_read\").default(false),\n  isResolved: boolean(\"is_resolved\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});","size_bytes":1099},"shared/schemas/auth.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  index,\n  boolean,\n  integer,\n} from \"drizzle-orm/pg-core\";\n\n// Session storage table - required for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - for local authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\"), // For local auth\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n\n  phone: varchar(\"phone\", { length: 50 }),\n  company: varchar(\"company\", { length: 255 }),\n  position: varchar(\"position\", { length: 255 }),\n  address: text(\"address\"),\n  businessType: varchar(\"business_type\", { length: 255 }),\n  currency: varchar(\"currency\", { length: 10 }).default(\"XOF\"), // XOF ou GHS\n  language: varchar(\"language\", { length: 10 }).default(\"fr\"), // fr ou en\n  licenseActivated: boolean(\"license_activated\").default(false), // Licence activée pour cet utilisateur\n  \n  // Champs pour la sécurité et la réinitialisation de mot de passe\n  loginAttempts: integer(\"login_attempts\").notNull().default(0), // Nombre de tentatives de connexion échouées\n  lockUntil: timestamp(\"lock_until\"), // Date jusqu'à laquelle le compte est verrouillé\n  resetPasswordTokenHash: varchar(\"reset_password_token_hash\", { length: 64 }).unique(), // Hash du token de réinitialisation (sécurisé)\n  resetPasswordExpires: timestamp(\"reset_password_expires\"), // Expiration du token de réinitialisation\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});","size_bytes":1879},"shared/schemas/chart-of-accounts.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  serial,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { users } from \"./auth\";\n\n// Chart of Accounts - Plan comptable général  \nexport const chartOfAccounts = pgTable(\"chart_of_accounts\", {\n  id: serial(\"id\").primaryKey(),\n  code: varchar(\"code\", { length: 20 }).notNull(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  accountType: varchar(\"account_type\", { length: 50 }).notNull(), // asset, liability, equity, revenue, expense\n  parentCode: varchar(\"parent_code\", { length: 20 }),\n  isActive: boolean(\"is_active\").default(true),\n  description: text(\"description\"),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});","size_bytes":806},"shared/schemas/constants.ts":{"content":"// Tax rates available for invoices\nexport const TAX_RATES = [\n  { value: \"0.00\", label: \"Aucune (0%)\" },\n  { value: \"3.00\", label: \"3%\" },\n  { value: \"5.00\", label: \"5%\" },\n  { value: \"10.00\", label: \"10%\" },\n  { value: \"15.00\", label: \"15%\" },\n  { value: \"18.00\", label: \"18%\" },\n  { value: \"21.00\", label: \"21%\" },\n] as const;\n\n// Invoice status options\nexport const INVOICE_STATUS = [\n  { value: \"en_attente\", label: \"En attente\", icon: \"⏳\", color: \"bg-yellow-100 text-yellow-800\" },\n  { value: \"payee\", label: \"Payée\", icon: \"✅\", color: \"bg-green-100 text-green-800\" },\n  { value: \"partiellement_reglee\", label: \"Partiellement réglée\", icon: \"💳\", color: \"bg-blue-100 text-blue-800\" },\n] as const;\n\n// Accounting constants\nexport const EXPENSE_STATUS = [\n  { value: \"pending\", label: \"En attente\", icon: \"⏳\", color: \"bg-yellow-100 text-yellow-800\" },\n  { value: \"approved\", label: \"Approuvée\", icon: \"✅\", color: \"bg-blue-100 text-blue-800\" },\n  { value: \"paid\", label: \"Payée\", icon: \"💰\", color: \"bg-green-100 text-green-800\" },\n  { value: \"rejected\", label: \"Rejetée\", icon: \"❌\", color: \"bg-red-100 text-red-800\" },\n] as const;\n\n// Payment methods\nexport const PAYMENT_METHODS = [\n  { value: \"cash\", label: \"Espèces\", icon: \"💵\" },\n  { value: \"bank_transfer\", label: \"Virement bancaire\", icon: \"🏦\" },\n  { value: \"check\", label: \"Chèque\", icon: \"🧾\" },\n  { value: \"card\", label: \"Carte\", icon: \"💳\" },\n  { value: \"mobile_money\", label: \"Mobile Money\", icon: \"📱\" },\n] as const;\n\n// Account types for chart of accounts\nexport const ACCOUNT_TYPES = [\n  { value: \"asset\", label: \"Actif\" },\n  { value: \"liability\", label: \"Passif\" },\n  { value: \"equity\", label: \"Capitaux propres\" },\n  { value: \"revenue\", label: \"Revenus\" },\n  { value: \"expense\", label: \"Charges\" },\n] as const;\n\n// Alert types\nexport const ALERT_TYPES = [\n  { value: \"low_stock\", label: \"Stock faible\", severity: \"medium\" },\n  { value: \"critical_stock\", label: \"Stock critique\", severity: \"high\" },\n  { value: \"overdue_invoice\", label: \"Facture en retard\", severity: \"high\" },\n  { value: \"payment_due\", label: \"Paiement dû\", severity: \"medium\" },\n] as const;\n\n// Severity levels\nexport const SEVERITY_LEVELS = [\n  { value: \"low\", label: \"Faible\", color: \"bg-gray-100 text-gray-800\" },\n  { value: \"medium\", label: \"Moyen\", color: \"bg-yellow-100 text-yellow-800\" },\n  { value: \"high\", label: \"Élevé\", color: \"bg-orange-100 text-orange-800\" },\n  { value: \"critical\", label: \"Critique\", color: \"bg-red-100 text-red-800\" },\n] as const;\n\n// Imprest fund status\nexport const IMPREST_STATUS = [\n  { value: \"active\", label: \"Actif\", icon: \"✅\", color: \"bg-green-100 text-green-800\" },\n  { value: \"suspended\", label: \"Suspendu\", icon: \"⏸️\", color: \"bg-orange-100 text-orange-800\" },\n  { value: \"closed\", label: \"Fermé\", icon: \"🔒\", color: \"bg-red-100 text-red-800\" },\n] as const;\n\n// Imprest transaction types\nexport const IMPREST_TRANSACTION_TYPES = [\n  { value: \"deposit\", label: \"Dépôt\", icon: \"⬇️\", color: \"bg-green-100 text-green-800\" },\n  { value: \"withdrawal\", label: \"Retrait\", icon: \"⬆️\", color: \"bg-blue-100 text-blue-800\" },\n  { value: \"expense\", label: \"Dépense\", icon: \"💰\", color: \"bg-red-100 text-red-800\" },\n] as const;\n\n// Report types\nexport const REPORT_TYPES = [\n  { value: \"expense_summary\", label: \"Résumé des dépenses\" },\n  { value: \"imprest_summary\", label: \"Résumé des avances\" },\n  { value: \"monthly_report\", label: \"Rapport mensuel\" },\n  { value: \"yearly_report\", label: \"Rapport annuel\" },\n] as const;\n\n// Cash book types\nexport const CASH_BOOK_TYPES = [\n  { value: \"income\", label: \"Recette\", icon: \"⬇️\", color: \"bg-green-100 text-green-800\" },\n  { value: \"expense\", label: \"Dépense\", icon: \"⬆️\", color: \"bg-red-100 text-red-800\" },\n  { value: \"transfer\", label: \"Transfert\", icon: \"↔️\", color: \"bg-blue-100 text-blue-800\" },\n] as const;","size_bytes":3902},"shared/schemas/core.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  serial,\n  decimal,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { users } from \"./auth\";\n\nexport const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const clients = pgTable(\"clients\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  email: varchar(\"email\", { length: 255 }),\n  phone: varchar(\"phone\", { length: 50 }),\n  address: text(\"address\"),\n  company: varchar(\"company\", { length: 255 }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  priceHT: decimal(\"price_ht\", { precision: 15, scale: 2 }).notNull(), // Prix HT uniquement\n  stock: integer(\"stock\").default(0),\n  alertStock: integer(\"alert_stock\").default(10), // Seuil d'alerte pour le stock\n  categoryId: integer(\"category_id\").references(() => categories.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});","size_bytes":1427},"shared/schemas/index.ts":{"content":"// Re-export all tables\nexport * from \"./auth\";\nexport * from \"./licenses\";\nexport * from \"./core\";\nexport * from \"./invoicing\";\nexport * from \"./inventory\";\nexport * from \"./accounting\";\nexport * from \"./treasury\";\nexport * from \"./chart-of-accounts\";\nexport * from \"./revenue\";\nexport * from \"./alerts\";\n\n// Re-export relations\nexport * from \"./relations\";\n\n// Re-export types and schemas\nexport * from \"./types\";\n\n// Re-export constants\nexport * from \"./constants\";","size_bytes":468},"shared/schemas/inventory.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  serial,\n  decimal,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { users } from \"./auth\";\nimport { products } from \"./core\";\n\n// Table pour gérer les réapprovisionnements de stock\nexport const stockReplenishments = pgTable(\"stock_replenishments\", {\n  id: serial(\"id\").primaryKey(),\n  productId: integer(\"product_id\").notNull().references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  costPerUnit: decimal(\"cost_per_unit\", { precision: 15, scale: 2 }), // Coût d'achat par unité\n  totalCost: decimal(\"total_cost\", { precision: 15, scale: 2 }), // Coût total du réapprovisionnement\n  supplier: varchar(\"supplier\", { length: 255 }), // Nom du fournisseur\n  reference: varchar(\"reference\", { length: 100 }), // Référence de la commande/livraison\n  notes: text(\"notes\"), // Notes sur le réapprovisionnement\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});","size_bytes":1007},"shared/schemas/invoicing.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  serial,\n  decimal,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { users } from \"./auth\";\nimport { clients, products } from \"./core\";\n\nexport const invoices = pgTable(\"invoices\", {\n  id: serial(\"id\").primaryKey(),\n  number: varchar(\"number\", { length: 50 }).notNull(),\n  clientId: integer(\"client_id\").notNull().references(() => clients.id),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"en_attente\"), // en_attente, payee, partiellement_reglee\n  totalHT: decimal(\"total_ht\", { precision: 15, scale: 2 }).notNull(), // Total HT\n  tvaRate: decimal(\"tva_rate\", { precision: 5, scale: 2 }).notNull(), // Taux TVA choisi (3%, 5%, 10%, 15%, 18%, 21%)\n  totalTVA: decimal(\"total_tva\", { precision: 15, scale: 2 }).notNull(), // Montant TVA calculé\n  totalTTC: decimal(\"total_ttc\", { precision: 15, scale: 2 }).notNull(), // Total TTC final\n  paymentMethod: varchar(\"payment_method\", { length: 50 }).notNull().default(\"cash\"), // cash, bank_transfer, check, card, mobile_money\n  dueDate: timestamp(\"due_date\"),\n  notes: text(\"notes\"),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const invoiceItems = pgTable(\"invoice_items\", {\n  id: serial(\"id\").primaryKey(),\n  invoiceId: integer(\"invoice_id\").notNull().references(() => invoices.id),\n  productId: integer(\"product_id\").references(() => products.id),\n  productName: varchar(\"product_name\", { length: 255 }).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  priceHT: decimal(\"price_ht\", { precision: 15, scale: 2 }).notNull(), // Prix HT unitaire\n  totalHT: decimal(\"total_ht\", { precision: 15, scale: 2 }).notNull(), // Total HT ligne (quantity * priceHT)\n});\n\nexport const sales = pgTable(\"sales\", {\n  id: serial(\"id\").primaryKey(),\n  invoiceId: integer(\"invoice_id\").notNull().references(() => invoices.id),\n  productId: integer(\"product_id\").notNull().references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 15, scale: 2 }).notNull(),\n  total: decimal(\"total\", { precision: 15, scale: 2 }).notNull(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});","size_bytes":2301},"shared/schemas/licenses.ts":{"content":"import {\n  pgTable,\n  varchar,\n  timestamp,\n  serial,\n  boolean,\n} from \"drizzle-orm/pg-core\";\n\n// Licenses table for activation system\nexport const licenses = pgTable(\"licenses\", {\n  id: serial(\"id\").primaryKey(),\n  key: varchar(\"key\", { length: 100 }).notNull().unique(),\n  activated: boolean(\"activated\").default(false),\n  clientName: varchar(\"client_name\", { length: 255 }),\n  deviceId: varchar(\"device_id\", { length: 255 }),\n  createdBy: varchar(\"created_by\", { length: 255 }).notNull(),\n  activatedAt: timestamp(\"activated_at\"),\n  revokedAt: timestamp(\"revoked_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});","size_bytes":627},"shared/schemas/relations.ts":{"content":"import { relations } from \"drizzle-orm\";\n\n// Import all tables\nimport { users, sessions } from \"./auth\";\nimport { licenses } from \"./licenses\";\nimport { categories, clients, products } from \"./core\";\nimport { invoices, invoiceItems, sales } from \"./invoicing\";\nimport { stockReplenishments } from \"./inventory\";\nimport { expenseCategories, expenses, imprestFunds, imprestTransactions, accountingReports } from \"./accounting\";\nimport { cashBookEntries, pettyCashEntries, transactionJournal } from \"./treasury\";\nimport { chartOfAccounts } from \"./chart-of-accounts\";\nimport { revenueCategories, revenues } from \"./revenue\";\nimport { businessAlerts } from \"./alerts\";\n\n// User relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  clients: many(clients),\n  products: many(products),\n  categories: many(categories),\n  invoices: many(invoices),\n  sales: many(sales),\n  stockReplenishments: many(stockReplenishments),\n  expenseCategories: many(expenseCategories),\n  expenses: many(expenses),\n  imprestFunds: many(imprestFunds),\n  imprestTransactions: many(imprestTransactions),\n  accountingReports: many(accountingReports),\n  cashBookEntries: many(cashBookEntries),\n  pettyCashEntries: many(pettyCashEntries),\n  transactionJournal: many(transactionJournal),\n  revenueCategories: many(revenueCategories),\n  revenues: many(revenues),\n  chartOfAccounts: many(chartOfAccounts),\n  businessAlerts: many(businessAlerts),\n}));\n\n// License relations\nexport const licensesRelations = relations(licenses, ({ }) => ({}));\n\n// Core module relations\nexport const categoriesRelations = relations(categories, ({ one, many }) => ({\n  user: one(users, {\n    fields: [categories.userId],\n    references: [users.id],\n  }),\n  products: many(products),\n}));\n\nexport const clientsRelations = relations(clients, ({ one, many }) => ({\n  user: one(users, {\n    fields: [clients.userId],\n    references: [users.id],\n  }),\n  invoices: many(invoices),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  user: one(users, {\n    fields: [products.userId],\n    references: [users.id],\n  }),\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  invoiceItems: many(invoiceItems),\n  sales: many(sales),\n  replenishments: many(stockReplenishments),\n}));\n\n// Invoicing relations\nexport const invoicesRelations = relations(invoices, ({ one, many }) => ({\n  user: one(users, {\n    fields: [invoices.userId],\n    references: [users.id],\n  }),\n  client: one(clients, {\n    fields: [invoices.clientId],\n    references: [clients.id],\n  }),\n  items: many(invoiceItems),\n  sales: many(sales),\n}));\n\nexport const invoiceItemsRelations = relations(invoiceItems, ({ one }) => ({\n  invoice: one(invoices, {\n    fields: [invoiceItems.invoiceId],\n    references: [invoices.id],\n  }),\n  product: one(products, {\n    fields: [invoiceItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const salesRelations = relations(sales, ({ one }) => ({\n  user: one(users, {\n    fields: [sales.userId],\n    references: [users.id],\n  }),\n  invoice: one(invoices, {\n    fields: [sales.invoiceId],\n    references: [invoices.id],\n  }),\n  product: one(products, {\n    fields: [sales.productId],\n    references: [products.id],\n  }),\n}));\n\n// Inventory relations\nexport const stockReplenishmentsRelations = relations(stockReplenishments, ({ one }) => ({\n  user: one(users, {\n    fields: [stockReplenishments.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [stockReplenishments.productId],\n    references: [products.id],\n  }),\n}));\n\n// Accounting relations\nexport const expenseCategoriesRelations = relations(expenseCategories, ({ one, many }) => ({\n  user: one(users, {\n    fields: [expenseCategories.userId],\n    references: [users.id],\n  }),\n  expenses: many(expenses),\n}));\n\nexport const expensesRelations = relations(expenses, ({ one }) => ({\n  user: one(users, {\n    fields: [expenses.userId],\n    references: [users.id],\n  }),\n  category: one(expenseCategories, {\n    fields: [expenses.categoryId],\n    references: [expenseCategories.id],\n  }),\n  account: one(chartOfAccounts, {\n    fields: [expenses.accountId],\n    references: [chartOfAccounts.id],\n  }),\n  imprestFund: one(imprestFunds, {\n    fields: [expenses.imprestId],\n    references: [imprestFunds.id],\n  }),\n  approver: one(users, {\n    fields: [expenses.approvedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const imprestFundsRelations = relations(imprestFunds, ({ one, many }) => ({\n  user: one(users, {\n    fields: [imprestFunds.userId],\n    references: [users.id],\n  }),\n  transactions: many(imprestTransactions),\n}));\n\nexport const imprestTransactionsRelations = relations(imprestTransactions, ({ one }) => ({\n  user: one(users, {\n    fields: [imprestTransactions.userId],\n    references: [users.id],\n  }),\n  imprestFund: one(imprestFunds, {\n    fields: [imprestTransactions.imprestId],\n    references: [imprestFunds.id],\n  }),\n  expense: one(expenses, {\n    fields: [imprestTransactions.expenseId],\n    references: [expenses.id],\n  }),\n}));\n\nexport const accountingReportsRelations = relations(accountingReports, ({ one }) => ({\n  user: one(users, {\n    fields: [accountingReports.userId],\n    references: [users.id],\n  }),\n  generatedBy: one(users, {\n    fields: [accountingReports.generatedBy],\n    references: [users.id],\n  }),\n}));\n\n// Treasury relations\nexport const cashBookEntriesRelations = relations(cashBookEntries, ({ one }) => ({\n  user: one(users, {\n    fields: [cashBookEntries.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const pettyCashEntriesRelations = relations(pettyCashEntries, ({ one }) => ({\n  user: one(users, {\n    fields: [pettyCashEntries.userId],\n    references: [users.id],\n  }),\n  approver: one(users, {\n    fields: [pettyCashEntries.approvedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const transactionJournalRelations = relations(transactionJournal, ({ one }) => ({\n  user: one(users, {\n    fields: [transactionJournal.userId],\n    references: [users.id],\n  }),\n  creator: one(users, {\n    fields: [transactionJournal.createdBy],\n    references: [users.id],\n  }),\n}));\n\n// Chart of accounts relations\nexport const chartOfAccountsRelations = relations(chartOfAccounts, ({ one, many }) => ({\n  user: one(users, {\n    fields: [chartOfAccounts.userId],\n    references: [users.id],\n  }),\n  expenses: many(expenses),\n}));\n\n// Revenue relations\nexport const revenueCategoriesRelations = relations(revenueCategories, ({ one, many }) => ({\n  user: one(users, {\n    fields: [revenueCategories.userId],\n    references: [users.id],\n  }),\n  revenues: many(revenues),\n}));\n\nexport const revenuesRelations = relations(revenues, ({ one }) => ({\n  user: one(users, {\n    fields: [revenues.userId],\n    references: [users.id],\n  }),\n  category: one(revenueCategories, {\n    fields: [revenues.categoryId],\n    references: [revenueCategories.id],\n  }),\n}));\n\n// Alert relations\nexport const businessAlertsRelations = relations(businessAlerts, ({ one }) => ({\n  user: one(users, {\n    fields: [businessAlerts.userId],\n    references: [users.id],\n  }),\n}));","size_bytes":7140},"shared/schemas/revenue.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  serial,\n  decimal,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { users } from \"./auth\";\n\n// Revenue Categories - Catégories de revenus\nexport const revenueCategories = pgTable(\"revenue_categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Revenues - Enregistrement des revenus\nexport const revenues = pgTable(\"revenues\", {\n  id: serial(\"id\").primaryKey(),\n  reference: varchar(\"reference\", { length: 100 }).notNull(),\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  categoryId: integer(\"category_id\").notNull().references(() => revenueCategories.id),\n  revenueDate: timestamp(\"revenue_date\").notNull(),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }).notNull(), // cash, bank_transfer, check, card\n  source: varchar(\"source\", { length: 255 }), // Source du revenu (client, vente, service, etc.)\n  receiptUrl: varchar(\"receipt_url\", { length: 500 }),\n  notes: text(\"notes\"),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});","size_bytes":1341},"shared/schemas/treasury.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  serial,\n  decimal,\n  integer,\n  boolean,\n  date,\n} from \"drizzle-orm/pg-core\";\nimport { users } from \"./auth\";\n\n// Main Cash Book - Transactions principales (revenus, achats, transferts)\nexport const cashBookEntries = pgTable(\"cash_book_entries\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  reference: varchar(\"reference\", { length: 100 }).notNull(),\n  date: date(\"date\").notNull(),\n  description: text(\"description\").notNull(),\n  type: varchar(\"type\", { length: 20 }).notNull(), // 'income', 'expense', 'transfer'\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  account: varchar(\"account\", { length: 100 }).notNull(), // Compte concerné\n  counterparty: varchar(\"counterparty\", { length: 255 }), // Contrepartie\n  category: varchar(\"category\", { length: 100 }),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }).notNull(),\n  receiptNumber: varchar(\"receipt_number\", { length: 100 }),\n  notes: text(\"notes\"),\n  isReconciled: boolean(\"is_reconciled\").default(false),\n  reconciledAt: timestamp(\"reconciled_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Petty Cash - Petites dépenses quotidiennes avec justificatifs\nexport const pettyCashEntries = pgTable(\"petty_cash_entries\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  date: date(\"date\").notNull(),\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 8, scale: 2 }).notNull(),\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  recipient: varchar(\"recipient\", { length: 255 }),\n  purpose: text(\"purpose\"),\n  receiptNumber: varchar(\"receipt_number\", { length: 50 }),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\").notNull(), // 'pending', 'approved', 'rejected'\n  justification: text(\"justification\"), // Justificatifs attachés\n  runningBalance: decimal(\"running_balance\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Transaction Journal - Historique complet des opérations avec filtres\nexport const transactionJournal = pgTable(\"transaction_journal\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  entryDate: timestamp(\"entry_date\").defaultNow().notNull(),\n  transactionDate: timestamp(\"transaction_date\").notNull(),\n  reference: varchar(\"reference\", { length: 100 }).notNull(),\n  description: text(\"description\").notNull(),\n  sourceModule: varchar(\"source_module\", { length: 50 }).notNull(), // 'cash_book', 'petty_cash', 'expenses', 'imprest'\n  sourceId: integer(\"source_id\").notNull(), // ID de l'enregistrement source\n  debitAccount: varchar(\"debit_account\", { length: 100 }),\n  creditAccount: varchar(\"credit_account\", { length: 100 }),\n  debitAmount: decimal(\"debit_amount\", { precision: 12, scale: 2 }),\n  creditAmount: decimal(\"credit_amount\", { precision: 12, scale: 2 }),\n  runningBalance: decimal(\"running_balance\", { precision: 12, scale: 2 }),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n});","size_bytes":3339},"shared/schemas/types.ts":{"content":"import { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Import all tables\nimport { users } from \"./auth\";\nimport { licenses } from \"./licenses\";\nimport { categories, clients, products } from \"./core\";\nimport { invoices, invoiceItems, sales } from \"./invoicing\";\nimport { stockReplenishments } from \"./inventory\";\nimport { expenseCategories, expenses, imprestFunds, imprestTransactions, accountingReports } from \"./accounting\";\nimport { cashBookEntries, pettyCashEntries, transactionJournal } from \"./treasury\";\nimport { chartOfAccounts } from \"./chart-of-accounts\";\nimport { revenueCategories, revenues } from \"./revenue\";\nimport { businessAlerts } from \"./alerts\";\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\n\nexport type License = typeof licenses.$inferSelect;\nexport type NewLicense = typeof licenses.$inferInsert;\n\nexport type Category = typeof categories.$inferSelect;\nexport type NewCategory = typeof categories.$inferInsert;\n\nexport type Client = typeof clients.$inferSelect;\nexport type NewClient = typeof clients.$inferInsert;\n\nexport type Product = typeof products.$inferSelect;\nexport type NewProduct = typeof products.$inferInsert;\n\nexport type Invoice = typeof invoices.$inferSelect;\nexport type NewInvoice = typeof invoices.$inferInsert;\n\nexport type InvoiceItem = typeof invoiceItems.$inferSelect;\nexport type NewInvoiceItem = typeof invoiceItems.$inferInsert;\n\nexport type Sale = typeof sales.$inferSelect;\nexport type NewSale = typeof sales.$inferInsert;\n\nexport type StockReplenishment = typeof stockReplenishments.$inferSelect;\nexport type NewStockReplenishment = typeof stockReplenishments.$inferInsert;\n\nexport type ExpenseCategory = typeof expenseCategories.$inferSelect;\nexport type NewExpenseCategory = typeof expenseCategories.$inferInsert;\n\nexport type Expense = typeof expenses.$inferSelect;\nexport type NewExpense = typeof expenses.$inferInsert;\n\nexport type ImprestFund = typeof imprestFunds.$inferSelect;\nexport type NewImprestFund = typeof imprestFunds.$inferInsert;\n\nexport type ImprestTransaction = typeof imprestTransactions.$inferSelect;\nexport type NewImprestTransaction = typeof imprestTransactions.$inferInsert;\n\nexport type AccountingReport = typeof accountingReports.$inferSelect;\nexport type NewAccountingReport = typeof accountingReports.$inferInsert;\n\nexport type CashBookEntry = typeof cashBookEntries.$inferSelect;\nexport type NewCashBookEntry = typeof cashBookEntries.$inferInsert;\n\nexport type PettyCashEntry = typeof pettyCashEntries.$inferSelect;\nexport type NewPettyCashEntry = typeof pettyCashEntries.$inferInsert;\n\nexport type TransactionJournal = typeof transactionJournal.$inferSelect;\nexport type NewTransactionJournal = typeof transactionJournal.$inferInsert;\n\nexport type ChartOfAccount = typeof chartOfAccounts.$inferSelect;\nexport type NewChartOfAccount = typeof chartOfAccounts.$inferInsert;\n\nexport type RevenueCategory = typeof revenueCategories.$inferSelect;\nexport type NewRevenueCategory = typeof revenueCategories.$inferInsert;\n\nexport type Revenue = typeof revenues.$inferSelect;\nexport type NewRevenue = typeof revenues.$inferInsert;\n\nexport type BusinessAlert = typeof businessAlerts.$inferSelect;\nexport type NewBusinessAlert = typeof businessAlerts.$inferInsert;\n\n// Zod schemas for validation\nexport const userInsertSchema = createInsertSchema(users);\nexport const categoryInsertSchema = createInsertSchema(categories);\nexport const clientInsertSchema = createInsertSchema(clients);\nexport const productInsertSchema = createInsertSchema(products);\nexport const invoiceInsertSchema = createInsertSchema(invoices);\nexport const invoiceItemInsertSchema = createInsertSchema(invoiceItems);\nexport const expenseInsertSchema = createInsertSchema(expenses).omit({ \n  reference: true,\n  id: true,\n  createdAt: true,\n  approvedBy: true,\n  approvedAt: true \n});\nexport const revenueInsertSchema = createInsertSchema(revenues).omit({ \n  reference: true,\n  id: true,\n  createdAt: true \n});\nexport const insertAccountingReportSchema = createInsertSchema(accountingReports).omit({ \n  id: true,\n  createdAt: true \n});\nexport const insertBusinessAlertSchema = createInsertSchema(businessAlerts);\nexport const insertCashBookEntrySchema = createInsertSchema(cashBookEntries);\nexport const insertPettyCashEntrySchema = createInsertSchema(pettyCashEntries);\nexport const insertImprestFundSchema = createInsertSchema(imprestFunds).omit({ \n  reference: true,\n  currentBalance: true,\n  id: true,\n  createdAt: true,\n  updatedAt: true \n});\nexport const insertExpenseCategorySchema = createInsertSchema(expenseCategories);\nexport const insertRevenueCategorySchema = createInsertSchema(revenueCategories);\nexport const insertChartOfAccountSchema = createInsertSchema(chartOfAccounts);\n\n// Additional schemas\nexport const insertClientSchema = clientInsertSchema;\nexport const insertProductSchema = productInsertSchema;\nexport const insertCategorySchema = categoryInsertSchema;\nexport const insertInvoiceSchema = invoiceInsertSchema;\nexport const insertInvoiceItemSchema = invoiceItemInsertSchema;\nexport const insertLicenseSchema = createInsertSchema(licenses);\nexport const insertStockReplenishmentSchema = createInsertSchema(stockReplenishments);\nexport const insertImprestTransactionSchema = createInsertSchema(imprestTransactions);\nexport const insertTransactionJournalSchema = createInsertSchema(transactionJournal);\n\n// Legacy aliases for compatibility\nexport const insertExpenseSchema = expenseInsertSchema;\nexport const insertRevenueSchema = revenueInsertSchema;","size_bytes":5605},"client/src/pages/user-guide.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport Header from \"@/components/header\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { useSettings } from \"@/hooks/useSettings\";\nimport { \n  Download, \n  BookOpen, \n  Users, \n  Package, \n  FileText, \n  TrendingUp, \n  Settings, \n  Bell, \n  Calculator,\n  CreditCard,\n  BarChart3,\n  FolderOutput,\n  Shield,\n  Smartphone,\n  Globe,\n  CheckCircle,\n  AlertTriangle,\n  Clock,\n  DollarSign,\n  Eye,\n  Edit,\n  Trash2,\n  Plus,\n  Search,\n  Filter,\n  Printer\n} from \"lucide-react\";\n\nexport default function UserGuide() {\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n  const [activeSection, setActiveSection] = useState(\"introduction\");\n\n  const handleDownloadPDF = async () => {\n    try {\n      const { default: jsPDF } = await import('jspdf');\n      const { default: html2canvas } = await import('html2canvas');\n      \n      const element = document.querySelector('.guide-content') as HTMLElement;\n      if (!element) {\n        alert(\"Erreur: Contenu du guide non trouvé\");\n        return;\n      }\n\n      // Configure the canvas for better quality\n      const canvas = await html2canvas(element, {\n        scale: 2,\n        useCORS: true,\n        allowTaint: true,\n        backgroundColor: '#ffffff',\n        height: element.scrollHeight,\n        width: element.scrollWidth\n      });\n\n      const imgData = canvas.toDataURL('image/png');\n      const pdf = new jsPDF('p', 'mm', 'a4');\n      \n      const imgWidth = 210; // A4 width in mm\n      const pageHeight = 297; // A4 height in mm\n      const imgHeight = (canvas.height * imgWidth) / canvas.width;\n      let heightLeft = imgHeight;\n      let position = 0;\n\n      // Add first page\n      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n      heightLeft -= pageHeight;\n\n      // Add additional pages if needed\n      while (heightLeft >= 0) {\n        position = heightLeft - imgHeight;\n        pdf.addPage();\n        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n        heightLeft -= pageHeight;\n      }\n\n      pdf.save('Guide-Utilisateur-YGestion.pdf');\n    } catch (error) {\n      console.error('Erreur lors de la génération du PDF:', error);\n      alert('Erreur lors de la génération du PDF');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <main className=\"container mx-auto p-6\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Guide Utilisateur YGestion</h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Guide complet pour maîtriser votre plateforme de gestion commerciale et comptable\n            </p>\n          </div>\n          <Button onClick={handleDownloadPDF} className=\"flex items-center gap-2\">\n            <Download className=\"w-4 h-4\" />\n            Télécharger PDF\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Table des matières */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BookOpen className=\"w-5 h-5\" />\n                  Table des matières\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                {[\n                  { id: \"introduction\", label: \"Introduction\", icon: BookOpen },\n                  { id: \"getting-started\", label: \"Premiers pas\", icon: CheckCircle },\n                  { id: \"dashboard\", label: \"Tableau de bord\", icon: BarChart3 },\n                  { id: \"clients\", label: \"Gestion des clients\", icon: Users },\n                  { id: \"products\", label: \"Gestion des produits\", icon: Package },\n                  { id: \"invoices\", label: \"Facturation\", icon: FileText },\n                  { id: \"sales\", label: \"Ventes\", icon: TrendingUp },\n                  { id: \"accounting\", label: \"Comptabilité\", icon: Calculator },\n                  { id: \"alerts\", label: \"Alertes\", icon: Bell },\n                  { id: \"settings\", label: \"Paramètres\", icon: Settings },\n                  { id: \"export\", label: \"Export & Sauvegarde\", icon: FolderOutput },\n                  { id: \"security\", label: \"Sécurité\", icon: Shield },\n                  { id: \"mobile\", label: \"Utilisation mobile\", icon: Smartphone },\n                  { id: \"support\", label: \"Support\", icon: Globe }\n                ].map((item) => (\n                  <Button\n                    key={item.id}\n                    variant={activeSection === item.id ? \"default\" : \"ghost\"}\n                    className=\"w-full justify-start text-sm\"\n                    onClick={() => setActiveSection(item.id)}\n                  >\n                    <item.icon className=\"w-4 h-4 mr-2\" />\n                    {item.label}\n                  </Button>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contenu principal */}\n          <div className=\"lg:col-span-3\">\n            <Card>\n              <CardContent className=\"p-8 guide-content\">\n                \n                {/* Introduction */}\n                {activeSection === \"introduction\" && (\n                  <div className=\"space-y-6\">\n                    <div>\n                      <h2 className=\"text-2xl font-bold mb-4\">Bienvenue dans YGestion</h2>\n                      <p className=\"text-lg text-muted-foreground mb-6\">\n                        YGestion est une plateforme complète de gestion commerciale et comptable \n                        spécialement conçue pour les entreprises d'Afrique de l'Ouest.\n                      </p>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            <Globe className=\"w-5 h-5\" />\n                            Multi-langue\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <p>Interface disponible en français et anglais</p>\n                        </CardContent>\n                      </Card>\n\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            <DollarSign className=\"w-5 h-5\" />\n                            Multi-devises\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <p>Support du F CFA (XOF) et du Cedi ghanéen (GHS)</p>\n                        </CardContent>\n                      </Card>\n\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            <Calculator className=\"w-5 h-5\" />\n                            Comptabilité OHADA\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <p>Conforme aux normes comptables OHADA</p>\n                        </CardContent>\n                      </Card>\n\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            <Shield className=\"w-5 h-5\" />\n                            Sécurisé\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <p>Données sécurisées avec authentification</p>\n                        </CardContent>\n                      </Card>\n                    </div>\n\n                    <div>\n                      <h3 className=\"text-xl font-semibold mb-3\">Fonctionnalités principales</h3>\n                      <ul className=\"space-y-2\">\n                        <li className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                          Gestion complète des clients et produits\n                        </li>\n                        <li className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                          Facturation avec génération PDF automatique\n                        </li>\n                        <li className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                          Suivi des ventes et analyses\n                        </li>\n                        <li className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                          Module comptabilité complet (dépenses, revenus, rapports)\n                        </li>\n                        <li className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                          Gestion des stocks avec alertes automatiques\n                        </li>\n                        <li className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                          Export de données et sauvegarde\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                )}\n\n                {/* Premiers pas */}\n                {activeSection === \"getting-started\" && (\n                  <div className=\"space-y-6\">\n                    <h2 className=\"text-2xl font-bold mb-4\">Premiers pas</h2>\n                    \n                    <div className=\"space-y-4\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3 flex items-center gap-2\">\n                          <span className=\"bg-primary text-primary-foreground rounded-full w-6 h-6 flex items-center justify-center text-sm\">1</span>\n                          Inscription et Connexion\n                        </h3>\n                        <p className=\"mb-3\">\n                          Créez votre compte YGestion en fournissant votre email et un mot de passe sécurisé.\n                        </p>\n                        <div className=\"bg-muted p-4 rounded-lg\">\n                          <p className=\"font-medium mb-2\">📧 Email requis :</p>\n                          <ul className=\"list-disc list-inside space-y-1 text-sm\">\n                            <li>Utilisez un email valide et accessible</li>\n                            <li>Vérifiez votre boîte de réception après inscription</li>\n                          </ul>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3 flex items-center gap-2\">\n                          <span className=\"bg-primary text-primary-foreground rounded-full w-6 h-6 flex items-center justify-center text-sm\">2</span>\n                          Sélection de la langue\n                        </h3>\n                        <p className=\"mb-3\">\n                          Choisissez votre langue préférée : français ou anglais. Vous pourrez la modifier plus tard dans les paramètres.\n                        </p>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3 flex items-center gap-2\">\n                          <span className=\"bg-primary text-primary-foreground rounded-full w-6 h-6 flex items-center justify-center text-sm\">3</span>\n                          Compléter votre profil\n                        </h3>\n                        <p className=\"mb-3\">\n                          Renseignez vos informations d'entreprise :\n                        </p>\n                        <ul className=\"list-disc list-inside space-y-1\">\n                          <li>Nom et prénom</li>\n                          <li>Téléphone</li>\n                          <li>Nom de l'entreprise</li>\n                          <li>Poste/fonction</li>\n                          <li>Adresse complète</li>\n                          <li>Type d'activité</li>\n                          <li>Devise préférée (XOF ou GHS)</li>\n                        </ul>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3 flex items-center gap-2\">\n                          <span className=\"bg-primary text-primary-foreground rounded-full w-6 h-6 flex items-center justify-center text-sm\">4</span>\n                          Activation de licence\n                        </h3>\n                        <div className=\"bg-yellow-50 border border-yellow-200 p-4 rounded-lg\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <Clock className=\"w-5 h-5 text-yellow-600\" />\n                            <p className=\"font-medium text-yellow-800\">Période d'essai</p>\n                          </div>\n                          <p className=\"text-yellow-700 text-sm\">\n                            Vous disposez de 60 secondes pour explorer l'application avant d'activer votre licence.\n                          </p>\n                        </div>\n                        <p className=\"mt-3\">\n                          Entrez votre clé de licence pour débloquer toutes les fonctionnalités.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Tableau de bord */}\n                {activeSection === \"dashboard\" && (\n                  <div className=\"space-y-6\">\n                    <h2 className=\"text-2xl font-bold mb-4\">Tableau de bord</h2>\n                    \n                    <p className=\"text-muted-foreground mb-6\">\n                      Le tableau de bord est votre centre de contrôle principal. Il affiche un aperçu complet \n                      de votre activité commerciale en temps réel.\n                    </p>\n\n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">📊 Statistiques clés</h3>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"bg-blue-50 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-blue-900\">Chiffre d'affaires</h4>\n                            <p className=\"text-sm text-blue-700\">Total des revenus générés</p>\n                          </div>\n                          <div className=\"bg-green-50 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-green-900\">Nombre de factures</h4>\n                            <p className=\"text-sm text-green-700\">Factures créées au total</p>\n                          </div>\n                          <div className=\"bg-purple-50 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-purple-900\">Clients actifs</h4>\n                            <p className=\"text-sm text-purple-700\">Clients enregistrés</p>\n                          </div>\n                          <div className=\"bg-orange-50 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-orange-900\">Produits en stock</h4>\n                            <p className=\"text-sm text-orange-700\">Articles dans l'inventaire</p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">🚀 Actions rapides</h3>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <Button variant=\"outline\" className=\"h-16 flex-col\">\n                            <Plus className=\"w-6 h-6 mb-1\" />\n                            Nouvelle facture\n                          </Button>\n                          <Button variant=\"outline\" className=\"h-16 flex-col\">\n                            <Users className=\"w-6 h-6 mb-1\" />\n                            Ajouter client\n                          </Button>\n                          <Button variant=\"outline\" className=\"h-16 flex-col\">\n                            <Package className=\"w-6 h-6 mb-1\" />\n                            Nouveau produit\n                          </Button>\n                          <Button variant=\"outline\" className=\"h-16 flex-col\">\n                            <BarChart3 className=\"w-6 h-6 mb-1\" />\n                            Voir rapports\n                          </Button>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">⚡ Widgets d'information</h3>\n                        <ul className=\"space-y-2\">\n                          <li><strong>Factures récentes :</strong> Les 5 dernières factures créées</li>\n                          <li><strong>Produits populaires :</strong> Articles les plus vendus</li>\n                          <li><strong>Alertes stock :</strong> Produits avec stock faible</li>\n                          <li><strong>Nouveau ce mois :</strong> Nouveaux clients enregistrés</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Gestion des clients */}\n                {activeSection === \"clients\" && (\n                  <div className=\"space-y-6\">\n                    <h2 className=\"text-2xl font-bold mb-4\">Gestion des clients</h2>\n                    \n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">➕ Ajouter un nouveau client</h3>\n                        <ol className=\"list-decimal list-inside space-y-2\">\n                          <li>Cliquez sur le bouton \"Nouveau client\" <Button size=\"sm\" className=\"mx-2\"><Plus className=\"w-4 h-4\" /></Button></li>\n                          <li>Remplissez les informations obligatoires :\n                            <ul className=\"list-disc list-inside ml-6 mt-2 space-y-1\">\n                              <li><strong>Nom complet :</strong> Nom du client ou de l'entreprise</li>\n                              <li><strong>Email :</strong> Adresse email de contact</li>\n                              <li><strong>Téléphone :</strong> Numéro de téléphone</li>\n                              <li><strong>Adresse :</strong> Adresse physique complète</li>\n                              <li><strong>Entreprise :</strong> Nom de l'entreprise (optionnel)</li>\n                            </ul>\n                          </li>\n                          <li>Cliquez sur \"Créer\" pour enregistrer</li>\n                        </ol>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">🔍 Rechercher des clients</h3>\n                        <p className=\"mb-3\">\n                          Utilisez la barre de recherche pour trouver rapidement un client par :\n                        </p>\n                        <ul className=\"list-disc list-inside space-y-1\">\n                          <li>Nom ou prénom</li>\n                          <li>Nom d'entreprise</li>\n                          <li>Adresse email</li>\n                        </ul>\n                        <div className=\"bg-muted p-4 rounded-lg mt-3\">\n                          <p className=\"text-sm\">💡 <strong>Astuce :</strong> La recherche fonctionne en temps réel, tapez simplement les premières lettres.</p>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">✏️ Modifier ou supprimer</h3>\n                        <div className=\"space-y-3\">\n                          <div>\n                            <h4 className=\"font-medium mb-2\">Modifier un client :</h4>\n                            <ol className=\"list-decimal list-inside space-y-1\">\n                              <li>Trouvez le client dans la liste</li>\n                              <li>Cliquez sur l'icône <Edit className=\"w-4 h-4 inline mx-1\" /> Modifier</li>\n                              <li>Modifiez les informations nécessaires</li>\n                              <li>Cliquez sur \"Enregistrer\"</li>\n                            </ol>\n                          </div>\n                          <div>\n                            <h4 className=\"font-medium mb-2\">Supprimer un client :</h4>\n                            <div className=\"bg-red-50 border border-red-200 p-3 rounded-lg\">\n                              <p className=\"text-red-800 text-sm mb-2\">\n                                ⚠️ <strong>Attention :</strong> La suppression d'un client est irréversible.\n                              </p>\n                              <ol className=\"list-decimal list-inside space-y-1 text-sm\">\n                                <li>Cliquez sur l'icône <Trash2 className=\"w-4 h-4 inline mx-1 text-red-600\" /> Supprimer</li>\n                                <li>Confirmez la suppression dans la boîte de dialogue</li>\n                              </ol>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Gestion des produits */}\n                {activeSection === \"products\" && (\n                  <div className=\"space-y-6\">\n                    <h2 className=\"text-2xl font-bold mb-4\">Gestion des produits</h2>\n                    \n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">📦 Catalogue produits</h3>\n                        <p className=\"mb-4\">\n                          Gérez votre inventaire complet avec suivi automatique des stocks et alertes.\n                        </p>\n                        \n                        <div>\n                          <h4 className=\"font-medium mb-3\">Créer un nouveau produit :</h4>\n                          <ol className=\"list-decimal list-inside space-y-2\">\n                            <li>Cliquez sur \"Nouveau produit\"</li>\n                            <li>Remplissez les informations :\n                              <ul className=\"list-disc list-inside ml-6 mt-2 space-y-1\">\n                                <li><strong>Nom du produit :</strong> Nom commercial</li>\n                                <li><strong>Description :</strong> Détails du produit</li>\n                                <li><strong>Prix HT :</strong> Prix hors taxes</li>\n                                <li><strong>Stock initial :</strong> Quantité en stock</li>\n                                <li><strong>Seuil d'alerte :</strong> Stock minimum avant alerte</li>\n                                <li><strong>Catégorie :</strong> Classification du produit</li>\n                              </ul>\n                            </li>\n                            <li>Enregistrez le produit</li>\n                          </ol>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">📋 Gestion des catégories</h3>\n                        <p className=\"mb-3\">\n                          Organisez vos produits par catégories pour une meilleure navigation.\n                        </p>\n                        <div className=\"bg-blue-50 p-4 rounded-lg\">\n                          <h4 className=\"font-medium text-blue-900 mb-2\">Exemples de catégories :</h4>\n                          <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                            <div>• Électronique</div>\n                            <div>• Vêtements</div>\n                            <div>• Alimentation</div>\n                            <div>• Services</div>\n                            <div>• Matériel bureau</div>\n                            <div>• Cosmétiques</div>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">📈 Gestion des stocks</h3>\n                        <div className=\"space-y-4\">\n                          <div>\n                            <h4 className=\"font-medium mb-2\">Réapprovisionnement :</h4>\n                            <ol className=\"list-decimal list-inside space-y-1\">\n                              <li>Cliquez sur \"Réapprovisionner\" pour un produit</li>\n                              <li>Indiquez la quantité reçue</li>\n                              <li>Ajoutez le coût d'achat (optionnel)</li>\n                              <li>Précisez le fournisseur et la référence</li>\n                            </ol>\n                          </div>\n                          \n                          <div>\n                            <h4 className=\"font-medium mb-2\">Alertes automatiques :</h4>\n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <div className=\"bg-yellow-50 p-3 rounded-lg\">\n                                <div className=\"flex items-center gap-2\">\n                                  <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />\n                                  <span className=\"font-medium text-yellow-800\">Stock faible</span>\n                                </div>\n                                <p className=\"text-sm text-yellow-700\">Quand le stock atteint le seuil d'alerte</p>\n                              </div>\n                              <div className=\"bg-red-50 p-3 rounded-lg\">\n                                <div className=\"flex items-center gap-2\">\n                                  <AlertTriangle className=\"w-4 h-4 text-red-600\" />\n                                  <span className=\"font-medium text-red-800\">Stock critique</span>\n                                </div>\n                                <p className=\"text-sm text-red-700\">Quand le stock est à zéro</p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Facturation */}\n                {activeSection === \"invoices\" && (\n                  <div className=\"space-y-6\">\n                    <h2 className=\"text-2xl font-bold mb-4\">Module Facturation</h2>\n                    \n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">📄 Créer une facture</h3>\n                        <ol className=\"list-decimal list-inside space-y-2\">\n                          <li><strong>Sélectionner le client :</strong> Choisissez dans la liste ou créez un nouveau client</li>\n                          <li><strong>Ajouter des produits :</strong>\n                            <ul className=\"list-disc list-inside ml-6 mt-2 space-y-1\">\n                              <li>Recherchez et sélectionnez vos produits</li>\n                              <li>Ajustez les quantités</li>\n                              <li>Modifiez les prix si nécessaire</li>\n                            </ul>\n                          </li>\n                          <li><strong>Configurer la TVA :</strong> Choisissez le taux applicable (0%, 3%, 5%, 10%, 15%, 18%, 21%)</li>\n                          <li><strong>Méthode de paiement :</strong>\n                            <div className=\"grid grid-cols-2 gap-2 mt-2 ml-6\">\n                              <div>💰 Espèces</div>\n                              <div>🏦 Virement bancaire</div>\n                              <div>💳 Chèque</div>\n                              <div>💳 Carte bancaire</div>\n                              <div>📱 Mobile Money</div>\n                            </div>\n                          </li>\n                          <li><strong>Date d'échéance :</strong> Définissez la date limite de paiement</li>\n                          <li><strong>Notes :</strong> Ajoutez des commentaires si nécessaire</li>\n                        </ol>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">📊 Statuts des factures</h3>\n                        <div className=\"grid grid-cols-3 gap-4\">\n                          <div className=\"bg-yellow-50 p-4 rounded-lg\">\n                            <Badge variant=\"secondary\" className=\"mb-2\">⏳ En attente</Badge>\n                            <p className=\"text-sm\">Facture créée, en attente de paiement</p>\n                          </div>\n                          <div className=\"bg-green-50 p-4 rounded-lg\">\n                            <Badge variant=\"default\" className=\"mb-2\">✅ Payée</Badge>\n                            <p className=\"text-sm\">Paiement reçu intégralement</p>\n                          </div>\n                          <div className=\"bg-blue-50 p-4 rounded-lg\">\n                            <Badge variant=\"outline\" className=\"mb-2\">💳 Partiellement réglée</Badge>\n                            <p className=\"text-sm\">Paiement partiel reçu</p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">🖨️ Actions sur les factures</h3>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center gap-3\">\n                            <Eye className=\"w-5 h-5 text-blue-600\" />\n                            <div>\n                              <p className=\"font-medium\">Visualiser</p>\n                              <p className=\"text-sm text-muted-foreground\">Aperçu de la facture avant impression</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-3\">\n                            <Download className=\"w-5 h-5 text-green-600\" />\n                            <div>\n                              <p className=\"font-medium\">Télécharger PDF</p>\n                              <p className=\"text-sm text-muted-foreground\">Export au format PDF pour envoi</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-3\">\n                            <Printer className=\"w-5 h-5 text-purple-600\" />\n                            <div>\n                              <p className=\"font-medium\">Imprimer</p>\n                              <p className=\"text-sm text-muted-foreground\">Impression directe de la facture</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-3\">\n                            <Edit className=\"w-5 h-5 text-orange-600\" />\n                            <div>\n                              <p className=\"font-medium\">Modifier</p>\n                              <p className=\"text-sm text-muted-foreground\">Éditer les détails de la facture</p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Ventes */}\n                {activeSection === \"sales\" && (\n                  <div className=\"space-y-6\">\n                    <h2 className=\"text-2xl font-bold mb-4\">Suivi des ventes</h2>\n                    \n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">📈 Tableau de bord des ventes</h3>\n                        <p className=\"mb-4\">\n                          Analysez vos performances commerciales avec des statistiques détaillées et des graphiques interactifs.\n                        </p>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"bg-gradient-to-r from-blue-50 to-blue-100 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-blue-900\">Ventes par mois</h4>\n                            <p className=\"text-sm text-blue-700\">Évolution mensuelle du chiffre d'affaires</p>\n                          </div>\n                          <div className=\"bg-gradient-to-r from-green-50 to-green-100 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-green-900\">Produits populaires</h4>\n                            <p className=\"text-sm text-green-700\">Articles les plus vendus</p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">🎯 Métriques clés</h3>\n                        <ul className=\"space-y-2\">\n                          <li className=\"flex items-center gap-2\">\n                            <TrendingUp className=\"w-4 h-4 text-green-600\" />\n                            <span><strong>Chiffre d'affaires total :</strong> Somme de toutes les ventes</span>\n                          </li>\n                          <li className=\"flex items-center gap-2\">\n                            <BarChart3 className=\"w-4 h-4 text-blue-600\" />\n                            <span><strong>Nombre de transactions :</strong> Total des ventes réalisées</span>\n                          </li>\n                          <li className=\"flex items-center gap-2\">\n                            <Package className=\"w-4 h-4 text-purple-600\" />\n                            <span><strong>Produits vendus :</strong> Quantités écoulées par produit</span>\n                          </li>\n                          <li className=\"flex items-center gap-2\">\n                            <Users className=\"w-4 h-4 text-orange-600\" />\n                            <span><strong>Clients actifs :</strong> Clients ayant effectué des achats</span>\n                          </li>\n                        </ul>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">📊 Filtres et analyses</h3>\n                        <div className=\"space-y-3\">\n                          <div className=\"bg-muted p-4 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">Filtrer par période :</h4>\n                            <ul className=\"text-sm space-y-1\">\n                              <li>• Cette semaine</li>\n                              <li>• Ce mois</li>\n                              <li>• Cette année</li>\n                              <li>• Période personnalisée</li>\n                            </ul>\n                          </div>\n                          <div className=\"bg-muted p-4 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">Grouper par :</h4>\n                            <ul className=\"text-sm space-y-1\">\n                              <li>• Produit</li>\n                              <li>• Client</li>\n                              <li>• Catégorie</li>\n                              <li>• Méthode de paiement</li>\n                            </ul>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Comptabilité */}\n                {activeSection === \"accounting\" && (\n                  <div className=\"space-y-6\">\n                    <h2 className=\"text-2xl font-bold mb-4\">Module Comptabilité</h2>\n                    \n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">💰 Gestion des dépenses</h3>\n                        <div className=\"space-y-4\">\n                          <div>\n                            <h4 className=\"font-medium mb-2\">Créer une dépense :</h4>\n                            <ol className=\"list-decimal list-inside space-y-1\">\n                              <li>Description détaillée de la dépense</li>\n                              <li>Montant et date de la dépense</li>\n                              <li>Catégorie (bureautique, transport, marketing, etc.)</li>\n                              <li>Méthode de paiement utilisée</li>\n                              <li>Justificatif/reçu (optionnel)</li>\n                            </ol>\n                          </div>\n                          \n                          <div className=\"bg-blue-50 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-blue-900 mb-2\">Workflow d'approbation :</h4>\n                            <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                              <div>\n                                <Badge variant=\"secondary\">En attente</Badge>\n                                <p className=\"mt-1\">Dépense créée</p>\n                              </div>\n                              <div>\n                                <Badge variant=\"default\">Approuvée</Badge>\n                                <p className=\"mt-1\">Dépense validée</p>\n                              </div>\n                              <div>\n                                <Badge variant=\"destructive\">Rejetée</Badge>\n                                <p className=\"mt-1\">Dépense refusée</p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">🏦 Fonds d'avance (Imprest)</h3>\n                        <p className=\"mb-3\">\n                          Gérez les fonds d'avance pour les dépenses récurrentes ou les missions.\n                        </p>\n                        <div className=\"space-y-3\">\n                          <div>\n                            <h4 className=\"font-medium mb-2\">Créer un fonds d'avance :</h4>\n                            <ul className=\"list-disc list-inside space-y-1\">\n                              <li>Désigner le détenteur du fonds</li>\n                              <li>Définir le montant initial</li>\n                              <li>Préciser l'objectif/usage</li>\n                              <li>Établir les règles d'utilisation</li>\n                            </ul>\n                          </div>\n                          \n                          <div>\n                            <h4 className=\"font-medium mb-2\">Types de transactions :</h4>\n                            <div className=\"grid grid-cols-3 gap-4\">\n                              <div className=\"bg-green-50 p-3 rounded-lg\">\n                                <div className=\"flex items-center gap-2\">\n                                  <TrendingUp className=\"w-4 h-4 text-green-600\" />\n                                  <span className=\"font-medium text-green-800\">Dépôt</span>\n                                </div>\n                                <p className=\"text-sm text-green-700\">Ajout de fonds</p>\n                              </div>\n                              <div className=\"bg-red-50 p-3 rounded-lg\">\n                                <div className=\"flex items-center gap-2\">\n                                  <TrendingUp className=\"w-4 h-4 text-red-600 rotate-180\" />\n                                  <span className=\"font-medium text-red-800\">Retrait</span>\n                                </div>\n                                <p className=\"text-sm text-red-700\">Récupération de fonds</p>\n                              </div>\n                              <div className=\"bg-blue-50 p-3 rounded-lg\">\n                                <div className=\"flex items-center gap-2\">\n                                  <CreditCard className=\"w-4 h-4 text-blue-600\" />\n                                  <span className=\"font-medium text-blue-800\">Dépense</span>\n                                </div>\n                                <p className=\"text-sm text-blue-700\">Utilisation directe</p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">📈 Gestion des revenus</h3>\n                        <p className=\"mb-3\">\n                          Enregistrez tous vos revenus pour un suivi comptable complet.\n                        </p>\n                        <div className=\"space-y-3\">\n                          <div>\n                            <h4 className=\"font-medium mb-2\">Types de revenus :</h4>\n                            <ul className=\"list-disc list-inside space-y-1\">\n                              <li>Ventes de produits/services</li>\n                              <li>Prestations exceptionnelles</li>\n                              <li>Revenus financiers</li>\n                              <li>Subventions et aides</li>\n                              <li>Autres recettes</li>\n                            </ul>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">📋 Rapports comptables</h3>\n                        <p className=\"mb-3\">\n                          Générez des rapports détaillés pour vos analyses financières.\n                        </p>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"bg-muted p-4 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">Rapport de dépenses</h4>\n                            <ul className=\"text-sm space-y-1\">\n                              <li>• Par catégorie</li>\n                              <li>• Par période</li>\n                              <li>• Par statut</li>\n                            </ul>\n                          </div>\n                          <div className=\"bg-muted p-4 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">Rapport de revenus</h4>\n                            <ul className=\"text-sm space-y-1\">\n                              <li>• Évolution mensuelle</li>\n                              <li>• Par source</li>\n                              <li>• Comparaison annuelle</li>\n                            </ul>\n                          </div>\n                          <div className=\"bg-muted p-4 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">Bilan financier</h4>\n                            <ul className=\"text-sm space-y-1\">\n                              <li>• Résultat net</li>\n                              <li>• Trésorerie</li>\n                              <li>• Fonds d'avance</li>\n                            </ul>\n                          </div>\n                          <div className=\"bg-muted p-4 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">Exports</h4>\n                            <ul className=\"text-sm space-y-1\">\n                              <li>• Format PDF</li>\n                              <li>• Format Excel</li>\n                              <li>• Format CSV</li>\n                            </ul>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Alertes */}\n                {activeSection === \"alerts\" && (\n                  <div className=\"space-y-6\">\n                    <h2 className=\"text-2xl font-bold mb-4\">Système d'alertes</h2>\n                    \n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">🔔 Types d'alertes automatiques</h3>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"bg-yellow-50 border border-yellow-200 p-4 rounded-lg\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <AlertTriangle className=\"w-5 h-5 text-yellow-600\" />\n                              <span className=\"font-medium text-yellow-800\">Stock faible</span>\n                            </div>\n                            <p className=\"text-sm text-yellow-700\">\n                              Quand un produit atteint son seuil d'alerte\n                            </p>\n                          </div>\n                          \n                          <div className=\"bg-red-50 border border-red-200 p-4 rounded-lg\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <AlertTriangle className=\"w-5 h-5 text-red-600\" />\n                              <span className=\"font-medium text-red-800\">Stock critique</span>\n                            </div>\n                            <p className=\"text-sm text-red-700\">\n                              Quand un produit n'a plus de stock\n                            </p>\n                          </div>\n                          \n                          <div className=\"bg-orange-50 border border-orange-200 p-4 rounded-lg\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <Clock className=\"w-5 h-5 text-orange-600\" />\n                              <span className=\"font-medium text-orange-800\">Facture en retard</span>\n                            </div>\n                            <p className=\"text-sm text-orange-700\">\n                              Quand une facture dépasse sa date d'échéance\n                            </p>\n                          </div>\n                          \n                          <div className=\"bg-blue-50 border border-blue-200 p-4 rounded-lg\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <DollarSign className=\"w-5 h-5 text-blue-600\" />\n                              <span className=\"font-medium text-blue-800\">Paiement dû</span>\n                            </div>\n                            <p className=\"text-sm text-blue-700\">\n                              Rappel des paiements à venir\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">⚡ Niveaux de priorité</h3>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center gap-3\">\n                            <Badge variant=\"secondary\">Faible</Badge>\n                            <p>Informations générales, pas d'action urgente requise</p>\n                          </div>\n                          <div className=\"flex items-center gap-3\">\n                            <Badge variant=\"default\">Moyenne</Badge>\n                            <p>Nécessite votre attention dans les prochains jours</p>\n                          </div>\n                          <div className=\"flex items-center gap-3\">\n                            <Badge variant=\"destructive\">Élevée</Badge>\n                            <p>Requiert une action immédiate</p>\n                          </div>\n                          <div className=\"flex items-center gap-3\">\n                            <Badge className=\"bg-red-600\">Critique</Badge>\n                            <p>Situation urgente, action immédiate nécessaire</p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">🎛️ Gestion des alertes</h3>\n                        <div className=\"space-y-3\">\n                          <div>\n                            <h4 className=\"font-medium mb-2\">Actions disponibles :</h4>\n                            <ul className=\"space-y-2\">\n                              <li className=\"flex items-center gap-2\">\n                                <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                                <span><strong>Marquer comme lue :</strong> L'alerte reste visible mais n'est plus en attente</span>\n                              </li>\n                              <li className=\"flex items-center gap-2\">\n                                <Eye className=\"w-4 h-4 text-blue-600\" />\n                                <span><strong>Voir les détails :</strong> Accéder aux informations complètes</span>\n                              </li>\n                              <li className=\"flex items-center gap-2\">\n                                <Trash2 className=\"w-4 h-4 text-red-600\" />\n                                <span><strong>Supprimer :</strong> Retirer définitivement l'alerte</span>\n                              </li>\n                            </ul>\n                          </div>\n                          \n                          <div className=\"bg-muted p-4 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">💡 Actions en lot :</h4>\n                            <ul className=\"text-sm space-y-1\">\n                              <li>• Marquer toutes les alertes comme lues</li>\n                              <li>• Supprimer toutes les alertes résolues</li>\n                              <li>• Filtrer par type ou priorité</li>\n                            </ul>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Paramètres */}\n                {activeSection === \"settings\" && (\n                  <div className=\"space-y-6\">\n                    <h2 className=\"text-2xl font-bold mb-4\">Paramètres et configuration</h2>\n                    \n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">👤 Profil utilisateur</h3>\n                        <p className=\"mb-3\">\n                          Gérez vos informations personnelles et d'entreprise.\n                        </p>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <h4 className=\"font-medium mb-2\">Informations personnelles :</h4>\n                            <ul className=\"text-sm space-y-1\">\n                              <li>• Prénom et nom</li>\n                              <li>• Adresse email</li>\n                              <li>• Numéro de téléphone</li>\n                              <li>• Photo de profil</li>\n                            </ul>\n                          </div>\n                          <div>\n                            <h4 className=\"font-medium mb-2\">Informations d'entreprise :</h4>\n                            <ul className=\"text-sm space-y-1\">\n                              <li>• Nom de l'entreprise</li>\n                              <li>• Poste/fonction</li>\n                              <li>• Adresse complète</li>\n                              <li>• Type d'activité</li>\n                            </ul>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">🌍 Préférences linguistiques</h3>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"bg-blue-50 p-4 rounded-lg\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <span className=\"text-2xl\">🇫🇷</span>\n                              <span className=\"font-medium\">Français</span>\n                            </div>\n                            <p className=\"text-sm text-blue-700\">\n                              Interface complète en français\n                            </p>\n                          </div>\n                          <div className=\"bg-green-50 p-4 rounded-lg\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <span className=\"text-2xl\">🇬🇧</span>\n                              <span className=\"font-medium\">English</span>\n                            </div>\n                            <p className=\"text-sm text-green-700\">\n                              Full English interface\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">💱 Gestion des devises</h3>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"bg-orange-50 p-4 rounded-lg\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <DollarSign className=\"w-5 h-5 text-orange-600\" />\n                              <span className=\"font-medium\">F CFA (XOF)</span>\n                            </div>\n                            <p className=\"text-sm text-orange-700\">\n                              Franc CFA d'Afrique de l'Ouest\n                            </p>\n                            <div className=\"mt-2 text-xs\">\n                              <p>Format : 1 000 F CFA</p>\n                            </div>\n                          </div>\n                          <div className=\"bg-purple-50 p-4 rounded-lg\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <DollarSign className=\"w-5 h-5 text-purple-600\" />\n                              <span className=\"font-medium\">Cedi (GHS)</span>\n                            </div>\n                            <p className=\"text-sm text-purple-700\">\n                              Cedi ghanéen\n                            </p>\n                            <div className=\"mt-2 text-xs\">\n                              <p>Format : GH₵ 1,000.00</p>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"bg-muted p-4 rounded-lg mt-4\">\n                          <p className=\"text-sm\">\n                            💡 <strong>Note :</strong> Le changement de devise affectera l'affichage \n                            de tous les montants dans l'application, mais ne convertira pas les données existantes.\n                          </p>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">🔔 Préférences de notifications</h3>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                            <div>\n                              <p className=\"font-medium\">Alertes de stock</p>\n                              <p className=\"text-sm text-muted-foreground\">Notifications pour stock faible</p>\n                            </div>\n                            <Button variant=\"outline\" size=\"sm\">Activer</Button>\n                          </div>\n                          <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                            <div>\n                              <p className=\"font-medium\">Factures en retard</p>\n                              <p className=\"text-sm text-muted-foreground\">Rappels d'échéances</p>\n                            </div>\n                            <Button variant=\"outline\" size=\"sm\">Activer</Button>\n                          </div>\n                          <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                            <div>\n                              <p className=\"font-medium\">Nouveaux paiements</p>\n                              <p className=\"text-sm text-muted-foreground\">Confirmation de réception</p>\n                            </div>\n                            <Button variant=\"outline\" size=\"sm\">Activer</Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Export et Sauvegarde */}\n                {activeSection === \"export\" && (\n                  <div className=\"space-y-6\">\n                    <h2 className=\"text-2xl font-bold mb-4\">Export et Sauvegarde</h2>\n                    \n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">📁 Types d'export disponibles</h3>\n                        <div className=\"grid grid-cols-3 gap-4\">\n                          <div className=\"bg-blue-50 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-blue-900 mb-2\">Clients</h4>\n                            <ul className=\"text-sm text-blue-700 space-y-1\">\n                              <li>• Informations de contact</li>\n                              <li>• Historique des achats</li>\n                              <li>• Statistiques par client</li>\n                            </ul>\n                          </div>\n                          <div className=\"bg-green-50 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-green-900 mb-2\">Produits</h4>\n                            <ul className=\"text-sm text-green-700 space-y-1\">\n                              <li>• Catalogue complet</li>\n                              <li>• Niveaux de stock</li>\n                              <li>• Prix et catégories</li>\n                            </ul>\n                          </div>\n                          <div className=\"bg-purple-50 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-purple-900 mb-2\">Factures</h4>\n                            <ul className=\"text-sm text-purple-700 space-y-1\">\n                              <li>• Détails des factures</li>\n                              <li>• Statuts de paiement</li>\n                              <li>• Historique complet</li>\n                            </ul>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">📊 Formats d'export</h3>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"bg-muted p-4 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">CSV (Excel)</h4>\n                            <ul className=\"text-sm space-y-1\">\n                              <li>• Compatible avec Excel</li>\n                              <li>• Facile à manipuler</li>\n                              <li>• Idéal pour les analyses</li>\n                            </ul>\n                          </div>\n                          <div className=\"bg-muted p-4 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">PDF</h4>\n                            <ul className=\"text-sm space-y-1\">\n                              <li>• Factures individuelles</li>\n                              <li>• Rapports formatés</li>\n                              <li>• Prêt pour impression</li>\n                            </ul>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">⏰ Procédure d'export</h3>\n                        <ol className=\"list-decimal list-inside space-y-2\">\n                          <li>Accédez à la page \"Export\" dans le menu principal</li>\n                          <li>Sélectionnez le type de données à exporter (clients, produits, factures)</li>\n                          <li>Choisissez la période (optionnel) :\n                            <ul className=\"list-disc list-inside ml-6 mt-2 space-y-1\">\n                              <li>Tout l'historique</li>\n                              <li>Derniers 30 jours</li>\n                              <li>Derniers 3 mois</li>\n                              <li>Cette année</li>\n                              <li>Période personnalisée</li>\n                            </ul>\n                          </li>\n                          <li>Cliquez sur \"Télécharger\" pour lancer l'export</li>\n                          <li>Le fichier se télécharge automatiquement dans votre dossier de téléchargements</li>\n                        </ol>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">💾 Sauvegarde automatique</h3>\n                        <div className=\"bg-green-50 border border-green-200 p-4 rounded-lg\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                            <span className=\"font-medium text-green-800\">Sauvegarde sécurisée</span>\n                          </div>\n                          <p className=\"text-sm text-green-700 mb-3\">\n                            Vos données sont automatiquement sauvegardées de manière sécurisée.\n                          </p>\n                          <ul className=\"text-sm text-green-700 space-y-1\">\n                            <li>• Sauvegarde en temps réel</li>\n                            <li>• Stockage chiffré</li>\n                            <li>• Accès multi-appareils</li>\n                            <li>• Récupération en cas de problème</li>\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Sécurité */}\n                {activeSection === \"security\" && (\n                  <div className=\"space-y-6\">\n                    <h2 className=\"text-2xl font-bold mb-4\">Sécurité et confidentialité</h2>\n                    \n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">🔒 Protection des données</h3>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"bg-blue-50 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-blue-900 mb-2\">Chiffrement</h4>\n                            <p className=\"text-sm text-blue-700\">\n                              Toutes vos données sont chiffrées en transit et au repos\n                            </p>\n                          </div>\n                          <div className=\"bg-green-50 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-green-900 mb-2\">Authentification</h4>\n                            <p className=\"text-sm text-green-700\">\n                              Connexion sécurisée avec gestion des sessions\n                            </p>\n                          </div>\n                          <div className=\"bg-purple-50 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-purple-900 mb-2\">Isolation</h4>\n                            <p className=\"text-sm text-purple-700\">\n                              Vos données sont isolées et privées\n                            </p>\n                          </div>\n                          <div className=\"bg-orange-50 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-orange-900 mb-2\">Conformité</h4>\n                            <p className=\"text-sm text-orange-700\">\n                              Respect des réglementations en vigueur\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">🔐 Bonnes pratiques de sécurité</h3>\n                        <div className=\"space-y-3\">\n                          <div className=\"bg-muted p-4 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">Mot de passe sécurisé :</h4>\n                            <ul className=\"text-sm space-y-1\">\n                              <li>• Au moins 8 caractères</li>\n                              <li>• Combinaison de lettres, chiffres et symboles</li>\n                              <li>• Évitez les informations personnelles</li>\n                              <li>• Changez-le régulièrement</li>\n                            </ul>\n                          </div>\n                          \n                          <div className=\"bg-muted p-4 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">Navigation sécurisée :</h4>\n                            <ul className=\"text-sm space-y-1\">\n                              <li>• Déconnectez-vous après utilisation</li>\n                              <li>• N'utilisez pas d'ordinateurs publics</li>\n                              <li>• Vérifiez l'URL de connexion</li>\n                              <li>• Maintenez votre navigateur à jour</li>\n                            </ul>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">🛡️ Système de licence</h3>\n                        <p className=\"mb-3\">\n                          YGestion utilise un système de licence pour garantir la sécurité et l'authenticité.\n                        </p>\n                        <div className=\"space-y-3\">\n                          <div className=\"bg-yellow-50 border border-yellow-200 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-yellow-800 mb-2\">Période d'essai :</h4>\n                            <p className=\"text-sm text-yellow-700\">\n                              60 secondes pour tester l'application avant activation\n                            </p>\n                          </div>\n                          \n                          <div className=\"bg-green-50 border border-green-200 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-green-800 mb-2\">Licence activée :</h4>\n                            <p className=\"text-sm text-green-700\">\n                              Accès complet à toutes les fonctionnalités\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Utilisation mobile */}\n                {activeSection === \"mobile\" && (\n                  <div className=\"space-y-6\">\n                    <h2 className=\"text-2xl font-bold mb-4\">Utilisation mobile</h2>\n                    \n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">📱 Design responsive</h3>\n                        <p className=\"mb-4\">\n                          YGestion s'adapte automatiquement à tous les types d'écrans et d'appareils.\n                        </p>\n                        <div className=\"grid grid-cols-3 gap-4\">\n                          <div className=\"bg-blue-50 p-4 rounded-lg text-center\">\n                            <Smartphone className=\"w-8 h-8 mx-auto mb-2 text-blue-600\" />\n                            <h4 className=\"font-medium text-blue-900\">Mobile</h4>\n                            <p className=\"text-sm text-blue-700\">Interface optimisée</p>\n                          </div>\n                          <div className=\"bg-green-50 p-4 rounded-lg text-center\">\n                            <Package className=\"w-8 h-8 mx-auto mb-2 text-green-600\" />\n                            <h4 className=\"font-medium text-green-900\">Tablette</h4>\n                            <p className=\"text-sm text-green-700\">Affichage étendu</p>\n                          </div>\n                          <div className=\"bg-purple-50 p-4 rounded-lg text-center\">\n                            <Settings className=\"w-8 h-8 mx-auto mb-2 text-purple-600\" />\n                            <h4 className=\"font-medium text-purple-900\">Desktop</h4>\n                            <p className=\"text-sm text-purple-700\">Expérience complète</p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">✨ Fonctionnalités mobiles</h3>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-start gap-3\">\n                            <CheckCircle className=\"w-5 h-5 text-green-600 mt-1\" />\n                            <div>\n                              <p className=\"font-medium\">Navigation tactile optimisée</p>\n                              <p className=\"text-sm text-muted-foreground\">Boutons et liens facilement accessibles au doigt</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-start gap-3\">\n                            <CheckCircle className=\"w-5 h-5 text-green-600 mt-1\" />\n                            <div>\n                              <p className=\"font-medium\">Saisie simplifiée</p>\n                              <p className=\"text-sm text-muted-foreground\">Formulaires adaptés aux écrans tactiles</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-start gap-3\">\n                            <CheckCircle className=\"w-5 h-5 text-green-600 mt-1\" />\n                            <div>\n                              <p className=\"font-medium\">Tableaux scrollables</p>\n                              <p className=\"text-sm text-muted-foreground\">Navigation horizontale fluide dans les listes</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-start gap-3\">\n                            <CheckCircle className=\"w-5 h-5 text-green-600 mt-1\" />\n                            <div>\n                              <p className=\"font-medium\">Sidebar collapsible</p>\n                              <p className=\"text-sm text-muted-foreground\">Menu principal escamotable pour plus d'espace</p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">💡 Conseils d'utilisation mobile</h3>\n                        <div className=\"bg-muted p-4 rounded-lg\">\n                          <ul className=\"space-y-2 text-sm\">\n                            <li>• <strong>Connexion stable :</strong> Assurez-vous d'avoir une bonne connexion internet</li>\n                            <li>• <strong>Navigateur récent :</strong> Utilisez un navigateur à jour (Chrome, Safari, Firefox)</li>\n                            <li>• <strong>Mode paysage :</strong> Rotation recommandée pour les tableaux</li>\n                            <li>• <strong>Zoom adaptatif :</strong> L'interface s'ajuste automatiquement</li>\n                            <li>• <strong>Sauvegarde auto :</strong> Vos modifications sont sauvegardées en temps réel</li>\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Support */}\n                {activeSection === \"support\" && (\n                  <div className=\"space-y-6\">\n                    <h2 className=\"text-2xl font-bold mb-4\">Support et assistance</h2>\n                    \n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">🆘 Comment obtenir de l'aide</h3>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"bg-blue-50 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-blue-900 mb-2\">Guide utilisateur</h4>\n                            <p className=\"text-sm text-blue-700 mb-3\">\n                              Ce guide complet couvre toutes les fonctionnalités\n                            </p>\n                            <Button size=\"sm\" variant=\"outline\">\n                              <Download className=\"w-4 h-4 mr-2\" />\n                              Télécharger PDF\n                            </Button>\n                          </div>\n                          <div className=\"bg-green-50 p-4 rounded-lg\">\n                            <h4 className=\"font-medium text-green-900 mb-2\">Support technique</h4>\n                            <p className=\"text-sm text-green-700 mb-3\">\n                              Contactez notre équipe pour assistance\n                            </p>\n                            <Button size=\"sm\" variant=\"outline\">\n                              <Globe className=\"w-4 h-4 mr-2\" />\n                              Contacter\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">❓ Questions fréquentes</h3>\n                        <div className=\"space-y-4\">\n                          <div className=\"bg-muted p-4 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">Comment changer de langue ?</h4>\n                            <p className=\"text-sm\">\n                              Allez dans Paramètres → Préférences → Sélectionnez votre langue préférée.\n                            </p>\n                          </div>\n                          \n                          <div className=\"bg-muted p-4 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">Comment activer ma licence ?</h4>\n                            <p className=\"text-sm\">\n                              Après la période d'essai, entrez votre clé de licence dans la page d'activation.\n                            </p>\n                          </div>\n                          \n                          <div className=\"bg-muted p-4 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">Mes données sont-elles sécurisées ?</h4>\n                            <p className=\"text-sm\">\n                              Oui, toutes les données sont chiffrées et stockées de manière sécurisée.\n                            </p>\n                          </div>\n                          \n                          <div className=\"bg-muted p-4 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">Comment exporter mes données ?</h4>\n                            <p className=\"text-sm\">\n                              Utilisez la page Export pour télécharger vos données au format CSV ou PDF.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">📞 Informations de contact</h3>\n                        <div className=\"bg-blue-50 border border-blue-200 p-6 rounded-lg\">\n                          <h4 className=\"font-medium text-blue-900 mb-4\">Équipe YGestion</h4>\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center gap-3\">\n                              <Globe className=\"w-5 h-5 text-blue-600\" />\n                              <span>Support technique et commercial</span>\n                            </div>\n                            <div className=\"flex items-center gap-3\">\n                              <Clock className=\"w-5 h-5 text-blue-600\" />\n                              <span>Disponible 7j/7 - Réponse sous 24h</span>\n                            </div>\n                            <div className=\"flex items-center gap-3\">\n                              <Shield className=\"w-5 h-5 text-blue-600\" />\n                              <span>Support sécurisé et confidentiel</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-3\">🚀 Mises à jour et améliorations</h3>\n                        <p className=\"mb-3\">\n                          YGestion évolue constamment pour répondre à vos besoins.\n                        </p>\n                        <div className=\"bg-green-50 border border-green-200 p-4 rounded-lg\">\n                          <h4 className=\"font-medium text-green-800 mb-2\">Nouvelles fonctionnalités :</h4>\n                          <ul className=\"text-sm text-green-700 space-y-1\">\n                            <li>• Mises à jour automatiques</li>\n                            <li>• Nouvelles fonctionnalités régulières</li>\n                            <li>• Améliorations de performance</li>\n                            <li>• Corrections de bugs rapides</li>\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":78925},"build-exe-guide.md":{"content":"# 🚀 Guide de Génération .exe pour YGestion\n\n## Configuration VS Code pour la génération d'exécutables\n\n### 📋 Prérequis\n- Node.js 18+ installé\n- VS Code avec les extensions recommandées\n- Windows, macOS ou Linux (pour cross-compilation)\n\n### 🛠️ Scripts VS Code Disponibles\n\nUtilisez **Ctrl+Shift+P** puis tapez **\"Tasks: Run Task\"** pour accéder aux scripts :\n\n#### Scripts Principaux :\n- **🚀 Build Desktop App (Windows .exe)** - Build complet (web + desktop + .exe)\n- **💻 Generate Windows .exe** - Génère l'installeur Windows .exe\n- **📱 Generate Portable .exe** - Génère une version portable .exe\n- **⚡ Quick .exe (Skip Web Build)** - Build rapide (ignore la partie web)\n\n#### Scripts Utilitaires :\n- **📦 Build Web App** - Construit uniquement l'application web\n- **🧹 Clean Build** - Nettoie tous les fichiers de build\n- **🔍 Test Electron (Development)** - Lance l'app en mode développement\n\n### 🎯 Workflow Recommandé\n\n#### Pour un Build Complet (Première fois) :\n1. **Ctrl+Shift+P** → **\"Tasks: Run Task\"**\n2. Sélectionnez **\"🚀 Build Desktop App (Windows .exe)\"**\n3. Attendez la compilation complète\n4. Fichiers générés dans `desktop/build/`\n\n#### Pour des Builds Rapides (Modifications Electron seulement) :\n1. **Ctrl+Shift+P** → **\"Tasks: Run Task\"**\n2. Sélectionnez **\"⚡ Quick .exe (Skip Web Build)\"**\n3. Plus rapide si aucun changement dans l'app web\n\n### 📁 Structure des Fichiers Générés\n\n```\ndesktop/build/\n├── YGestion Setup 1.0.0.exe          # Installeur Windows\n├── YGestion-1.0.0-portable.exe       # Version portable\n└── win-unpacked/                      # Version non-packagée\n    └── YGestion.exe                   # Exécutable principal\n```\n\n### 🎛️ Types de Distribution\n\n#### 1. **Installeur Windows (.exe)**\n- Crée un vrai installeur avec désinstalleur\n- Ajoute au menu Démarrer et Bureau\n- Recommandé pour la distribution finale\n\n#### 2. **Version Portable (.exe)**\n- Un seul fichier exécutable\n- Aucune installation requise\n- Parfait pour les tests et démos\n\n#### 3. **Version Non-packagée**\n- Dossier avec tous les fichiers\n- Utile pour le debugging et les tests\n\n### ⚙️ Configuration Avancée\n\n#### Modifier les Détails de l'App :\nÉditez `desktop/package.json` :\n```json\n{\n  \"build\": {\n    \"productName\": \"YGestion\",\n    \"appId\": \"com.ygestion.desktop\",\n    \"copyright\": \"Copyright © 2024 YGestion Team\"\n  }\n}\n```\n\n#### Ajouter des Icônes :\n1. Placez vos icônes dans `desktop/assets/`\n2. Formats requis :\n   - Windows: `.ico` (256x256 recommandé)\n   - macOS: `.icns`\n   - Linux: `.png` (512x512 recommandé)\n\n### 🔧 Dépannage\n\n#### Problème : \"electron-builder command not found\"\n```bash\ncd desktop\nnpm install\n```\n\n#### Problème : \"Build failed - backend not found\"\n```bash\n# Assurez-vous que le build web est fait d'abord\nnpm run build\ncd desktop\nnpm run dist:windows\n```\n\n#### Problème : \"Permission denied\"\n- Sur Windows : Exécutez VS Code en tant qu'administrateur\n- Sur Linux/macOS : Vérifiez les permissions des dossiers\n\n### 📊 Performance de Build\n\n| Type de Build | Temps Approximatif | Taille Finale |\n|---------------|-------------------|---------------|\n| Build complet | 2-5 minutes | ~150-200 MB |\n| Build rapide | 30-60 secondes | ~150-200 MB |\n| Clean build | 3-8 minutes | ~150-200 MB |\n\n### 🚀 Distribution\n\n#### Pour les Tests :\n- Utilisez la **version portable** (.exe)\n- Partage facile, aucune installation\n\n#### Pour la Production :\n- Utilisez l'**installeur Windows** (.exe)\n- Signature de code recommandée (certificat)\n- Tests sur machines Windows propres\n\n### 💡 Conseils Pro\n\n1. **Testez toujours** sur une machine propre avant distribution\n2. **Utilisez des versions** cohérentes dans `desktop/package.json`\n3. **Gardez des backups** des builds fonctionnels\n4. **Documentez les changements** entre versions\n5. **Optimisez la taille** en excluant les fichiers inutiles\n\n### 🔄 Automatisation CI/CD\n\nPour automatiser avec GitHub Actions, créez `.github/workflows/build-desktop.yml` :\n```yaml\nname: Build Desktop App\non: [push, pull_request]\njobs:\n  build:\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n      - run: npm install\n      - run: npm run build\n      - run: cd desktop && npm install && npm run dist:windows\n```\n\n---\n**🎉 Félicitations !** Vous êtes maintenant prêt à générer des exécutables Windows pour YGestion depuis VS Code !","size_bytes":4541}},"version":1}